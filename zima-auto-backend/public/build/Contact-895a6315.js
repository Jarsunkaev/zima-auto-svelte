
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, w as validate_store, x as component_subscribe, v as validate_slots, y as currentLang, o as onMount, z as t, K as globals, e as element, t as text, a as space, b as svg_element, c as attr_dev, f as add_location, q as src_url_equal, g as set_style, h as insert_dev, j as append_dev, l as listen_dev, m as set_data_dev, n as noop, p as detach_dev, V as set_input_value, W as prevent_default, X as prop_dev, r as run_all, L as empty } from './main-00d1c1b7.js';
import { g as gsapWithCSS } from './index-171583ae.js';

/* src/pages/Contact.svelte generated by Svelte v3.59.2 */

const { console: console_1 } = globals;
const file = "src/pages/Contact.svelte";

// (323:6) {:else}
function create_else_block(ctx) {
	let t0;
	let form;
	let div0;
	let label0;
	let t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.name + "";
	let t1;
	let t2;
	let input0;
	let input0_placeholder_value;
	let input0_aria_invalid_value;
	let t3;
	let t4;
	let div3;
	let div1;
	let label1;
	let t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.email + "";
	let t5;
	let t6;
	let input1;
	let input1_placeholder_value;
	let input1_aria_invalid_value;
	let t7;
	let t8;
	let div2;
	let label2;
	let t9_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.phone + "";
	let t9;
	let t10;
	let input2;
	let input2_placeholder_value;
	let t11;
	let div4;
	let label3;
	let t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.subject + "";
	let t12;
	let t13;
	let input3;
	let input3_placeholder_value;
	let input3_aria_invalid_value;
	let t14;
	let t15;
	let div5;
	let label4;
	let t16_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.message + "";
	let t16;
	let t17;
	let textarea;
	let textarea_placeholder_value;
	let textarea_aria_invalid_value;
	let t18;
	let t19;
	let button;

	let t20_value = (/*isSubmitting*/ ctx[1]
	? '...'
	: /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.button) + "";

	let t20;
	let mounted;
	let dispose;
	let if_block0 = /*errorMessage*/ ctx[3] && !/*formErrors*/ ctx[4].name && !/*formErrors*/ ctx[4].email && !/*formErrors*/ ctx[4].subject && !/*formErrors*/ ctx[4].message && create_if_block_7(ctx);
	let if_block1 = /*formErrors*/ ctx[4].name && create_if_block_6(ctx);
	let if_block2 = /*formErrors*/ ctx[4].email && create_if_block_5(ctx);
	let if_block3 = /*formErrors*/ ctx[4].subject && create_if_block_4(ctx);
	let if_block4 = /*formErrors*/ ctx[4].message && create_if_block_3(ctx);

	const block = {
		c: function create() {
			if (if_block0) if_block0.c();
			t0 = space();
			form = element("form");
			div0 = element("div");
			label0 = element("label");
			t1 = text(t1_value);
			t2 = space();
			input0 = element("input");
			t3 = space();
			if (if_block1) if_block1.c();
			t4 = space();
			div3 = element("div");
			div1 = element("div");
			label1 = element("label");
			t5 = text(t5_value);
			t6 = space();
			input1 = element("input");
			t7 = space();
			if (if_block2) if_block2.c();
			t8 = space();
			div2 = element("div");
			label2 = element("label");
			t9 = text(t9_value);
			t10 = space();
			input2 = element("input");
			t11 = space();
			div4 = element("div");
			label3 = element("label");
			t12 = text(t12_value);
			t13 = space();
			input3 = element("input");
			t14 = space();
			if (if_block3) if_block3.c();
			t15 = space();
			div5 = element("div");
			label4 = element("label");
			t16 = text(t16_value);
			t17 = space();
			textarea = element("textarea");
			t18 = space();
			if (if_block4) if_block4.c();
			t19 = space();
			button = element("button");
			t20 = text(t20_value);
			attr_dev(label0, "for", "name");
			attr_dev(label0, "class", "svelte-104mhdt");
			add_location(label0, file, 328, 12, 12327);
			attr_dev(input0, "type", "text");
			attr_dev(input0, "id", "name");
			input0.required = true;

			attr_dev(input0, "placeholder", input0_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg a nevét'
			: 'Enter your name');

			attr_dev(input0, "aria-invalid", input0_aria_invalid_value = /*formErrors*/ ctx[4].name ? 'true' : 'false');
			attr_dev(input0, "class", "svelte-104mhdt");
			add_location(input0, file, 329, 12, 12399);
			attr_dev(div0, "class", "form-group svelte-104mhdt");
			add_location(div0, file, 327, 10, 12290);
			attr_dev(label1, "for", "email");
			attr_dev(label1, "class", "svelte-104mhdt");
			add_location(label1, file, 344, 14, 12905);
			attr_dev(input1, "type", "email");
			attr_dev(input1, "id", "email");
			input1.required = true;

			attr_dev(input1, "placeholder", input1_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg email címét'
			: 'Enter your email address');

			attr_dev(input1, "aria-invalid", input1_aria_invalid_value = /*formErrors*/ ctx[4].email ? 'true' : 'false');
			attr_dev(input1, "class", "svelte-104mhdt");
			add_location(input1, file, 345, 14, 12981);
			attr_dev(div1, "class", "form-group svelte-104mhdt");
			add_location(div1, file, 343, 12, 12866);
			attr_dev(label2, "for", "phone");
			attr_dev(label2, "class", "svelte-104mhdt");
			add_location(label2, file, 359, 14, 13496);
			attr_dev(input2, "type", "tel");
			attr_dev(input2, "id", "phone");

			attr_dev(input2, "placeholder", input2_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg telefonszámát'
			: 'Enter your phone number');

			attr_dev(input2, "class", "svelte-104mhdt");
			add_location(input2, file, 360, 14, 13572);
			attr_dev(div2, "class", "form-group svelte-104mhdt");
			add_location(div2, file, 358, 12, 13457);
			attr_dev(div3, "class", "form-row svelte-104mhdt");
			add_location(div3, file, 342, 10, 12831);
			attr_dev(label3, "for", "subject");
			attr_dev(label3, "class", "svelte-104mhdt");
			add_location(label3, file, 370, 12, 13885);
			attr_dev(input3, "type", "text");
			attr_dev(input3, "id", "subject");
			input3.required = true;

			attr_dev(input3, "placeholder", input3_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg a tárgyat'
			: 'Enter the subject');

			attr_dev(input3, "aria-invalid", input3_aria_invalid_value = /*formErrors*/ ctx[4].subject ? 'true' : 'false');
			attr_dev(input3, "class", "svelte-104mhdt");
			add_location(input3, file, 371, 12, 13963);
			attr_dev(div4, "class", "form-group svelte-104mhdt");
			add_location(div4, file, 369, 10, 13848);
			attr_dev(label4, "for", "message");
			attr_dev(label4, "class", "svelte-104mhdt");
			add_location(label4, file, 385, 12, 14452);
			attr_dev(textarea, "id", "message");
			attr_dev(textarea, "rows", "5");
			textarea.required = true;

			attr_dev(textarea, "placeholder", textarea_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Írja meg üzenetét'
			: 'Enter your message');

			attr_dev(textarea, "aria-invalid", textarea_aria_invalid_value = /*formErrors*/ ctx[4].message ? 'true' : 'false');
			attr_dev(textarea, "class", "svelte-104mhdt");
			add_location(textarea, file, 386, 12, 14530);
			attr_dev(div5, "class", "form-group svelte-104mhdt");
			add_location(div5, file, 384, 10, 14415);
			attr_dev(button, "type", "submit");
			attr_dev(button, "class", "btn btn-primary svelte-104mhdt");
			button.disabled = /*isSubmitting*/ ctx[1];
			add_location(button, file, 399, 10, 14992);
			attr_dev(form, "class", "contact-form svelte-104mhdt");
			add_location(form, file, 326, 8, 12212);
		},
		m: function mount(target, anchor) {
			if (if_block0) if_block0.m(target, anchor);
			insert_dev(target, t0, anchor);
			insert_dev(target, form, anchor);
			append_dev(form, div0);
			append_dev(div0, label0);
			append_dev(label0, t1);
			append_dev(div0, t2);
			append_dev(div0, input0);
			set_input_value(input0, /*formData*/ ctx[0].name);
			append_dev(div0, t3);
			if (if_block1) if_block1.m(div0, null);
			append_dev(form, t4);
			append_dev(form, div3);
			append_dev(div3, div1);
			append_dev(div1, label1);
			append_dev(label1, t5);
			append_dev(div1, t6);
			append_dev(div1, input1);
			set_input_value(input1, /*formData*/ ctx[0].email);
			append_dev(div1, t7);
			if (if_block2) if_block2.m(div1, null);
			append_dev(div3, t8);
			append_dev(div3, div2);
			append_dev(div2, label2);
			append_dev(label2, t9);
			append_dev(div2, t10);
			append_dev(div2, input2);
			set_input_value(input2, /*formData*/ ctx[0].phone);
			append_dev(form, t11);
			append_dev(form, div4);
			append_dev(div4, label3);
			append_dev(label3, t12);
			append_dev(div4, t13);
			append_dev(div4, input3);
			set_input_value(input3, /*formData*/ ctx[0].subject);
			append_dev(div4, t14);
			if (if_block3) if_block3.m(div4, null);
			append_dev(form, t15);
			append_dev(form, div5);
			append_dev(div5, label4);
			append_dev(label4, t16);
			append_dev(div5, t17);
			append_dev(div5, textarea);
			set_input_value(textarea, /*formData*/ ctx[0].message);
			append_dev(div5, t18);
			if (if_block4) if_block4.m(div5, null);
			append_dev(form, t19);
			append_dev(form, button);
			append_dev(button, t20);

			if (!mounted) {
				dispose = [
					listen_dev(input0, "input", /*input0_input_handler*/ ctx[8]),
					listen_dev(input1, "input", /*input1_input_handler*/ ctx[9]),
					listen_dev(input2, "input", /*input2_input_handler*/ ctx[10]),
					listen_dev(input3, "input", /*input3_input_handler*/ ctx[11]),
					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[12]),
					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[7]), false, true, false, false)
				];

				mounted = true;
			}
		},
		p: function update(ctx, dirty) {
			if (/*errorMessage*/ ctx[3] && !/*formErrors*/ ctx[4].name && !/*formErrors*/ ctx[4].email && !/*formErrors*/ ctx[4].subject && !/*formErrors*/ ctx[4].message) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_7(ctx);
					if_block0.c();
					if_block0.m(t0.parentNode, t0);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty & /*$currentLang*/ 32 && t1_value !== (t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.name + "")) set_data_dev(t1, t1_value);

			if (dirty & /*$currentLang*/ 32 && input0_placeholder_value !== (input0_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg a nevét'
			: 'Enter your name')) {
				attr_dev(input0, "placeholder", input0_placeholder_value);
			}

			if (dirty & /*formErrors*/ 16 && input0_aria_invalid_value !== (input0_aria_invalid_value = /*formErrors*/ ctx[4].name ? 'true' : 'false')) {
				attr_dev(input0, "aria-invalid", input0_aria_invalid_value);
			}

			if (dirty & /*formData*/ 1 && input0.value !== /*formData*/ ctx[0].name) {
				set_input_value(input0, /*formData*/ ctx[0].name);
			}

			if (/*formErrors*/ ctx[4].name) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_6(ctx);
					if_block1.c();
					if_block1.m(div0, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*$currentLang*/ 32 && t5_value !== (t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.email + "")) set_data_dev(t5, t5_value);

			if (dirty & /*$currentLang*/ 32 && input1_placeholder_value !== (input1_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg email címét'
			: 'Enter your email address')) {
				attr_dev(input1, "placeholder", input1_placeholder_value);
			}

			if (dirty & /*formErrors*/ 16 && input1_aria_invalid_value !== (input1_aria_invalid_value = /*formErrors*/ ctx[4].email ? 'true' : 'false')) {
				attr_dev(input1, "aria-invalid", input1_aria_invalid_value);
			}

			if (dirty & /*formData*/ 1 && input1.value !== /*formData*/ ctx[0].email) {
				set_input_value(input1, /*formData*/ ctx[0].email);
			}

			if (/*formErrors*/ ctx[4].email) {
				if (if_block2) {
					if_block2.p(ctx, dirty);
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					if_block2.m(div1, null);
				}
			} else if (if_block2) {
				if_block2.d(1);
				if_block2 = null;
			}

			if (dirty & /*$currentLang*/ 32 && t9_value !== (t9_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.phone + "")) set_data_dev(t9, t9_value);

			if (dirty & /*$currentLang*/ 32 && input2_placeholder_value !== (input2_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg telefonszámát'
			: 'Enter your phone number')) {
				attr_dev(input2, "placeholder", input2_placeholder_value);
			}

			if (dirty & /*formData*/ 1) {
				set_input_value(input2, /*formData*/ ctx[0].phone);
			}

			if (dirty & /*$currentLang*/ 32 && t12_value !== (t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.subject + "")) set_data_dev(t12, t12_value);

			if (dirty & /*$currentLang*/ 32 && input3_placeholder_value !== (input3_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Adja meg a tárgyat'
			: 'Enter the subject')) {
				attr_dev(input3, "placeholder", input3_placeholder_value);
			}

			if (dirty & /*formErrors*/ 16 && input3_aria_invalid_value !== (input3_aria_invalid_value = /*formErrors*/ ctx[4].subject ? 'true' : 'false')) {
				attr_dev(input3, "aria-invalid", input3_aria_invalid_value);
			}

			if (dirty & /*formData*/ 1 && input3.value !== /*formData*/ ctx[0].subject) {
				set_input_value(input3, /*formData*/ ctx[0].subject);
			}

			if (/*formErrors*/ ctx[4].subject) {
				if (if_block3) {
					if_block3.p(ctx, dirty);
				} else {
					if_block3 = create_if_block_4(ctx);
					if_block3.c();
					if_block3.m(div4, null);
				}
			} else if (if_block3) {
				if_block3.d(1);
				if_block3 = null;
			}

			if (dirty & /*$currentLang*/ 32 && t16_value !== (t16_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.message + "")) set_data_dev(t16, t16_value);

			if (dirty & /*$currentLang*/ 32 && textarea_placeholder_value !== (textarea_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
			? 'Írja meg üzenetét'
			: 'Enter your message')) {
				attr_dev(textarea, "placeholder", textarea_placeholder_value);
			}

			if (dirty & /*formErrors*/ 16 && textarea_aria_invalid_value !== (textarea_aria_invalid_value = /*formErrors*/ ctx[4].message ? 'true' : 'false')) {
				attr_dev(textarea, "aria-invalid", textarea_aria_invalid_value);
			}

			if (dirty & /*formData*/ 1) {
				set_input_value(textarea, /*formData*/ ctx[0].message);
			}

			if (/*formErrors*/ ctx[4].message) {
				if (if_block4) {
					if_block4.p(ctx, dirty);
				} else {
					if_block4 = create_if_block_3(ctx);
					if_block4.c();
					if_block4.m(div5, null);
				}
			} else if (if_block4) {
				if_block4.d(1);
				if_block4 = null;
			}

			if (dirty & /*isSubmitting, $currentLang*/ 34 && t20_value !== (t20_value = (/*isSubmitting*/ ctx[1]
			? '...'
			: /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.button) + "")) set_data_dev(t20, t20_value);

			if (dirty & /*isSubmitting*/ 2) {
				prop_dev(button, "disabled", /*isSubmitting*/ ctx[1]);
			}
		},
		d: function destroy(detaching) {
			if (if_block0) if_block0.d(detaching);
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(form);
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			if (if_block3) if_block3.d();
			if (if_block4) if_block4.d();
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_else_block.name,
		type: "else",
		source: "(323:6) {:else}",
		ctx
	});

	return block;
}

// (313:6) {#if isSuccess}
function create_if_block_1(ctx) {
	let div;
	let svg;
	let path;
	let t0;
	let p;
	let t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.success + "";
	let t1;
	let t2;
	let if_block_anchor;
	let if_block = /*errorMessage*/ ctx[3] && create_if_block_2(ctx);

	const block = {
		c: function create() {
			div = element("div");
			svg = svg_element("svg");
			path = svg_element("path");
			t0 = space();
			p = element("p");
			t1 = text(t1_value);
			t2 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			attr_dev(path, "d", "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z");
			add_location(path, file, 315, 12, 11569);
			attr_dev(svg, "width", "64");
			attr_dev(svg, "height", "64");
			attr_dev(svg, "viewBox", "0 0 24 24");
			attr_dev(svg, "fill", "#0088cc");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "class", "svelte-104mhdt");
			add_location(svg, file, 314, 10, 11458);
			attr_dev(p, "class", "svelte-104mhdt");
			add_location(p, file, 317, 10, 11755);
			attr_dev(div, "class", "success-message svelte-104mhdt");
			add_location(div, file, 313, 8, 11418);
		},
		m: function mount(target, anchor) {
			insert_dev(target, div, anchor);
			append_dev(div, svg);
			append_dev(svg, path);
			append_dev(div, t0);
			append_dev(div, p);
			append_dev(p, t1);
			insert_dev(target, t2, anchor);
			if (if_block) if_block.m(target, anchor);
			insert_dev(target, if_block_anchor, anchor);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*$currentLang*/ 32 && t1_value !== (t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.success + "")) set_data_dev(t1, t1_value);

			if (/*errorMessage*/ ctx[3]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_2(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(div);
			if (detaching) detach_dev(t2);
			if (if_block) if_block.d(detaching);
			if (detaching) detach_dev(if_block_anchor);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_1.name,
		type: "if",
		source: "(313:6) {#if isSuccess}",
		ctx
	});

	return block;
}

// (324:8) {#if errorMessage && !formErrors.name && !formErrors.email && !formErrors.subject && !formErrors.message}
function create_if_block_7(ctx) {
	let p;
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(/*errorMessage*/ ctx[3]);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			set_style(p, "text-align", "center");
			set_style(p, "margin-bottom", "1.5rem");
			add_location(p, file, 324, 11, 12095);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_7.name,
		type: "if",
		source: "(324:8) {#if errorMessage && !formErrors.name && !formErrors.email && !formErrors.subject && !formErrors.message}",
		ctx
	});

	return block;
}

// (338:12) {#if formErrors.name}
function create_if_block_6(ctx) {
	let p;
	let t_1_value = /*formErrors*/ ctx[4].name + "";
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(t_1_value);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			add_location(p, file, 338, 14, 12738);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].name + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_6.name,
		type: "if",
		source: "(338:12) {#if formErrors.name}",
		ctx
	});

	return block;
}

// (354:15) {#if formErrors.email}
function create_if_block_5(ctx) {
	let p;
	let t_1_value = /*formErrors*/ ctx[4].email + "";
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(t_1_value);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			add_location(p, file, 354, 16, 13357);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].email + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_5.name,
		type: "if",
		source: "(354:15) {#if formErrors.email}",
		ctx
	});

	return block;
}

// (380:13) {#if formErrors.subject}
function create_if_block_4(ctx) {
	let p;
	let t_1_value = /*formErrors*/ ctx[4].subject + "";
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(t_1_value);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			add_location(p, file, 380, 14, 14319);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].subject + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_4.name,
		type: "if",
		source: "(380:13) {#if formErrors.subject}",
		ctx
	});

	return block;
}

// (395:13) {#if formErrors.message}
function create_if_block_3(ctx) {
	let p;
	let t_1_value = /*formErrors*/ ctx[4].message + "";
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(t_1_value);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			add_location(p, file, 395, 14, 14896);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].message + "")) set_data_dev(t_1, t_1_value);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_3.name,
		type: "if",
		source: "(395:13) {#if formErrors.message}",
		ctx
	});

	return block;
}

// (320:8) {#if errorMessage}
function create_if_block_2(ctx) {
	let p;
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(/*errorMessage*/ ctx[3]);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			set_style(p, "text-align", "center");
			set_style(p, "margin-top", "1rem");
			add_location(p, file, 320, 11, 11852);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block_2.name,
		type: "if",
		source: "(320:8) {#if errorMessage}",
		ctx
	});

	return block;
}

// (409:7) {#if errorMessage && !isSuccess && (formErrors.name || formErrors.email || formErrors.subject || formErrors.message)}
function create_if_block(ctx) {
	let p;
	let t_1;

	const block = {
		c: function create() {
			p = element("p");
			t_1 = text(/*errorMessage*/ ctx[3]);
			attr_dev(p, "class", "error-message svelte-104mhdt");
			set_style(p, "text-align", "center");
			set_style(p, "margin-top", "1.5rem");
			add_location(p, file, 409, 11, 15365);
		},
		m: function mount(target, anchor) {
			insert_dev(target, p, anchor);
			append_dev(p, t_1);
		},
		p: function update(ctx, dirty) {
			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(p);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_if_block.name,
		type: "if",
		source: "(409:7) {#if errorMessage && !isSuccess && (formErrors.name || formErrors.email || formErrors.subject || formErrors.message)}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section0;
	let div0;
	let h1;
	let t0_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].title + "";
	let t0;
	let t1;
	let p0;
	let t2_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].subtitle + "";
	let t2;
	let t3;
	let section1;
	let div16;
	let div15;
	let div13;
	let div3;
	let div1;
	let svg0;
	let path0;
	let t4;
	let div2;
	let h30;
	let t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.title + "";
	let t5;
	let t6;
	let p1;
	let t7_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.content + "";
	let t7;
	let t8;
	let div6;
	let div4;
	let svg1;
	let path1;
	let t9;
	let div5;
	let h31;
	let t10_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.title + "";
	let t10;
	let t11;
	let p2;
	let a0;
	let t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.content + "";
	let t12;
	let t13;
	let div9;
	let div7;
	let svg2;
	let path2;
	let t14;
	let div8;
	let h32;
	let t15_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.title + "";
	let t15;
	let t16;
	let p3;
	let a1;
	let t17_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.content + "";
	let t17;
	let t18;
	let div12;
	let div10;
	let svg3;
	let path3;
	let t19;
	let div11;
	let h33;
	let t20_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.title + "";
	let t20;
	let t21;
	let p4;
	let raw_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.content + "";
	let t22;
	let div14;
	let h2;
	let t23_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.title + "";
	let t23;
	let t24;
	let t25;
	let t26;
	let section2;
	let div17;
	let iframe;
	let iframe_src_value;
	let t27;
	let button;

	let t28_value = (/*$currentLang*/ ctx[5] === 'hu'
	? 'Útvonaltervezés'
	: 'Get Directions') + "";

	let t28;
	let t29;
	let svg4;
	let path4;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (/*isSuccess*/ ctx[2]) return create_if_block_1;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*errorMessage*/ ctx[3] && !/*isSuccess*/ ctx[2] && (/*formErrors*/ ctx[4].name || /*formErrors*/ ctx[4].email || /*formErrors*/ ctx[4].subject || /*formErrors*/ ctx[4].message) && create_if_block(ctx);

	const block = {
		c: function create() {
			section0 = element("section");
			div0 = element("div");
			h1 = element("h1");
			t0 = text(t0_value);
			t1 = space();
			p0 = element("p");
			t2 = text(t2_value);
			t3 = space();
			section1 = element("section");
			div16 = element("div");
			div15 = element("div");
			div13 = element("div");
			div3 = element("div");
			div1 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			t4 = space();
			div2 = element("div");
			h30 = element("h3");
			t5 = text(t5_value);
			t6 = space();
			p1 = element("p");
			t7 = text(t7_value);
			t8 = space();
			div6 = element("div");
			div4 = element("div");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			t9 = space();
			div5 = element("div");
			h31 = element("h3");
			t10 = text(t10_value);
			t11 = space();
			p2 = element("p");
			a0 = element("a");
			t12 = text(t12_value);
			t13 = space();
			div9 = element("div");
			div7 = element("div");
			svg2 = svg_element("svg");
			path2 = svg_element("path");
			t14 = space();
			div8 = element("div");
			h32 = element("h3");
			t15 = text(t15_value);
			t16 = space();
			p3 = element("p");
			a1 = element("a");
			t17 = text(t17_value);
			t18 = space();
			div12 = element("div");
			div10 = element("div");
			svg3 = svg_element("svg");
			path3 = svg_element("path");
			t19 = space();
			div11 = element("div");
			h33 = element("h3");
			t20 = text(t20_value);
			t21 = space();
			p4 = element("p");
			t22 = space();
			div14 = element("div");
			h2 = element("h2");
			t23 = text(t23_value);
			t24 = space();
			if_block0.c();
			t25 = space();
			if (if_block1) if_block1.c();
			t26 = space();
			section2 = element("section");
			div17 = element("div");
			iframe = element("iframe");
			t27 = space();
			button = element("button");
			t28 = text(t28_value);
			t29 = space();
			svg4 = svg_element("svg");
			path4 = svg_element("path");
			attr_dev(h1, "class", "svelte-104mhdt");
			add_location(h1, file, 251, 2, 8399);
			attr_dev(p0, "class", "svelte-104mhdt");
			add_location(p0, file, 252, 2, 8440);
			attr_dev(div0, "class", "container");
			add_location(div0, file, 250, 0, 8373);
			attr_dev(section0, "class", "contact-hero svelte-104mhdt");
			add_location(section0, file, 249, 0, 8342);
			attr_dev(path0, "d", "M12 2C8.13 2 5 5.13 5 9C5 14.25 12 22 12 22C12 22 19 14.25 19 9C19 5.13 15.87 2 12 2ZM12 11.5C10.62 11.5 9.5 10.38 9.5 9C9.5 7.62 10.62 6.5 12 6.5C13.38 6.5 14.5 7.62 14.5 9C14.5 10.38 13.38 11.5 12 11.5Z");
			attr_dev(path0, "fill", "currentColor");
			add_location(path0, file, 263, 12, 8792);
			attr_dev(svg0, "width", "24");
			attr_dev(svg0, "height", "24");
			attr_dev(svg0, "viewBox", "0 0 24 24");
			attr_dev(svg0, "fill", "none");
			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg0, file, 262, 10, 8684);
			attr_dev(div1, "class", "icon svelte-104mhdt");
			add_location(div1, file, 261, 8, 8655);
			attr_dev(h30, "class", "svelte-104mhdt");
			add_location(h30, file, 267, 10, 9106);
			attr_dev(p1, "class", "svelte-104mhdt");
			add_location(p1, file, 268, 10, 9163);
			attr_dev(div2, "class", "info-content svelte-104mhdt");
			add_location(div2, file, 266, 8, 9069);
			attr_dev(div3, "class", "info-card svelte-104mhdt");
			add_location(div3, file, 260, 6, 8623);
			attr_dev(path1, "d", "M6.62 10.79C8.06 13.62 10.38 15.94 13.21 17.38L15.41 15.18C15.69 14.9 16.08 14.82 16.43 14.93C17.55 15.3 18.75 15.5 20 15.5C20.55 15.5 21 15.95 21 16.5V20C21 20.55 20.55 21 20 21C10.61 21 3 13.39 3 4C3 3.45 3.45 3 4 3H7.5C8.05 3 8.5 3.45 8.5 4C8.5 5.25 8.7 6.45 9.07 7.57C9.18 7.92 9.1 8.31 8.82 8.59L6.62 10.79Z");
			attr_dev(path1, "fill", "currentColor");
			add_location(path1, file, 275, 12, 9414);
			attr_dev(svg1, "width", "24");
			attr_dev(svg1, "height", "24");
			attr_dev(svg1, "viewBox", "0 0 24 24");
			attr_dev(svg1, "fill", "none");
			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg1, file, 274, 10, 9306);
			attr_dev(div4, "class", "icon svelte-104mhdt");
			add_location(div4, file, 273, 8, 9277);
			attr_dev(h31, "class", "svelte-104mhdt");
			add_location(h31, file, 279, 10, 9836);
			attr_dev(a0, "href", "tel:+36705550588");
			attr_dev(a0, "class", "contact-link svelte-104mhdt");
			add_location(a0, file, 280, 13, 9894);
			attr_dev(p2, "class", "svelte-104mhdt");
			add_location(p2, file, 280, 10, 9891);
			attr_dev(div5, "class", "info-content svelte-104mhdt");
			add_location(div5, file, 278, 8, 9799);
			attr_dev(div6, "class", "info-card svelte-104mhdt");
			add_location(div6, file, 272, 6, 9245);
			attr_dev(path2, "d", "M20 4H4C2.9 4 2.01 4.9 2.01 6L2 18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 8L12 13L4 8V6L12 11L20 6V8Z");
			attr_dev(path2, "fill", "currentColor");
			add_location(path2, file, 287, 12, 10192);
			attr_dev(svg2, "width", "24");
			attr_dev(svg2, "height", "24");
			attr_dev(svg2, "viewBox", "0 0 24 24");
			attr_dev(svg2, "fill", "none");
			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg2, file, 286, 10, 10084);
			attr_dev(div7, "class", "icon svelte-104mhdt");
			add_location(div7, file, 285, 8, 10055);
			attr_dev(h32, "class", "svelte-104mhdt");
			add_location(h32, file, 291, 10, 10433);
			attr_dev(a1, "href", "mailto:info@zima-auto.com");
			attr_dev(a1, "class", "contact-link svelte-104mhdt");
			add_location(a1, file, 292, 13, 10491);
			attr_dev(p3, "class", "svelte-104mhdt");
			add_location(p3, file, 292, 10, 10488);
			attr_dev(div8, "class", "info-content svelte-104mhdt");
			add_location(div8, file, 290, 8, 10396);
			attr_dev(div9, "class", "info-card svelte-104mhdt");
			add_location(div9, file, 284, 6, 10023);
			attr_dev(path3, "d", "M11.99 2C6.47 2 2 6.48 2 12C2 17.52 6.47 22 11.99 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 11.99 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM12.5 7H11V13L16.25 16.15L17 14.92L12.5 12.25V7Z");
			attr_dev(path3, "fill", "currentColor");
			add_location(path3, file, 299, 12, 10798);
			attr_dev(svg3, "width", "24");
			attr_dev(svg3, "height", "24");
			attr_dev(svg3, "viewBox", "0 0 24 24");
			attr_dev(svg3, "fill", "none");
			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
			add_location(svg3, file, 298, 10, 10690);
			attr_dev(div10, "class", "icon svelte-104mhdt");
			add_location(div10, file, 297, 8, 10661);
			attr_dev(h33, "class", "svelte-104mhdt");
			add_location(h33, file, 303, 10, 11150);
			attr_dev(p4, "class", "svelte-104mhdt");
			add_location(p4, file, 304, 10, 11205);
			attr_dev(div11, "class", "info-content svelte-104mhdt");
			add_location(div11, file, 302, 8, 11113);
			attr_dev(div12, "class", "info-card svelte-104mhdt");
			add_location(div12, file, 296, 6, 10629);
			attr_dev(div13, "class", "contact-info svelte-104mhdt");
			add_location(div13, file, 259, 4, 8590);
			attr_dev(h2, "class", "svelte-104mhdt");
			add_location(h2, file, 310, 6, 11343);
			attr_dev(div14, "class", "contact-form-container svelte-104mhdt");
			add_location(div14, file, 309, 4, 11300);
			attr_dev(div15, "class", "contact-grid svelte-104mhdt");
			add_location(div15, file, 258, 2, 8559);
			attr_dev(div16, "class", "container");
			add_location(div16, file, 257, 0, 8533);
			attr_dev(section1, "class", "contact-section svelte-104mhdt");
			add_location(section1, file, 256, 0, 8499);
			if (!src_url_equal(iframe.src, iframe_src_value = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2700.102580768995!2d19.230113876877105!3d47.40994027117247!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x4741c1ece824d30f%3A0x632898beef8d5983!2sZima%20Auto%20Airport%20Parking%20-%20Aut%C3%B3szerv%C3%ADz%20-%20Gumiszerv%C3%ADz%20-%20K%C3%A9zi%20aut%C3%B3mos%C3%B3!5e0!3m2!1sen!2shu!4v1745609320883!5m2!1sen!2shu")) attr_dev(iframe, "src", iframe_src_value);
			attr_dev(iframe, "width", "100%");
			attr_dev(iframe, "height", "450");
			set_style(iframe, "border", "0");
			iframe.allowFullscreen = "";
			attr_dev(iframe, "loading", "lazy");
			attr_dev(iframe, "referrerpolicy", "no-referrer-when-downgrade");
			attr_dev(iframe, "title", "Zima Auto location");
			attr_dev(iframe, "class", "svelte-104mhdt");
			add_location(iframe, file, 417, 4, 15567);
			attr_dev(path4, "d", "M9 18l6-6-6-6");
			add_location(path4, file, 433, 8, 16521);
			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg4, "width", "16");
			attr_dev(svg4, "height", "16");
			attr_dev(svg4, "viewBox", "0 0 24 24");
			attr_dev(svg4, "fill", "none");
			attr_dev(svg4, "stroke", "currentColor");
			attr_dev(svg4, "stroke-width", "2");
			attr_dev(svg4, "stroke-linecap", "round");
			attr_dev(svg4, "stroke-linejoin", "round");
			add_location(svg4, file, 432, 6, 16331);
			attr_dev(button, "class", "directions-link svelte-104mhdt");
			add_location(button, file, 427, 4, 16170);
			attr_dev(div17, "class", "map-container svelte-104mhdt");
			add_location(div17, file, 416, 2, 15535);
			attr_dev(section2, "class", "map-section svelte-104mhdt");
			add_location(section2, file, 415, 0, 15503);
		},
		l: function claim(nodes) {
			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
		},
		m: function mount(target, anchor) {
			insert_dev(target, section0, anchor);
			append_dev(section0, div0);
			append_dev(div0, h1);
			append_dev(h1, t0);
			append_dev(div0, t1);
			append_dev(div0, p0);
			append_dev(p0, t2);
			insert_dev(target, t3, anchor);
			insert_dev(target, section1, anchor);
			append_dev(section1, div16);
			append_dev(div16, div15);
			append_dev(div15, div13);
			append_dev(div13, div3);
			append_dev(div3, div1);
			append_dev(div1, svg0);
			append_dev(svg0, path0);
			append_dev(div3, t4);
			append_dev(div3, div2);
			append_dev(div2, h30);
			append_dev(h30, t5);
			append_dev(div2, t6);
			append_dev(div2, p1);
			append_dev(p1, t7);
			append_dev(div13, t8);
			append_dev(div13, div6);
			append_dev(div6, div4);
			append_dev(div4, svg1);
			append_dev(svg1, path1);
			append_dev(div6, t9);
			append_dev(div6, div5);
			append_dev(div5, h31);
			append_dev(h31, t10);
			append_dev(div5, t11);
			append_dev(div5, p2);
			append_dev(p2, a0);
			append_dev(a0, t12);
			append_dev(div13, t13);
			append_dev(div13, div9);
			append_dev(div9, div7);
			append_dev(div7, svg2);
			append_dev(svg2, path2);
			append_dev(div9, t14);
			append_dev(div9, div8);
			append_dev(div8, h32);
			append_dev(h32, t15);
			append_dev(div8, t16);
			append_dev(div8, p3);
			append_dev(p3, a1);
			append_dev(a1, t17);
			append_dev(div13, t18);
			append_dev(div13, div12);
			append_dev(div12, div10);
			append_dev(div10, svg3);
			append_dev(svg3, path3);
			append_dev(div12, t19);
			append_dev(div12, div11);
			append_dev(div11, h33);
			append_dev(h33, t20);
			append_dev(div11, t21);
			append_dev(div11, p4);
			p4.innerHTML = raw_value;
			append_dev(div15, t22);
			append_dev(div15, div14);
			append_dev(div14, h2);
			append_dev(h2, t23);
			append_dev(div14, t24);
			if_block0.m(div14, null);
			append_dev(div14, t25);
			if (if_block1) if_block1.m(div14, null);
			insert_dev(target, t26, anchor);
			insert_dev(target, section2, anchor);
			append_dev(section2, div17);
			append_dev(div17, iframe);
			append_dev(div17, t27);
			append_dev(div17, button);
			append_dev(button, t28);
			append_dev(button, t29);
			append_dev(button, svg4);
			append_dev(svg4, path4);

			if (!mounted) {
				dispose = listen_dev(button, "click", openGoogleMapsDirections, false, false, false, false);
				mounted = true;
			}
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*$currentLang*/ 32 && t0_value !== (t0_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].title + "")) set_data_dev(t0, t0_value);
			if (dirty & /*$currentLang*/ 32 && t2_value !== (t2_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].subtitle + "")) set_data_dev(t2, t2_value);
			if (dirty & /*$currentLang*/ 32 && t5_value !== (t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.title + "")) set_data_dev(t5, t5_value);
			if (dirty & /*$currentLang*/ 32 && t7_value !== (t7_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.content + "")) set_data_dev(t7, t7_value);
			if (dirty & /*$currentLang*/ 32 && t10_value !== (t10_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.title + "")) set_data_dev(t10, t10_value);
			if (dirty & /*$currentLang*/ 32 && t12_value !== (t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.content + "")) set_data_dev(t12, t12_value);
			if (dirty & /*$currentLang*/ 32 && t15_value !== (t15_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.title + "")) set_data_dev(t15, t15_value);
			if (dirty & /*$currentLang*/ 32 && t17_value !== (t17_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.content + "")) set_data_dev(t17, t17_value);
			if (dirty & /*$currentLang*/ 32 && t20_value !== (t20_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.title + "")) set_data_dev(t20, t20_value);
			if (dirty & /*$currentLang*/ 32 && raw_value !== (raw_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.content + "")) p4.innerHTML = raw_value;			if (dirty & /*$currentLang*/ 32 && t23_value !== (t23_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.title + "")) set_data_dev(t23, t23_value);

			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div14, t25);
				}
			}

			if (/*errorMessage*/ ctx[3] && !/*isSuccess*/ ctx[2] && (/*formErrors*/ ctx[4].name || /*formErrors*/ ctx[4].email || /*formErrors*/ ctx[4].subject || /*formErrors*/ ctx[4].message)) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block(ctx);
					if_block1.c();
					if_block1.m(div14, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty & /*$currentLang*/ 32 && t28_value !== (t28_value = (/*$currentLang*/ ctx[5] === 'hu'
			? 'Útvonaltervezés'
			: 'Get Directions') + "")) set_data_dev(t28, t28_value);
		},
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(section0);
			if (detaching) detach_dev(t3);
			if (detaching) detach_dev(section1);
			if_block0.d();
			if (if_block1) if_block1.d();
			if (detaching) detach_dev(t26);
			if (detaching) detach_dev(section2);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function openGoogleMapsDirections() {
	// Using the specific URL that initiates directions to Zima Auto
	window.open('https://www.google.com/maps/place/Zima+Auto+Airport+Parking+-+Aut%C3%B3szerv%C3%ADz+-+Gumiszerv%C3%ADz+-+K%C3%A9zi+aut%C3%B3mos%C3%B3/@47.4099403,19.2301139,17z/data=!3m1!4b1!4m6!3m5!1s0x4741c1ece824d30f:0x632898beef8d5983!8m2!3d47.4099403!4d19.2326888!16s%2Fg%2F11vyx0730g?entry=ttu&g_ep=EgoyMDI1MDQyMy4wIKXMDSoASAFQAw%3D%3D', '_blank');
}

function instance($$self, $$props, $$invalidate) {
	let $currentLang;
	validate_store(currentLang, 'currentLang');
	component_subscribe($$self, currentLang, $$value => $$invalidate(5, $currentLang = $$value));
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots('Contact', slots, []);
	let lang;

	// showDirectionsPopup and related functions are removed
	// as we are now directly linking to Google Maps directions
	// Subscribe to language changes
	currentLang.subscribe(value => {
		lang = value;
	});

	// Form data
	let formData = {
		name: '',
		email: '',
		phone: '',
		subject: '',
		message: ''
	};

	// Contact content translations - UPDATED OPENING HOURS FORMAT BASED ON SCREENSHOT
	const content = {
		hu: {
			title: 'KAPCSOLAT',
			subtitle: 'Vegye fel velünk a kapcsolatot, és segítünk mindenben!',
			address: {
				title: 'CÍMÜNK',
				content: 'Vecsés Széchényi utca 62 mellett, Hrsz 0182/55, 2220'
			},
			phone: {
				title: 'TELEFON',
				content: '06 70 555 0588'
			},
			email: {
				title: 'EMAIL',
				content: 'info@zima-auto.com'
			},
			hours: {
				title: 'NYITVATARTÁS',
				// Updated content to match screenshot format
				content: '<strong>Parkoló:</strong><br>24/7<br><br><strong>Kézi Autómosó:</strong><br>H-Szo (08:00-18:00)<br><br><strong>Autó Szerviz:</strong><br>H-Szo (08:00-17:00)<br><br><strong>Gumiszerviz:</strong><br>H-Szo (08:00-17:00)'
			},
			form: {
				title: 'KÜLDJÖN ÜZENETET',
				name: 'Név',
				email: 'Email',
				phone: 'Telefonszám',
				subject: 'Tárgy',
				message: 'Üzenet',
				button: 'KÜLDÉS',
				success: 'Köszönjük üzenetét! Hamarosan válaszolunk.'
			}
		},
		en: {
			title: 'CONTACT',
			subtitle: 'Get in touch with us and we\'ll help with anything you need!',
			address: {
				title: 'ADDRESS',
				content: 'Next to Vecsés Széchényi Street 62, Plot 0182/55, 2220'
			},
			phone: {
				title: 'PHONE',
				content: '06 70 555 0588'
			},
			email: {
				title: 'EMAIL',
				content: 'info@zima-auto.com'
			},
			hours: {
				title: 'BUSINESS HOURS',
				// Updated content to match screenshot format (translated)
				content: '<strong>Parking:</strong><br>24/7<br><br><strong>Car Wash:</strong><br>Mon-Sat (08:00-18:00)<br><br><strong>Auto Service:</strong><br>Mon-Sat (08:00-17:00)<br><br><strong>Tire Service:</strong><br>Mon-Sat (08:00-17:00)'
			},
			form: {
				title: 'SEND A MESSAGE',
				name: 'Name',
				email: 'Email',
				phone: 'Phone',
				subject: 'Subject',
				message: 'Message',
				button: 'SEND',
				success: 'Thank you for your message! We\'ll get back to you soon.'
			}
		}
	};

	// Form submission handling
	let isSubmitting = false;

	let isSuccess = false;
	let errorMessage = '';
	let formErrors = {}; // Added formErrors object for client-side validation

	// Function to validate form before submission
	function validateForm() {
		let isValid = true;
		$$invalidate(4, formErrors = {}); // Reset errors

		if (!formData.name.trim()) {
			$$invalidate(
				4,
				formErrors.name = $currentLang === 'hu'
				? 'Kérjük adja meg a nevét'
				: 'Please enter your name',
				formErrors
			);

			isValid = false;
		}

		if (!formData.email.trim()) {
			$$invalidate(
				4,
				formErrors.email = $currentLang === 'hu'
				? 'Kérjük adja meg email címét'
				: 'Please enter your email address',
				formErrors
			);

			isValid = false;
		} else if (!(/^[^\s@]+@[^\s@]+\.[^\s@]+$/).test(formData.email)) {
			$$invalidate(
				4,
				formErrors.email = $currentLang === 'hu'
				? 'Érvénytelen email cím'
				: 'Invalid email address',
				formErrors
			);

			isValid = false;
		}

		if (!formData.subject.trim()) {
			$$invalidate(
				4,
				formErrors.subject = $currentLang === 'hu'
				? 'Kérjük adja meg a tárgyat'
				: 'Please enter a subject',
				formErrors
			);

			isValid = false;
		}

		if (!formData.message.trim()) {
			$$invalidate(
				4,
				formErrors.message = $currentLang === 'hu'
				? 'Kérjük írja meg üzenetét'
				: 'Please enter your message',
				formErrors
			);

			isValid = false;
		}

		return isValid;
	}

	async function handleSubmit() {
		if (!validateForm()) {
			$$invalidate(3, errorMessage = $currentLang === 'hu'
			? 'Kérjük javítsa a hibákat az űrlapon.'
			: 'Please correct the errors in the form.');

			$$invalidate(2, isSuccess = false); // Ensure success message is hidden
			return;
		}

		$$invalidate(1, isSubmitting = true);
		$$invalidate(3, errorMessage = ''); // Clear previous errors

		try {
			const contactData = {
				service: 'contactForm',
				customerName: formData.name,
				customerEmail: formData.email,
				customerPhone: formData.phone || '',
				subject: formData.subject || 'Contact Form Inquiry',
				message: formData.message,
				adminEmail: 'jarsunkaev@gmail.com', // Ensure this is the correct recipient
				
			};

			console.log('Sending contact form data to backend:', contactData);

			const response = await fetch('https://zima-auto-backend.fly.dev/api/send-contact-email', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(contactData)
			});

			const result = await response.json();

			if (response.ok) {
				console.log('Contact form submitted successfully:', result);
				$$invalidate(2, isSuccess = true);
				$$invalidate(3, errorMessage = ''); // Clear any previous error

				// Reset form after successful submission
				$$invalidate(0, formData = {
					name: '',
					email: '',
					phone: '',
					subject: '',
					message: ''
				});

				$$invalidate(4, formErrors = {}); // Also clear form errors on success

				// Hide success message after a few seconds
				setTimeout(
					() => {
						$$invalidate(2, isSuccess = false);
					},
					5000
				);
			} else {
				console.error('Backend reported failure:', response.status, result.message);

				$$invalidate(3, errorMessage = result.message || ($currentLang === 'hu'
				? 'Hiba történt az üzenet küldése során. Kérjük, próbálja újra később.'
				: 'An error occurred while sending your message. Please try again later.'));

				$$invalidate(2, isSuccess = false);
			}
		} catch(error) {
			console.error('Error submitting contact form:', error);

			$$invalidate(3, errorMessage = $currentLang === 'hu'
			? 'Hiba történt a szerverhez való kapcsolódás során. Kérjük, próbálja újra később.'
			: 'An error occurred while connecting to the server. Please try again later.');

			$$invalidate(2, isSuccess = false);
		} finally {
			$$invalidate(1, isSubmitting = false);
		}
	}

	onMount(() => {
		// Animate info cards - removed opacity
		gsapWithCSS.from('.contact-info .info-card', {
			y: 30,
			duration: 0.6,
			stagger: 0.15,
			delay: 0.2,
			ease: 'power2.out'
		});

		// Animate form container - removed opacity
		gsapWithCSS.from('.contact-form-container', {
			x: 50,
			duration: 0.8,
			delay: 0.4,
			ease: 'power2.out'
		});

		// Basic animation for the map section
		gsapWithCSS.from('.map-section', {
			y: 50,
			duration: 0.8,
			delay: 0.6, // Animate after info and form
			ease: 'power2.out'
		}); // Consider ScrollTrigger if the map is below the initial viewport
		// You need ScrollTrigger imported and registered for this to work
		// scrollTrigger: {
	}); //     trigger: '.map-section',
	//     start: 'top 80%',
	//     // markers: true
	// }

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<Contact> was created with unknown prop '${key}'`);
	});

	function input0_input_handler() {
		formData.name = this.value;
		$$invalidate(0, formData);
	}

	function input1_input_handler() {
		formData.email = this.value;
		$$invalidate(0, formData);
	}

	function input2_input_handler() {
		formData.phone = this.value;
		$$invalidate(0, formData);
	}

	function input3_input_handler() {
		formData.subject = this.value;
		$$invalidate(0, formData);
	}

	function textarea_input_handler() {
		formData.message = this.value;
		$$invalidate(0, formData);
	}

	$$self.$capture_state = () => ({
		onMount,
		currentLang,
		t,
		gsap: gsapWithCSS,
		lang,
		formData,
		content,
		isSubmitting,
		isSuccess,
		errorMessage,
		formErrors,
		validateForm,
		handleSubmit,
		openGoogleMapsDirections,
		$currentLang
	});

	$$self.$inject_state = $$props => {
		if ('lang' in $$props) lang = $$props.lang;
		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
		if ('isSubmitting' in $$props) $$invalidate(1, isSubmitting = $$props.isSubmitting);
		if ('isSuccess' in $$props) $$invalidate(2, isSuccess = $$props.isSuccess);
		if ('errorMessage' in $$props) $$invalidate(3, errorMessage = $$props.errorMessage);
		if ('formErrors' in $$props) $$invalidate(4, formErrors = $$props.formErrors);
	};

	if ($$props && "$$inject" in $$props) {
		$$self.$inject_state($$props.$$inject);
	}

	return [
		formData,
		isSubmitting,
		isSuccess,
		errorMessage,
		formErrors,
		$currentLang,
		content,
		handleSubmit,
		input0_input_handler,
		input1_input_handler,
		input2_input_handler,
		input3_input_handler,
		textarea_input_handler
	];
}

class Contact extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Contact",
			options,
			id: create_fragment.name
		});
	}
}

export { Contact as default };
//# sourceMappingURL=Contact-895a6315.js.map
