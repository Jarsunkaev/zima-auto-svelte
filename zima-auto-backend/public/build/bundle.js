
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function () {
    'use strict';

    function noop() { }
    const identity = x => x;
    function add_location(element, file, line, column, char) {
        element.__svelte_meta = {
            loc: { file, line, column, char }
        };
    }
    function run(fn) {
        return fn();
    }
    function blank_object() {
        return Object.create(null);
    }
    function run_all(fns) {
        fns.forEach(run);
    }
    function is_function(thing) {
        return typeof thing === 'function';
    }
    function safe_not_equal(a, b) {
        return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
    }
    let src_url_equal_anchor;
    function src_url_equal(element_src, url) {
        if (!src_url_equal_anchor) {
            src_url_equal_anchor = document.createElement('a');
        }
        src_url_equal_anchor.href = url;
        return element_src === src_url_equal_anchor.href;
    }
    function is_empty(obj) {
        return Object.keys(obj).length === 0;
    }
    function validate_store(store, name) {
        if (store != null && typeof store.subscribe !== 'function') {
            throw new Error(`'${name}' is not a store with a 'subscribe' method`);
        }
    }
    function subscribe(store, ...callbacks) {
        if (store == null) {
            return noop;
        }
        const unsub = store.subscribe(...callbacks);
        return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
    }
    function component_subscribe(component, store, callback) {
        component.$$.on_destroy.push(subscribe(store, callback));
    }

    const is_client = typeof window !== 'undefined';
    let now = is_client
        ? () => window.performance.now()
        : () => Date.now();
    let raf = is_client ? cb => requestAnimationFrame(cb) : noop;

    const tasks = new Set();
    function run_tasks(now) {
        tasks.forEach(task => {
            if (!task.c(now)) {
                tasks.delete(task);
                task.f();
            }
        });
        if (tasks.size !== 0)
            raf(run_tasks);
    }
    /**
     * Creates a new task that runs on each raf frame
     * until it returns a falsy value or is aborted
     */
    function loop(callback) {
        let task;
        if (tasks.size === 0)
            raf(run_tasks);
        return {
            promise: new Promise(fulfill => {
                tasks.add(task = { c: callback, f: fulfill });
            }),
            abort() {
                tasks.delete(task);
            }
        };
    }

    const globals = (typeof window !== 'undefined'
        ? window
        : typeof globalThis !== 'undefined'
            ? globalThis
            : global);
    function append(target, node) {
        target.appendChild(node);
    }
    function get_root_for_style(node) {
        if (!node)
            return document;
        const root = node.getRootNode ? node.getRootNode() : node.ownerDocument;
        if (root && root.host) {
            return root;
        }
        return node.ownerDocument;
    }
    function append_empty_stylesheet(node) {
        const style_element = element('style');
        append_stylesheet(get_root_for_style(node), style_element);
        return style_element.sheet;
    }
    function append_stylesheet(node, style) {
        append(node.head || node, style);
        return style.sheet;
    }
    function insert(target, node, anchor) {
        target.insertBefore(node, anchor || null);
    }
    function detach(node) {
        if (node.parentNode) {
            node.parentNode.removeChild(node);
        }
    }
    function destroy_each(iterations, detaching) {
        for (let i = 0; i < iterations.length; i += 1) {
            if (iterations[i])
                iterations[i].d(detaching);
        }
    }
    function element(name) {
        return document.createElement(name);
    }
    function svg_element(name) {
        return document.createElementNS('http://www.w3.org/2000/svg', name);
    }
    function text(data) {
        return document.createTextNode(data);
    }
    function space() {
        return text(' ');
    }
    function empty() {
        return text('');
    }
    function listen(node, event, handler, options) {
        node.addEventListener(event, handler, options);
        return () => node.removeEventListener(event, handler, options);
    }
    function prevent_default(fn) {
        return function (event) {
            event.preventDefault();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function stop_propagation(fn) {
        return function (event) {
            event.stopPropagation();
            // @ts-ignore
            return fn.call(this, event);
        };
    }
    function attr(node, attribute, value) {
        if (value == null)
            node.removeAttribute(attribute);
        else if (node.getAttribute(attribute) !== value)
            node.setAttribute(attribute, value);
    }
    function init_binding_group(group) {
        let _inputs;
        return {
            /* push */ p(...inputs) {
                _inputs = inputs;
                _inputs.forEach(input => group.push(input));
            },
            /* remove */ r() {
                _inputs.forEach(input => group.splice(group.indexOf(input), 1));
            }
        };
    }
    function to_number(value) {
        return value === '' ? null : +value;
    }
    function children(element) {
        return Array.from(element.childNodes);
    }
    function set_input_value(input, value) {
        input.value = value == null ? '' : value;
    }
    function set_style(node, key, value, important) {
        if (value == null) {
            node.style.removeProperty(key);
        }
        else {
            node.style.setProperty(key, value, important ? 'important' : '');
        }
    }
    function select_option(select, value, mounting) {
        for (let i = 0; i < select.options.length; i += 1) {
            const option = select.options[i];
            if (option.__value === value) {
                option.selected = true;
                return;
            }
        }
        if (!mounting || value !== undefined) {
            select.selectedIndex = -1; // no option should be selected
        }
    }
    function select_value(select) {
        const selected_option = select.querySelector(':checked');
        return selected_option && selected_option.__value;
    }
    function toggle_class(element, name, toggle) {
        element.classList[toggle ? 'add' : 'remove'](name);
    }
    function custom_event(type, detail, { bubbles = false, cancelable = false } = {}) {
        const e = document.createEvent('CustomEvent');
        e.initCustomEvent(type, bubbles, cancelable, detail);
        return e;
    }
    class HtmlTag {
        constructor(is_svg = false) {
            this.is_svg = false;
            this.is_svg = is_svg;
            this.e = this.n = null;
        }
        c(html) {
            this.h(html);
        }
        m(html, target, anchor = null) {
            if (!this.e) {
                if (this.is_svg)
                    this.e = svg_element(target.nodeName);
                /** #7364  target for <template> may be provided as #document-fragment(11) */
                else
                    this.e = element((target.nodeType === 11 ? 'TEMPLATE' : target.nodeName));
                this.t = target.tagName !== 'TEMPLATE' ? target : target.content;
                this.c(html);
            }
            this.i(anchor);
        }
        h(html) {
            this.e.innerHTML = html;
            this.n = Array.from(this.e.nodeName === 'TEMPLATE' ? this.e.content.childNodes : this.e.childNodes);
        }
        i(anchor) {
            for (let i = 0; i < this.n.length; i += 1) {
                insert(this.t, this.n[i], anchor);
            }
        }
        p(html) {
            this.d();
            this.h(html);
            this.i(this.a);
        }
        d() {
            this.n.forEach(detach);
        }
    }

    // we need to store the information for multiple documents because a Svelte application could also contain iframes
    // https://github.com/sveltejs/svelte/issues/3624
    const managed_styles = new Map();
    let active = 0;
    // https://github.com/darkskyapp/string-hash/blob/master/index.js
    function hash(str) {
        let hash = 5381;
        let i = str.length;
        while (i--)
            hash = ((hash << 5) - hash) ^ str.charCodeAt(i);
        return hash >>> 0;
    }
    function create_style_information(doc, node) {
        const info = { stylesheet: append_empty_stylesheet(node), rules: {} };
        managed_styles.set(doc, info);
        return info;
    }
    function create_rule(node, a, b, duration, delay, ease, fn, uid = 0) {
        const step = 16.666 / duration;
        let keyframes = '{\n';
        for (let p = 0; p <= 1; p += step) {
            const t = a + (b - a) * ease(p);
            keyframes += p * 100 + `%{${fn(t, 1 - t)}}\n`;
        }
        const rule = keyframes + `100% {${fn(b, 1 - b)}}\n}`;
        const name = `__svelte_${hash(rule)}_${uid}`;
        const doc = get_root_for_style(node);
        const { stylesheet, rules } = managed_styles.get(doc) || create_style_information(doc, node);
        if (!rules[name]) {
            rules[name] = true;
            stylesheet.insertRule(`@keyframes ${name} ${rule}`, stylesheet.cssRules.length);
        }
        const animation = node.style.animation || '';
        node.style.animation = `${animation ? `${animation}, ` : ''}${name} ${duration}ms linear ${delay}ms 1 both`;
        active += 1;
        return name;
    }
    function delete_rule(node, name) {
        const previous = (node.style.animation || '').split(', ');
        const next = previous.filter(name
            ? anim => anim.indexOf(name) < 0 // remove specific animation
            : anim => anim.indexOf('__svelte') === -1 // remove all Svelte animations
        );
        const deleted = previous.length - next.length;
        if (deleted) {
            node.style.animation = next.join(', ');
            active -= deleted;
            if (!active)
                clear_rules();
        }
    }
    function clear_rules() {
        raf(() => {
            if (active)
                return;
            managed_styles.forEach(info => {
                const { ownerNode } = info.stylesheet;
                // there is no ownerNode if it runs on jsdom.
                if (ownerNode)
                    detach(ownerNode);
            });
            managed_styles.clear();
        });
    }

    let current_component;
    function set_current_component(component) {
        current_component = component;
    }
    function get_current_component() {
        if (!current_component)
            throw new Error('Function called outside component initialization');
        return current_component;
    }
    /**
     * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
     * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
     * it can be called from an external module).
     *
     * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
     *
     * https://svelte.dev/docs#run-time-svelte-onmount
     */
    function onMount(fn) {
        get_current_component().$$.on_mount.push(fn);
    }
    /**
     * Schedules a callback to run immediately after the component has been updated.
     *
     * The first time the callback runs will be after the initial `onMount`
     */
    function afterUpdate(fn) {
        get_current_component().$$.after_update.push(fn);
    }
    /**
     * Schedules a callback to run immediately before the component is unmounted.
     *
     * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
     * only one that runs inside a server-side component.
     *
     * https://svelte.dev/docs#run-time-svelte-ondestroy
     */
    function onDestroy(fn) {
        get_current_component().$$.on_destroy.push(fn);
    }
    /**
     * Creates an event dispatcher that can be used to dispatch [component events](/docs#template-syntax-component-directives-on-eventname).
     * Event dispatchers are functions that can take two arguments: `name` and `detail`.
     *
     * Component events created with `createEventDispatcher` create a
     * [CustomEvent](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent).
     * These events do not [bubble](https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events#Event_bubbling_and_capture).
     * The `detail` argument corresponds to the [CustomEvent.detail](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/detail)
     * property and can contain any type of data.
     *
     * https://svelte.dev/docs#run-time-svelte-createeventdispatcher
     */
    function createEventDispatcher() {
        const component = get_current_component();
        return (type, detail, { cancelable = false } = {}) => {
            const callbacks = component.$$.callbacks[type];
            if (callbacks) {
                // TODO are there situations where events could be dispatched
                // in a server (non-DOM) environment?
                const event = custom_event(type, detail, { cancelable });
                callbacks.slice().forEach(fn => {
                    fn.call(component, event);
                });
                return !event.defaultPrevented;
            }
            return true;
        };
    }
    // TODO figure out if we still want to support
    // shorthand events, or if we want to implement
    // a real bubbling mechanism
    function bubble(component, event) {
        const callbacks = component.$$.callbacks[event.type];
        if (callbacks) {
            // @ts-ignore
            callbacks.slice().forEach(fn => fn.call(this, event));
        }
    }

    const dirty_components = [];
    const binding_callbacks = [];
    let render_callbacks = [];
    const flush_callbacks = [];
    const resolved_promise = /* @__PURE__ */ Promise.resolve();
    let update_scheduled = false;
    function schedule_update() {
        if (!update_scheduled) {
            update_scheduled = true;
            resolved_promise.then(flush);
        }
    }
    function add_render_callback(fn) {
        render_callbacks.push(fn);
    }
    function add_flush_callback(fn) {
        flush_callbacks.push(fn);
    }
    // flush() calls callbacks in this order:
    // 1. All beforeUpdate callbacks, in order: parents before children
    // 2. All bind:this callbacks, in reverse order: children before parents.
    // 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
    //    for afterUpdates called during the initial onMount, which are called in
    //    reverse order: children before parents.
    // Since callbacks might update component values, which could trigger another
    // call to flush(), the following steps guard against this:
    // 1. During beforeUpdate, any updated components will be added to the
    //    dirty_components array and will cause a reentrant call to flush(). Because
    //    the flush index is kept outside the function, the reentrant call will pick
    //    up where the earlier call left off and go through all dirty components. The
    //    current_component value is saved and restored so that the reentrant call will
    //    not interfere with the "parent" flush() call.
    // 2. bind:this callbacks cannot trigger new flush() calls.
    // 3. During afterUpdate, any updated components will NOT have their afterUpdate
    //    callback called a second time; the seen_callbacks set, outside the flush()
    //    function, guarantees this behavior.
    const seen_callbacks = new Set();
    let flushidx = 0; // Do *not* move this inside the flush() function
    function flush() {
        // Do not reenter flush while dirty components are updated, as this can
        // result in an infinite loop. Instead, let the inner flush handle it.
        // Reentrancy is ok afterwards for bindings etc.
        if (flushidx !== 0) {
            return;
        }
        const saved_component = current_component;
        do {
            // first, call beforeUpdate functions
            // and update components
            try {
                while (flushidx < dirty_components.length) {
                    const component = dirty_components[flushidx];
                    flushidx++;
                    set_current_component(component);
                    update(component.$$);
                }
            }
            catch (e) {
                // reset dirty state to not end up in a deadlocked state and then rethrow
                dirty_components.length = 0;
                flushidx = 0;
                throw e;
            }
            set_current_component(null);
            dirty_components.length = 0;
            flushidx = 0;
            while (binding_callbacks.length)
                binding_callbacks.pop()();
            // then, once components are updated, call
            // afterUpdate functions. This may cause
            // subsequent updates...
            for (let i = 0; i < render_callbacks.length; i += 1) {
                const callback = render_callbacks[i];
                if (!seen_callbacks.has(callback)) {
                    // ...so guard against infinite loops
                    seen_callbacks.add(callback);
                    callback();
                }
            }
            render_callbacks.length = 0;
        } while (dirty_components.length);
        while (flush_callbacks.length) {
            flush_callbacks.pop()();
        }
        update_scheduled = false;
        seen_callbacks.clear();
        set_current_component(saved_component);
    }
    function update($$) {
        if ($$.fragment !== null) {
            $$.update();
            run_all($$.before_update);
            const dirty = $$.dirty;
            $$.dirty = [-1];
            $$.fragment && $$.fragment.p($$.ctx, dirty);
            $$.after_update.forEach(add_render_callback);
        }
    }
    /**
     * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
     */
    function flush_render_callbacks(fns) {
        const filtered = [];
        const targets = [];
        render_callbacks.forEach((c) => fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c));
        targets.forEach((c) => c());
        render_callbacks = filtered;
    }

    let promise;
    function wait() {
        if (!promise) {
            promise = Promise.resolve();
            promise.then(() => {
                promise = null;
            });
        }
        return promise;
    }
    function dispatch(node, direction, kind) {
        node.dispatchEvent(custom_event(`${direction ? 'intro' : 'outro'}${kind}`));
    }
    const outroing = new Set();
    let outros;
    function group_outros() {
        outros = {
            r: 0,
            c: [],
            p: outros // parent group
        };
    }
    function check_outros() {
        if (!outros.r) {
            run_all(outros.c);
        }
        outros = outros.p;
    }
    function transition_in(block, local) {
        if (block && block.i) {
            outroing.delete(block);
            block.i(local);
        }
    }
    function transition_out(block, local, detach, callback) {
        if (block && block.o) {
            if (outroing.has(block))
                return;
            outroing.add(block);
            outros.c.push(() => {
                outroing.delete(block);
                if (callback) {
                    if (detach)
                        block.d(1);
                    callback();
                }
            });
            block.o(local);
        }
        else if (callback) {
            callback();
        }
    }
    const null_transition = { duration: 0 };
    function create_in_transition(node, fn, params) {
        const options = { direction: 'in' };
        let config = fn(node, params, options);
        let running = false;
        let animation_name;
        let task;
        let uid = 0;
        function cleanup() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function go() {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            if (css)
                animation_name = create_rule(node, 0, 1, duration, delay, easing, css, uid++);
            tick(0, 1);
            const start_time = now() + delay;
            const end_time = start_time + duration;
            if (task)
                task.abort();
            running = true;
            add_render_callback(() => dispatch(node, true, 'start'));
            task = loop(now => {
                if (running) {
                    if (now >= end_time) {
                        tick(1, 0);
                        dispatch(node, true, 'end');
                        cleanup();
                        return running = false;
                    }
                    if (now >= start_time) {
                        const t = easing((now - start_time) / duration);
                        tick(t, 1 - t);
                    }
                }
                return running;
            });
        }
        let started = false;
        return {
            start() {
                if (started)
                    return;
                started = true;
                delete_rule(node);
                if (is_function(config)) {
                    config = config(options);
                    wait().then(go);
                }
                else {
                    go();
                }
            },
            invalidate() {
                started = false;
            },
            end() {
                if (running) {
                    cleanup();
                    running = false;
                }
            }
        };
    }
    function create_bidirectional_transition(node, fn, params, intro) {
        const options = { direction: 'both' };
        let config = fn(node, params, options);
        let t = intro ? 0 : 1;
        let running_program = null;
        let pending_program = null;
        let animation_name = null;
        function clear_animation() {
            if (animation_name)
                delete_rule(node, animation_name);
        }
        function init(program, duration) {
            const d = (program.b - t);
            duration *= Math.abs(d);
            return {
                a: t,
                b: program.b,
                d,
                duration,
                start: program.start,
                end: program.start + duration,
                group: program.group
            };
        }
        function go(b) {
            const { delay = 0, duration = 300, easing = identity, tick = noop, css } = config || null_transition;
            const program = {
                start: now() + delay,
                b
            };
            if (!b) {
                // @ts-ignore todo: improve typings
                program.group = outros;
                outros.r += 1;
            }
            if (running_program || pending_program) {
                pending_program = program;
            }
            else {
                // if this is an intro, and there's a delay, we need to do
                // an initial tick and/or apply CSS animation immediately
                if (css) {
                    clear_animation();
                    animation_name = create_rule(node, t, b, duration, delay, easing, css);
                }
                if (b)
                    tick(0, 1);
                running_program = init(program, duration);
                add_render_callback(() => dispatch(node, b, 'start'));
                loop(now => {
                    if (pending_program && now > pending_program.start) {
                        running_program = init(pending_program, duration);
                        pending_program = null;
                        dispatch(node, running_program.b, 'start');
                        if (css) {
                            clear_animation();
                            animation_name = create_rule(node, t, running_program.b, running_program.duration, 0, easing, config.css);
                        }
                    }
                    if (running_program) {
                        if (now >= running_program.end) {
                            tick(t = running_program.b, 1 - t);
                            dispatch(node, running_program.b, 'end');
                            if (!pending_program) {
                                // we're done
                                if (running_program.b) {
                                    // intro — we can tidy up immediately
                                    clear_animation();
                                }
                                else {
                                    // outro — needs to be coordinated
                                    if (!--running_program.group.r)
                                        run_all(running_program.group.c);
                                }
                            }
                            running_program = null;
                        }
                        else if (now >= running_program.start) {
                            const p = now - running_program.start;
                            t = running_program.a + running_program.d * easing(p / running_program.duration);
                            tick(t, 1 - t);
                        }
                    }
                    return !!(running_program || pending_program);
                });
            }
        }
        return {
            run(b) {
                if (is_function(config)) {
                    wait().then(() => {
                        // @ts-ignore
                        config = config(options);
                        go(b);
                    });
                }
                else {
                    go(b);
                }
            },
            end() {
                clear_animation();
                running_program = pending_program = null;
            }
        };
    }

    function destroy_block(block, lookup) {
        block.d(1);
        lookup.delete(block.key);
    }
    function update_keyed_each(old_blocks, dirty, get_key, dynamic, ctx, list, lookup, node, destroy, create_each_block, next, get_context) {
        let o = old_blocks.length;
        let n = list.length;
        let i = o;
        const old_indexes = {};
        while (i--)
            old_indexes[old_blocks[i].key] = i;
        const new_blocks = [];
        const new_lookup = new Map();
        const deltas = new Map();
        const updates = [];
        i = n;
        while (i--) {
            const child_ctx = get_context(ctx, list, i);
            const key = get_key(child_ctx);
            let block = lookup.get(key);
            if (!block) {
                block = create_each_block(key, child_ctx);
                block.c();
            }
            else if (dynamic) {
                // defer updates until all the DOM shuffling is done
                updates.push(() => block.p(child_ctx, dirty));
            }
            new_lookup.set(key, new_blocks[i] = block);
            if (key in old_indexes)
                deltas.set(key, Math.abs(i - old_indexes[key]));
        }
        const will_move = new Set();
        const did_move = new Set();
        function insert(block) {
            transition_in(block, 1);
            block.m(node, next);
            lookup.set(block.key, block);
            next = block.first;
            n--;
        }
        while (o && n) {
            const new_block = new_blocks[n - 1];
            const old_block = old_blocks[o - 1];
            const new_key = new_block.key;
            const old_key = old_block.key;
            if (new_block === old_block) {
                // do nothing
                next = new_block.first;
                o--;
                n--;
            }
            else if (!new_lookup.has(old_key)) {
                // remove old block
                destroy(old_block, lookup);
                o--;
            }
            else if (!lookup.has(new_key) || will_move.has(new_key)) {
                insert(new_block);
            }
            else if (did_move.has(old_key)) {
                o--;
            }
            else if (deltas.get(new_key) > deltas.get(old_key)) {
                did_move.add(new_key);
                insert(new_block);
            }
            else {
                will_move.add(old_key);
                o--;
            }
        }
        while (o--) {
            const old_block = old_blocks[o];
            if (!new_lookup.has(old_block.key))
                destroy(old_block, lookup);
        }
        while (n)
            insert(new_blocks[n - 1]);
        run_all(updates);
        return new_blocks;
    }
    function validate_each_keys(ctx, list, get_context, get_key) {
        const keys = new Set();
        for (let i = 0; i < list.length; i++) {
            const key = get_key(get_context(ctx, list, i));
            if (keys.has(key)) {
                throw new Error('Cannot have duplicate keys in a keyed each');
            }
            keys.add(key);
        }
    }

    function bind(component, name, callback) {
        const index = component.$$.props[name];
        if (index !== undefined) {
            component.$$.bound[index] = callback;
            callback(component.$$.ctx[index]);
        }
    }
    function create_component(block) {
        block && block.c();
    }
    function mount_component(component, target, anchor, customElement) {
        const { fragment, after_update } = component.$$;
        fragment && fragment.m(target, anchor);
        if (!customElement) {
            // onMount happens before the initial afterUpdate
            add_render_callback(() => {
                const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
                // if the component was destroyed immediately
                // it will update the `$$.on_destroy` reference to `null`.
                // the destructured on_destroy may still reference to the old array
                if (component.$$.on_destroy) {
                    component.$$.on_destroy.push(...new_on_destroy);
                }
                else {
                    // Edge case - component was destroyed immediately,
                    // most likely as a result of a binding initialising
                    run_all(new_on_destroy);
                }
                component.$$.on_mount = [];
            });
        }
        after_update.forEach(add_render_callback);
    }
    function destroy_component(component, detaching) {
        const $$ = component.$$;
        if ($$.fragment !== null) {
            flush_render_callbacks($$.after_update);
            run_all($$.on_destroy);
            $$.fragment && $$.fragment.d(detaching);
            // TODO null out other refs, including component.$$ (but need to
            // preserve final state?)
            $$.on_destroy = $$.fragment = null;
            $$.ctx = [];
        }
    }
    function make_dirty(component, i) {
        if (component.$$.dirty[0] === -1) {
            dirty_components.push(component);
            schedule_update();
            component.$$.dirty.fill(0);
        }
        component.$$.dirty[(i / 31) | 0] |= (1 << (i % 31));
    }
    function init(component, options, instance, create_fragment, not_equal, props, append_styles, dirty = [-1]) {
        const parent_component = current_component;
        set_current_component(component);
        const $$ = component.$$ = {
            fragment: null,
            ctx: [],
            // state
            props,
            update: noop,
            not_equal,
            bound: blank_object(),
            // lifecycle
            on_mount: [],
            on_destroy: [],
            on_disconnect: [],
            before_update: [],
            after_update: [],
            context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
            // everything else
            callbacks: blank_object(),
            dirty,
            skip_bound: false,
            root: options.target || parent_component.$$.root
        };
        append_styles && append_styles($$.root);
        let ready = false;
        $$.ctx = instance
            ? instance(component, options.props || {}, (i, ret, ...rest) => {
                const value = rest.length ? rest[0] : ret;
                if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
                    if (!$$.skip_bound && $$.bound[i])
                        $$.bound[i](value);
                    if (ready)
                        make_dirty(component, i);
                }
                return ret;
            })
            : [];
        $$.update();
        ready = true;
        run_all($$.before_update);
        // `false` as a special case of no DOM component
        $$.fragment = create_fragment ? create_fragment($$.ctx) : false;
        if (options.target) {
            if (options.hydrate) {
                const nodes = children(options.target);
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.l(nodes);
                nodes.forEach(detach);
            }
            else {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                $$.fragment && $$.fragment.c();
            }
            if (options.intro)
                transition_in(component.$$.fragment);
            mount_component(component, options.target, options.anchor, options.customElement);
            flush();
        }
        set_current_component(parent_component);
    }
    /**
     * Base class for Svelte components. Used when dev=false.
     */
    class SvelteComponent {
        $destroy() {
            destroy_component(this, 1);
            this.$destroy = noop;
        }
        $on(type, callback) {
            if (!is_function(callback)) {
                return noop;
            }
            const callbacks = (this.$$.callbacks[type] || (this.$$.callbacks[type] = []));
            callbacks.push(callback);
            return () => {
                const index = callbacks.indexOf(callback);
                if (index !== -1)
                    callbacks.splice(index, 1);
            };
        }
        $set($$props) {
            if (this.$$set && !is_empty($$props)) {
                this.$$.skip_bound = true;
                this.$$set($$props);
                this.$$.skip_bound = false;
            }
        }
    }

    function dispatch_dev(type, detail) {
        document.dispatchEvent(custom_event(type, Object.assign({ version: '3.59.2' }, detail), { bubbles: true }));
    }
    function append_dev(target, node) {
        dispatch_dev('SvelteDOMInsert', { target, node });
        append(target, node);
    }
    function insert_dev(target, node, anchor) {
        dispatch_dev('SvelteDOMInsert', { target, node, anchor });
        insert(target, node, anchor);
    }
    function detach_dev(node) {
        dispatch_dev('SvelteDOMRemove', { node });
        detach(node);
    }
    function listen_dev(node, event, handler, options, has_prevent_default, has_stop_propagation, has_stop_immediate_propagation) {
        const modifiers = options === true ? ['capture'] : options ? Array.from(Object.keys(options)) : [];
        if (has_prevent_default)
            modifiers.push('preventDefault');
        if (has_stop_propagation)
            modifiers.push('stopPropagation');
        if (has_stop_immediate_propagation)
            modifiers.push('stopImmediatePropagation');
        dispatch_dev('SvelteDOMAddEventListener', { node, event, handler, modifiers });
        const dispose = listen(node, event, handler, options);
        return () => {
            dispatch_dev('SvelteDOMRemoveEventListener', { node, event, handler, modifiers });
            dispose();
        };
    }
    function attr_dev(node, attribute, value) {
        attr(node, attribute, value);
        if (value == null)
            dispatch_dev('SvelteDOMRemoveAttribute', { node, attribute });
        else
            dispatch_dev('SvelteDOMSetAttribute', { node, attribute, value });
    }
    function prop_dev(node, property, value) {
        node[property] = value;
        dispatch_dev('SvelteDOMSetProperty', { node, property, value });
    }
    function set_data_dev(text, data) {
        data = '' + data;
        if (text.data === data)
            return;
        dispatch_dev('SvelteDOMSetData', { node: text, data });
        text.data = data;
    }
    function validate_each_argument(arg) {
        if (typeof arg !== 'string' && !(arg && typeof arg === 'object' && 'length' in arg)) {
            let msg = '{#each} only iterates over array-like objects.';
            if (typeof Symbol === 'function' && arg && Symbol.iterator in arg) {
                msg += ' You can use a spread to convert this iterable into an array.';
            }
            throw new Error(msg);
        }
    }
    function validate_slots(name, slot, keys) {
        for (const slot_key of Object.keys(slot)) {
            if (!~keys.indexOf(slot_key)) {
                console.warn(`<${name}> received an unexpected slot "${slot_key}".`);
            }
        }
    }
    /**
     * Base class for Svelte components with some minor dev-enhancements. Used when dev=true.
     */
    class SvelteComponentDev extends SvelteComponent {
        constructor(options) {
            if (!options || (!options.target && !options.$$inline)) {
                throw new Error("'target' is a required option");
            }
            super();
        }
        $destroy() {
            super.$destroy();
            this.$destroy = () => {
                console.warn('Component was already destroyed'); // eslint-disable-line no-console
            };
        }
        $capture_state() { }
        $inject_state() { }
    }

    const subscriber_queue = [];
    /**
     * Create a `Writable` store that allows both updating and reading by subscription.
     * @param {*=}value initial value
     * @param {StartStopNotifier=} start
     */
    function writable(value, start = noop) {
        let stop;
        const subscribers = new Set();
        function set(new_value) {
            if (safe_not_equal(value, new_value)) {
                value = new_value;
                if (stop) { // store is ready
                    const run_queue = !subscriber_queue.length;
                    for (const subscriber of subscribers) {
                        subscriber[1]();
                        subscriber_queue.push(subscriber, value);
                    }
                    if (run_queue) {
                        for (let i = 0; i < subscriber_queue.length; i += 2) {
                            subscriber_queue[i][0](subscriber_queue[i + 1]);
                        }
                        subscriber_queue.length = 0;
                    }
                }
            }
        }
        function update(fn) {
            set(fn(value));
        }
        function subscribe(run, invalidate = noop) {
            const subscriber = [run, invalidate];
            subscribers.add(subscriber);
            if (subscribers.size === 1) {
                stop = start(set) || noop;
            }
            run(value);
            return () => {
                subscribers.delete(subscriber);
                if (subscribers.size === 0 && stop) {
                    stop();
                    stop = null;
                }
            };
        }
        return { set, update, subscribe };
    }

    var hu = {
      thankYou: {
        title: "Köszönjük!",
        message: "Az űrlapot sikeresen elküldtük. Köszönjük érdeklődését szolgáltatásaink iránt, és a lehető leghamarabb feldolgozzuk kérését.",
        contactInfo: "Ha bármilyen kérdése van, forduljon hozzánk bizalommal a 06 70 555 0588 telefonszámon vagy az info@zima-auto.com e-mail címen.",
        homeButton: "VISSZA A FŐOLDALRA",
        contactButton: "KAPCSOLAT"
      },
      common: { // Added common section
        back: "Vissza"
      },
      cookieConsent: {
        title: "Cookie-k használata",
        message: "Weboldalunk cookie-kat használ a felhasználói élmény javítása érdekében. A weboldal használatával elfogadja a cookie-k használatát.",
        accept: "Elfogadom",
        decline: "Elutasítom",
        learnMore: "További információ"
      },
      nav: {
        home: "FŐOLDAL",
        booking: "FOGLALÁS",
        about: "RÓLUNK",
        services: "SZOLGÁLTATÁSOK & ÁRAK",
        contact: "KAPCSOLAT"
      },
      hero: {
        welcome: "Üdvözöljük a Zima Auto Kft-nél!",
        subtitle: "Ahol az autója minden igényére egy helyen kínálunk megoldást!",
        cta: "FOGLALJON MOST"
      },
      booking: {
        title: "FOGLALJON HELYET",
        button: "Reptéri Parkolás Foglalása",
        // --- New Booking Page Content ---
        content: {
          sectionTitle: "Reptéri Parkolás Foglalás Részletei",
          paragraph1: "Üdvözöljük online foglalási rendszerünkben. Kérjük, adja meg az alábbi szükséges információkat, hogy lefoglalhassa parkolóhelyét a Zima Auto reptér melletti létesítményében.",
          paragraph2: "Telephelyünk csak percekre található a repülőtértől, biztonságos és kényelmes parkolási megoldást kínálva utazásához.",
          paragraph3: "Kérésének elküldése után visszaigazoló e-mailt fog kapni a foglalás minden részletével, beleértve az útvonaltervet és a bejelentkezési eljárásokat.",
          note: "Ha bármilyen különleges kérése van vagy segítségre van szüksége, kérjük, lépjen kapcsolatba velünk közvetlenül."
        }
        // --- End New Content ---
      },
      services: {
        title: "SZOLGÁLTATÁSOK",
        parking: {
          title: "24/7 REPÜLŐTÉRI PARKOLÁS",
          description: "Biztonságos parkolási lehetőségünk bekerített határokkal és 24 órás kamerás megfigyeléssel rendelkezik, ami garantálja járművének a legnagyobb biztonságot."
        },
        washing: {
          title: "AUTÓMOSÓ",
          description: "Ajándékozza meg járművét egy fürdőnappal professzionális autómosó szolgáltatásainkkal, amelyek célja, hogy autója csillogóan tisztán és fiatalon maradjon."
        },
        tire: {
          title: "GUMISZERVIZ", // Fixed typo from previous hu.js 'GUMISZERIVZ'
          description: "Szakértő technikusaink készen állnak az abroncsokkal kapcsolatos bármilyen probléma azonnali megoldására, és biztonságosan visszatérni az útra."
        },
        service: {
          title: "AUTÓSZERVIZ",
          description: "A rutinellenőrzéstől a komplex javításokig szakképzett szerelőink fel vannak szerelve az összes karbantartás elvégzésére."
        }
      },
      testimonials: {
        title: "Ügyfeleink Véleménye",
        viewAll: "Összes vélemény megtekintése"
      },
      cta: {
        discover: "Fedezze fel versenyképes árainkat – nézze meg most!",
        button: "Árlista Megtekintése"
      },
      footer: {
        visit: "LÁTOGASSON MEG MINKET",
        address: "Vecsés Széchényi utca 62 mellett, Hrsz 0182/55, 2220",
        phone: "Telefon",
        phoneNumber: "06 70 555 0588",
        email: "Email",
        emailAddress: "info@zima-auto.com",
        links: "Hivatkozások",
        copyright: "© 2025 zima-auto.com. Minden jog fenntartva."
      }
    };

    var en = {
      thankYou: {
        title: "Thank You!",
        message: "Your form has been successfully submitted. We appreciate your interest in our services and will process your request as soon as possible.",
        contactInfo: "If you have any questions, feel free to contact us at 06 70 555 0588 or info@zima-auto.com.",
        homeButton: "BACK TO HOME",
        contactButton: "CONTACT US"
      },
      cookieConsent: {
        title: "Cookie Settings",
        message: "We use cookies to enhance your browsing experience, serve personalized content, and analyze our traffic. By clicking 'Accept', you consent to our use of cookies.",
        accept: "Accept",
        decline: "Decline",
        categories: {
          necessary: "Necessary Cookies",
          necessaryDesc: "These cookies are required for the website to function and cannot be switched off. They are usually only set in response to actions made by you.",
          analytics: "Analytics Cookies",
          analyticsDesc: "These cookies help us understand how visitors interact with our website by collecting and reporting information anonymously.",
          marketing: "Marketing Cookies",
          marketingDesc: "These cookies are used to track visitors across websites to display relevant advertisements.",
          preferences: "Preference Cookies",
          preferencesDesc: "These cookies allow the website to remember choices you make and provide enhanced, more personal features."
        }
      },
      common: { // Added common section
        back: "Back"
      },
      nav: {
        home: "HOME",
        booking: "BOOKING",
        about: "ABOUT US",
        services: "SERVICES & PRICES",
        contact: "CONTACT"
      },
      hero: {
        welcome: "Welcome to Zima Auto!",
        subtitle: "Where we offer solutions for all your car needs in one place!",
        cta: "BOOK NOW"
      },
      booking: {
        title: "BOOK A SPOT",
        button: "Book Airport Parking",
        // --- New Booking Page Content ---
        content: {
          sectionTitle: "Airport Parking Booking Details",
          paragraph1: "Welcome to our online booking system. Please provide the necessary information below to reserve your parking spot at Zima Auto near the airport.",
          paragraph2: "Our facility is located just minutes from the airport and offers a secure, convenient parking solution for your trip.",
          paragraph3: "After submitting your request, you will receive a confirmation email with all details regarding your booking, including directions and check-in procedures.",
          note: "If you have any special requests or require assistance, please contact us directly."
        }
        // --- End New Content ---
      },
      services: {
        title: "OUR SERVICES",
        parking: {
          title: "24/7 AIRPORT PARKING",
          description: "Our secure parking facility features fenced boundaries and 24-hour camera surveillance, guaranteeing the highest security for your vehicle."
        },
        washing: {
          title: "CAR WASH",
          description: "Treat your vehicle to a spa day with our professional car washing services aimed at keeping your car looking sparkling clean and youthful."
        },
        tire: {
          title: "TIRE SERVICE",
          description: "Our expert technicians are ready to solve any tire-related problems immediately and get you safely back on the road."
        },
        service: {
          title: "AUTO SERVICE",
          description: "From routine checks to complex repairs, our qualified mechanics are equipped to perform all maintenance."
        }
      },
      testimonials: {
        title: "Customer Testimonials",
        viewAll: "View all testimonials"
      },
      cta: {
        discover: "Discover our competitive prices – check them out now!",
        button: "View Price List"
      },
      footer: {
        visit: "VISIT US",
        address: "Next to Vecsés Széchényi Street 62, Plot 0182/55, 2220",
        phone: "Phone",
        phoneNumber: "06 70 555 0588",
        email: "Email",
        emailAddress: "info@zima-auto.com",
        links: "Links",
        copyright: "© 2025 zima-auto.com. All rights reserved."
      }
    };

    // src/lib/i18n/index.js

    const translations = {
      hu,
      en
    };

    const currentLang = writable('hu');

    function t(key, lang) {
      const keys = key.split('.');
      let value = translations[lang];
      
      for (const k of keys) {
        if (value && value[k]) {
          value = value[k];
        } else {
          return key;
        }
      }
      
      return value;
    }

    /* src/components/Header.svelte generated by Svelte v3.59.2 */
    const file$o = "src/components/Header.svelte";

    function create_fragment$o(ctx) {
    	let header;
    	let div3;
    	let div0;
    	let img0;
    	let img0_src_value;
    	let t0;
    	let nav;
    	let ul;
    	let li0;
    	let a0;
    	let t1_value = t('nav.home', /*$currentLang*/ ctx[4]) + "";
    	let t1;
    	let t2;
    	let li1;
    	let a1;
    	let t3_value = t('nav.booking', /*$currentLang*/ ctx[4]) + "";
    	let t3;
    	let t4;
    	let li2;
    	let a2;
    	let t5_value = t('nav.about', /*$currentLang*/ ctx[4]) + "";
    	let t5;
    	let t6;
    	let li3;
    	let a3;
    	let t7_value = t('nav.services', /*$currentLang*/ ctx[4]) + "";
    	let t7;
    	let t8;
    	let li4;
    	let a4;
    	let t9_value = t('nav.contact', /*$currentLang*/ ctx[4]) + "";
    	let t9;
    	let t10;
    	let div2;
    	let div1;
    	let button0;
    	let img1;
    	let img1_src_value;
    	let t11;
    	let span0;
    	let button0_class_value;
    	let t13;
    	let button1;
    	let img2;
    	let img2_src_value;
    	let t14;
    	let span1;
    	let button1_class_value;
    	let t16;
    	let button2;
    	let span2;
    	let t17;
    	let span3;
    	let t18;
    	let span4;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			header = element("header");
    			div3 = element("div");
    			div0 = element("div");
    			img0 = element("img");
    			t0 = space();
    			nav = element("nav");
    			ul = element("ul");
    			li0 = element("li");
    			a0 = element("a");
    			t1 = text(t1_value);
    			t2 = space();
    			li1 = element("li");
    			a1 = element("a");
    			t3 = text(t3_value);
    			t4 = space();
    			li2 = element("li");
    			a2 = element("a");
    			t5 = text(t5_value);
    			t6 = space();
    			li3 = element("li");
    			a3 = element("a");
    			t7 = text(t7_value);
    			t8 = space();
    			li4 = element("li");
    			a4 = element("a");
    			t9 = text(t9_value);
    			t10 = space();
    			div2 = element("div");
    			div1 = element("div");
    			button0 = element("button");
    			img1 = element("img");
    			t11 = space();
    			span0 = element("span");
    			span0.textContent = "HU";
    			t13 = space();
    			button1 = element("button");
    			img2 = element("img");
    			t14 = space();
    			span1 = element("span");
    			span1.textContent = "EN";
    			t16 = space();
    			button2 = element("button");
    			span2 = element("span");
    			t17 = space();
    			span3 = element("span");
    			t18 = space();
    			span4 = element("span");
    			if (!src_url_equal(img0.src, img0_src_value = "images/zima-logo.avif")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Zima Auto");
    			attr_dev(img0, "class", "svelte-hbfqc1");
    			add_location(img0, file$o, 78, 6, 1812);
    			attr_dev(div0, "class", "logo svelte-hbfqc1");
    			attr_dev(div0, "tabindex", "0");
    			attr_dev(div0, "role", "button");
    			attr_dev(div0, "aria-label", "Go to homepage");
    			add_location(div0, file$o, 70, 4, 1626);
    			attr_dev(a0, "href", "#home");
    			attr_dev(a0, "class", "svelte-hbfqc1");
    			add_location(a0, file$o, 84, 10, 1986);
    			toggle_class(li0, "active", /*currentPage*/ ctx[1] === 'home');
    			add_location(li0, file$o, 83, 8, 1933);
    			attr_dev(a1, "href", "#booking");
    			attr_dev(a1, "class", "svelte-hbfqc1");
    			add_location(a1, file$o, 89, 10, 2193);
    			toggle_class(li1, "active", /*currentPage*/ ctx[1] === 'booking');
    			add_location(li1, file$o, 88, 8, 2137);
    			attr_dev(a2, "href", "#about");
    			attr_dev(a2, "class", "svelte-hbfqc1");
    			add_location(a2, file$o, 94, 10, 2407);
    			toggle_class(li2, "active", /*currentPage*/ ctx[1] === 'about');
    			add_location(li2, file$o, 93, 8, 2353);
    			attr_dev(a3, "href", "#services");
    			attr_dev(a3, "class", "svelte-hbfqc1");
    			add_location(a3, file$o, 99, 10, 2618);
    			toggle_class(li3, "active", /*currentPage*/ ctx[1] === 'services');
    			add_location(li3, file$o, 98, 8, 2561);
    			attr_dev(a4, "href", "#contact");
    			attr_dev(a4, "class", "svelte-hbfqc1");
    			add_location(a4, file$o, 104, 10, 2837);
    			toggle_class(li4, "active", /*currentPage*/ ctx[1] === 'contact');
    			add_location(li4, file$o, 103, 8, 2781);
    			attr_dev(ul, "class", "svelte-hbfqc1");
    			add_location(ul, file$o, 82, 6, 1920);
    			attr_dev(nav, "class", "svelte-hbfqc1");
    			toggle_class(nav, "open", /*mobileMenuOpen*/ ctx[3]);
    			add_location(nav, file$o, 81, 4, 1880);
    			if (!src_url_equal(img1.src, img1_src_value = "/flags/hu.svg")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Magyar zászló");
    			attr_dev(img1, "width", "24");
    			attr_dev(img1, "height", "16");
    			attr_dev(img1, "class", "svelte-hbfqc1");
    			add_location(img1, file$o, 118, 10, 3275);
    			attr_dev(span0, "class", "svelte-hbfqc1");
    			add_location(span0, file$o, 119, 10, 3356);
    			attr_dev(button0, "class", button0_class_value = "language-button " + (/*$currentLang*/ ctx[4] === 'hu' ? 'active' : '') + " svelte-hbfqc1");
    			attr_dev(button0, "aria-label", "Magyar nyelv");
    			add_location(button0, file$o, 113, 8, 3089);
    			if (!src_url_equal(img2.src, img2_src_value = "/flags/gb.svg")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "British flag");
    			attr_dev(img2, "width", "24");
    			attr_dev(img2, "height", "16");
    			attr_dev(img2, "class", "svelte-hbfqc1");
    			add_location(img2, file$o, 126, 10, 3588);
    			attr_dev(span1, "class", "svelte-hbfqc1");
    			add_location(span1, file$o, 127, 10, 3668);
    			attr_dev(button1, "class", button1_class_value = "language-button " + (/*$currentLang*/ ctx[4] === 'en' ? 'active' : '') + " svelte-hbfqc1");
    			attr_dev(button1, "aria-label", "English language");
    			add_location(button1, file$o, 121, 8, 3398);
    			attr_dev(div1, "class", "language-toggle svelte-hbfqc1");
    			add_location(div1, file$o, 112, 6, 3051);
    			attr_dev(span2, "class", "svelte-hbfqc1");
    			add_location(span2, file$o, 138, 8, 3925);
    			attr_dev(span3, "class", "svelte-hbfqc1");
    			add_location(span3, file$o, 139, 8, 3947);
    			attr_dev(span4, "class", "svelte-hbfqc1");
    			add_location(span4, file$o, 140, 8, 3969);
    			attr_dev(button2, "class", "mobile-menu-toggle svelte-hbfqc1");
    			attr_dev(button2, "aria-label", "Toggle menu");
    			attr_dev(button2, "aria-expanded", /*mobileMenuOpen*/ ctx[3]);
    			toggle_class(button2, "open", /*mobileMenuOpen*/ ctx[3]);
    			add_location(button2, file$o, 131, 6, 3722);
    			attr_dev(div2, "class", "right-section svelte-hbfqc1");
    			add_location(div2, file$o, 111, 4, 3017);
    			attr_dev(div3, "class", "container svelte-hbfqc1");
    			add_location(div3, file$o, 69, 2, 1598);
    			attr_dev(header, "class", "svelte-hbfqc1");
    			toggle_class(header, "scrolled", /*scrolled*/ ctx[2]);
    			add_location(header, file$o, 68, 0, 1572);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, header, anchor);
    			append_dev(header, div3);
    			append_dev(div3, div0);
    			append_dev(div0, img0);
    			append_dev(div3, t0);
    			append_dev(div3, nav);
    			append_dev(nav, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a0);
    			append_dev(a0, t1);
    			append_dev(ul, t2);
    			append_dev(ul, li1);
    			append_dev(li1, a1);
    			append_dev(a1, t3);
    			append_dev(ul, t4);
    			append_dev(ul, li2);
    			append_dev(li2, a2);
    			append_dev(a2, t5);
    			append_dev(ul, t6);
    			append_dev(ul, li3);
    			append_dev(li3, a3);
    			append_dev(a3, t7);
    			append_dev(ul, t8);
    			append_dev(ul, li4);
    			append_dev(li4, a4);
    			append_dev(a4, t9);
    			append_dev(div3, t10);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			append_dev(div1, button0);
    			append_dev(button0, img1);
    			append_dev(button0, t11);
    			append_dev(button0, span0);
    			append_dev(div1, t13);
    			append_dev(div1, button1);
    			append_dev(button1, img2);
    			append_dev(button1, t14);
    			append_dev(button1, span1);
    			append_dev(div2, t16);
    			append_dev(div2, button2);
    			append_dev(button2, span2);
    			append_dev(button2, t17);
    			append_dev(button2, span3);
    			append_dev(button2, t18);
    			append_dev(button2, span4);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div0, "click", /*click_handler*/ ctx[9], false, false, false, false),
    					listen_dev(div0, "keydown", /*handleLogoKeydown*/ ctx[8], false, false, false, false),
    					listen_dev(a0, "click", prevent_default(/*click_handler_1*/ ctx[10]), false, true, false, false),
    					listen_dev(a1, "click", prevent_default(/*click_handler_2*/ ctx[11]), false, true, false, false),
    					listen_dev(a2, "click", prevent_default(/*click_handler_3*/ ctx[12]), false, true, false, false),
    					listen_dev(a3, "click", prevent_default(/*click_handler_4*/ ctx[13]), false, true, false, false),
    					listen_dev(a4, "click", prevent_default(/*click_handler_5*/ ctx[14]), false, true, false, false),
    					listen_dev(button0, "click", /*click_handler_6*/ ctx[15], false, false, false, false),
    					listen_dev(button1, "click", /*click_handler_7*/ ctx[16], false, false, false, false),
    					listen_dev(button2, "click", /*toggleMobileMenu*/ ctx[6], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentLang*/ 16 && t1_value !== (t1_value = t('nav.home', /*$currentLang*/ ctx[4]) + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*currentPage*/ 2) {
    				toggle_class(li0, "active", /*currentPage*/ ctx[1] === 'home');
    			}

    			if (dirty & /*$currentLang*/ 16 && t3_value !== (t3_value = t('nav.booking', /*$currentLang*/ ctx[4]) + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*currentPage*/ 2) {
    				toggle_class(li1, "active", /*currentPage*/ ctx[1] === 'booking');
    			}

    			if (dirty & /*$currentLang*/ 16 && t5_value !== (t5_value = t('nav.about', /*$currentLang*/ ctx[4]) + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*currentPage*/ 2) {
    				toggle_class(li2, "active", /*currentPage*/ ctx[1] === 'about');
    			}

    			if (dirty & /*$currentLang*/ 16 && t7_value !== (t7_value = t('nav.services', /*$currentLang*/ ctx[4]) + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*currentPage*/ 2) {
    				toggle_class(li3, "active", /*currentPage*/ ctx[1] === 'services');
    			}

    			if (dirty & /*$currentLang*/ 16 && t9_value !== (t9_value = t('nav.contact', /*$currentLang*/ ctx[4]) + "")) set_data_dev(t9, t9_value);

    			if (dirty & /*currentPage*/ 2) {
    				toggle_class(li4, "active", /*currentPage*/ ctx[1] === 'contact');
    			}

    			if (dirty & /*mobileMenuOpen*/ 8) {
    				toggle_class(nav, "open", /*mobileMenuOpen*/ ctx[3]);
    			}

    			if (dirty & /*$currentLang*/ 16 && button0_class_value !== (button0_class_value = "language-button " + (/*$currentLang*/ ctx[4] === 'hu' ? 'active' : '') + " svelte-hbfqc1")) {
    				attr_dev(button0, "class", button0_class_value);
    			}

    			if (dirty & /*$currentLang*/ 16 && button1_class_value !== (button1_class_value = "language-button " + (/*$currentLang*/ ctx[4] === 'en' ? 'active' : '') + " svelte-hbfqc1")) {
    				attr_dev(button1, "class", button1_class_value);
    			}

    			if (dirty & /*mobileMenuOpen*/ 8) {
    				attr_dev(button2, "aria-expanded", /*mobileMenuOpen*/ ctx[3]);
    			}

    			if (dirty & /*mobileMenuOpen*/ 8) {
    				toggle_class(button2, "open", /*mobileMenuOpen*/ ctx[3]);
    			}

    			if (dirty & /*scrolled*/ 4) {
    				toggle_class(header, "scrolled", /*scrolled*/ ctx[2]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(header);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$o.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$o($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(4, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Header', slots, []);
    	let { navigate } = $$props;
    	let { currentPage } = $$props;
    	let scrolled = false;
    	let mobileMenuOpen = false;
    	let lang;

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	// Function to toggle language based on the clicked element
    	function toggleLanguage(selectedLang) {
    		currentLang.set(selectedLang);
    	}

    	function toggleMobileMenu() {
    		$$invalidate(3, mobileMenuOpen = !mobileMenuOpen);

    		// Prevent body scrolling when menu is open
    		if (mobileMenuOpen) {
    			document.body.style.overflow = 'hidden';
    		} else {
    			document.body.style.overflow = '';
    		}
    	}

    	function handleNavClick(page) {
    		navigate(page);
    		$$invalidate(3, mobileMenuOpen = false);
    		document.body.style.overflow = '';
    	}

    	function handleLogoKeydown(e) {
    		if (e.key === 'Enter' || e.key === ' ') {
    			navigate('home');
    		}
    	}

    	onMount(() => {
    		const handleScroll = () => {
    			$$invalidate(2, scrolled = window.scrollY > 20);
    		};

    		window.addEventListener('scroll', handleScroll);

    		// Handle ESC key to close mobile menu
    		const handleKeydown = e => {
    			if (e.key === 'Escape' && mobileMenuOpen) {
    				$$invalidate(3, mobileMenuOpen = false);
    				document.body.style.overflow = '';
    			}
    		};

    		window.addEventListener('keydown', handleKeydown);

    		return () => {
    			window.removeEventListener('scroll', handleScroll);
    			window.removeEventListener('keydown', handleKeydown);
    		};
    	});

    	$$self.$$.on_mount.push(function () {
    		if (navigate === undefined && !('navigate' in $$props || $$self.$$.bound[$$self.$$.props['navigate']])) {
    			console.warn("<Header> was created without expected prop 'navigate'");
    		}

    		if (currentPage === undefined && !('currentPage' in $$props || $$self.$$.bound[$$self.$$.props['currentPage']])) {
    			console.warn("<Header> was created without expected prop 'currentPage'");
    		}
    	});

    	const writable_props = ['navigate', 'currentPage'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Header> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => navigate('home');
    	const click_handler_1 = () => handleNavClick('home');
    	const click_handler_2 = () => handleNavClick('booking');
    	const click_handler_3 = () => handleNavClick('about');
    	const click_handler_4 = () => handleNavClick('services');
    	const click_handler_5 = () => handleNavClick('contact');
    	const click_handler_6 = () => toggleLanguage('hu');
    	const click_handler_7 = () => toggleLanguage('en');

    	$$self.$$set = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    		if ('currentPage' in $$props) $$invalidate(1, currentPage = $$props.currentPage);
    	};

    	$$self.$capture_state = () => ({
    		currentLang,
    		t,
    		onMount,
    		navigate,
    		currentPage,
    		scrolled,
    		mobileMenuOpen,
    		lang,
    		toggleLanguage,
    		toggleMobileMenu,
    		handleNavClick,
    		handleLogoKeydown,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    		if ('currentPage' in $$props) $$invalidate(1, currentPage = $$props.currentPage);
    		if ('scrolled' in $$props) $$invalidate(2, scrolled = $$props.scrolled);
    		if ('mobileMenuOpen' in $$props) $$invalidate(3, mobileMenuOpen = $$props.mobileMenuOpen);
    		if ('lang' in $$props) lang = $$props.lang;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		navigate,
    		currentPage,
    		scrolled,
    		mobileMenuOpen,
    		$currentLang,
    		toggleLanguage,
    		toggleMobileMenu,
    		handleNavClick,
    		handleLogoKeydown,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5,
    		click_handler_6,
    		click_handler_7
    	];
    }

    class Header extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$o, create_fragment$o, safe_not_equal, { navigate: 0, currentPage: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Header",
    			options,
    			id: create_fragment$o.name
    		});
    	}

    	get navigate() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigate(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentPage() {
    		throw new Error("<Header>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentPage(value) {
    		throw new Error("<Header>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/Footer.svelte generated by Svelte v3.59.2 */
    const file$n = "src/components/Footer.svelte";

    function create_fragment$n(ctx) {
    	let footer;
    	let div9;
    	let div8;
    	let div7;
    	let div3;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let h30;
    	let t1_value = t('footer.visit', /*$currentLang*/ ctx[2]) + "";
    	let t1;
    	let t2;
    	let p0;
    	let t3_value = t('footer.address', /*$currentLang*/ ctx[2]) + "";
    	let t3;
    	let t4;
    	let p1;
    	let strong0;
    	let t5_value = t('footer.phone', /*$currentLang*/ ctx[2]) + "";
    	let t5;
    	let t6;
    	let t7;
    	let a0;
    	let t8_value = t('footer.phoneNumber', /*$currentLang*/ ctx[2]) + "";
    	let t8;
    	let t9;
    	let p2;
    	let strong1;
    	let t10_value = t('footer.email', /*$currentLang*/ ctx[2]) + "";
    	let t10;
    	let t11;
    	let t12;
    	let a1;
    	let t13_value = t('footer.emailAddress', /*$currentLang*/ ctx[2]) + "";
    	let t13;
    	let t14;
    	let div2;
    	let a2;
    	let svg0;
    	let path0;
    	let t15;
    	let a3;
    	let svg1;
    	let path1;
    	let t16;
    	let div4;
    	let h31;
    	let t17_value = t('footer.links', /*$currentLang*/ ctx[2]) + "";
    	let t17;
    	let t18;
    	let ul;
    	let li0;
    	let a4;
    	let t19_value = t('nav.home', /*$currentLang*/ ctx[2]) + "";
    	let t19;
    	let t20;
    	let li1;
    	let a5;
    	let t21_value = t('nav.booking', /*$currentLang*/ ctx[2]) + "";
    	let t21;
    	let t22;
    	let li2;
    	let a6;
    	let t23_value = t('nav.about', /*$currentLang*/ ctx[2]) + "";
    	let t23;
    	let t24;
    	let li3;
    	let a7;
    	let t25_value = t('nav.services', /*$currentLang*/ ctx[2]) + "";
    	let t25;
    	let t26;
    	let li4;
    	let a8;
    	let t27_value = t('nav.contact', /*$currentLang*/ ctx[2]) + "";
    	let t27;
    	let t28;
    	let div6;
    	let div5;
    	let iframe;
    	let iframe_src_value;
    	let t29;
    	let button0;

    	let t30_value = (/*$currentLang*/ ctx[2] === 'hu'
    	? 'Útvonaltervezés'
    	: 'Get Directions') + "";

    	let t30;
    	let t31;
    	let svg2;
    	let path2;
    	let t32;
    	let div11;
    	let div10;
    	let p3;
    	let t33_value = t('footer.copyright', /*$currentLang*/ ctx[2]) + "";
    	let t33;
    	let t34;
    	let a9;

    	let t35_value = (/*$currentLang*/ ctx[2] === 'hu'
    	? 'Adatvédelmi irányelvek'
    	: 'Privacy Policy') + "";

    	let t35;
    	let t36;
    	let button1;
    	let svg3;
    	let path3;
    	let button1_aria_label_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			footer = element("footer");
    			div9 = element("div");
    			div8 = element("div");
    			div7 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			p1 = element("p");
    			strong0 = element("strong");
    			t5 = text(t5_value);
    			t6 = text(":");
    			t7 = space();
    			a0 = element("a");
    			t8 = text(t8_value);
    			t9 = space();
    			p2 = element("p");
    			strong1 = element("strong");
    			t10 = text(t10_value);
    			t11 = text(":");
    			t12 = space();
    			a1 = element("a");
    			t13 = text(t13_value);
    			t14 = space();
    			div2 = element("div");
    			a2 = element("a");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t15 = space();
    			a3 = element("a");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t16 = space();
    			div4 = element("div");
    			h31 = element("h3");
    			t17 = text(t17_value);
    			t18 = space();
    			ul = element("ul");
    			li0 = element("li");
    			a4 = element("a");
    			t19 = text(t19_value);
    			t20 = space();
    			li1 = element("li");
    			a5 = element("a");
    			t21 = text(t21_value);
    			t22 = space();
    			li2 = element("li");
    			a6 = element("a");
    			t23 = text(t23_value);
    			t24 = space();
    			li3 = element("li");
    			a7 = element("a");
    			t25 = text(t25_value);
    			t26 = space();
    			li4 = element("li");
    			a8 = element("a");
    			t27 = text(t27_value);
    			t28 = space();
    			div6 = element("div");
    			div5 = element("div");
    			iframe = element("iframe");
    			t29 = space();
    			button0 = element("button");
    			t30 = text(t30_value);
    			t31 = space();
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t32 = space();
    			div11 = element("div");
    			div10 = element("div");
    			p3 = element("p");
    			t33 = text(t33_value);
    			t34 = space();
    			a9 = element("a");
    			t35 = text(t35_value);
    			t36 = space();
    			button1 = element("button");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			if (!src_url_equal(img.src, img_src_value = "images/zima-logo.avif")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Zima Auto");
    			attr_dev(img, "class", "svelte-6j3hmg");
    			add_location(img, file$n, 46, 12, 1330);
    			attr_dev(div0, "class", "footer-logo svelte-6j3hmg");
    			add_location(div0, file$n, 45, 10, 1292);
    			attr_dev(h30, "class", "svelte-6j3hmg");
    			add_location(h30, file$n, 49, 12, 1448);
    			attr_dev(p0, "class", "address svelte-6j3hmg");
    			add_location(p0, file$n, 50, 12, 1503);
    			add_location(strong0, file$n, 51, 15, 1577);
    			attr_dev(a0, "href", "tel:+36705550588");
    			attr_dev(a0, "class", "contact-link svelte-6j3hmg");
    			add_location(a0, file$n, 51, 67, 1629);
    			attr_dev(p1, "class", "svelte-6j3hmg");
    			add_location(p1, file$n, 51, 12, 1574);
    			add_location(strong1, file$n, 52, 15, 1740);
    			attr_dev(a1, "href", "mailto:info@zima-auto.com");
    			attr_dev(a1, "class", "contact-link svelte-6j3hmg");
    			add_location(a1, file$n, 52, 67, 1792);
    			attr_dev(p2, "class", "svelte-6j3hmg");
    			add_location(p2, file$n, 52, 12, 1737);
    			attr_dev(div1, "class", "contact-info svelte-6j3hmg");
    			add_location(div1, file$n, 48, 10, 1409);
    			attr_dev(path0, "d", "M12 2.04001C6.5 2.04001 2 6.53001 2 12.06C2 17.06 5.66 21.21 10.44 21.96V14.96H7.9V12.06H10.44V9.85001C10.44 7.34001 11.93 5.96001 14.22 5.96001C15.31 5.96001 16.45 6.15001 16.45 6.15001V8.62001H15.19C13.95 8.62001 13.56 9.39001 13.56 10.18V12.06H16.34L15.89 14.96H13.56V21.96C15.9164 21.5879 18.0622 20.3855 19.6099 18.5701C21.1576 16.7546 22.0054 14.4457 22 12.06C22 6.53001 17.5 2.04001 12 2.04001Z");
    			attr_dev(path0, "fill", "currentColor");
    			add_location(path0, file$n, 57, 16, 2233);
    			attr_dev(svg0, "width", "20");
    			attr_dev(svg0, "height", "20");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$n, 56, 14, 2121);
    			attr_dev(a2, "href", "https://www.facebook.com/people/Zima-Aut%C3%B3/61558143560827/?_rdr");
    			attr_dev(a2, "target", "_blank");
    			attr_dev(a2, "rel", "noopener noreferrer");
    			attr_dev(a2, "aria-label", "Facebook");
    			attr_dev(a2, "class", "svelte-6j3hmg");
    			add_location(a2, file$n, 55, 12, 1964);
    			attr_dev(path1, "d", "M12 2C14.717 2 15.056 2.01 16.122 2.06C17.187 2.11 17.912 2.277 18.55 2.525C19.21 2.779 19.766 3.123 20.322 3.678C20.8305 4.1779 21.224 4.78259 21.475 5.45C21.722 6.087 21.89 6.813 21.94 7.878C21.987 8.944 22 9.283 22 12C22 14.717 21.99 15.056 21.94 16.122C21.89 17.187 21.722 17.912 21.475 18.55C21.2247 19.2178 20.8311 19.8226 20.322 20.322C19.822 20.8303 19.2173 21.2238 18.55 21.475C17.913 21.722 17.187 21.89 16.122 21.94C15.056 21.987 14.717 22 12 22C9.283 22 8.944 21.99 7.878 21.94C6.813 21.89 6.088 21.722 5.45 21.475C4.78233 21.2245 4.17753 20.8309 3.678 20.322C3.16941 19.8222 2.77593 19.2175 2.525 18.55C2.277 17.913 2.11 17.187 2.06 16.122C2.013 15.056 2 14.717 2 12C2 9.283 2.01 8.944 2.06 7.878C2.11 6.812 2.277 6.088 2.525 5.45C2.77524 4.78218 3.1688 4.17732 3.678 3.678C4.17767 3.16923 4.78243 2.77573 5.45 2.525C6.088 2.277 6.812 2.11 7.878 2.06C8.944 2.013 9.283 2 12 2ZM12 7C10.6739 7 9.40215 7.52678 8.46447 8.46447C7.52678 9.40215 7 10.6739 7 12C7 13.3261 7.52678 14.5979 8.46447 15.5355C9.40215 16.4732 10.6739 17 12 17C13.3261 17 14.5979 16.4732 15.5355 15.5355C16.4732 14.5979 17 13.3261 17 12C17 10.6739 16.4732 9.40215 15.5355 8.46447C14.5979 7.52678 13.3261 7 12 7ZM18.5 6.75C18.5 6.41848 18.3683 6.10054 18.1339 5.86612C17.8995 5.6317 17.5815 5.5 17.25 5.5C16.9185 5.5 16.6005 5.6317 16.3661 5.86612C16.1317 6.10054 16 6.41848 16 6.75C16 7.08152 16.1317 7.39946 16.3661 7.63388C16.6005 7.8683 16.9185 8 17.25 8C17.5815 8 17.8995 7.8683 18.1339 7.63388C18.3683 7.39946 18.5 7.08152 18.5 6.75ZM12 9C12.7956 9 13.5587 9.31607 14.1213 9.87868C14.6839 10.4413 15 11.2044 15 12C15 12.7956 14.6839 13.5587 14.1213 14.1213C13.5587 14.6839 12.7956 15 12 15C11.2044 15 10.4413 14.6839 9.87868 14.1213C9.31607 13.5587 9 12.7956 9 12C9 11.2044 9.31607 10.4413 9.87868 9.87868C10.4413 9.31607 11.2044 9 12 9Z");
    			attr_dev(path1, "fill", "currentColor");
    			add_location(path1, file$n, 62, 16, 2956);
    			attr_dev(svg1, "width", "20");
    			attr_dev(svg1, "height", "20");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg1, file$n, 61, 14, 2844);
    			attr_dev(a3, "href", "https://www.instagram.com/zima_auto/");
    			attr_dev(a3, "target", "_blank");
    			attr_dev(a3, "rel", "noopener noreferrer");
    			attr_dev(a3, "aria-label", "Instagram");
    			attr_dev(a3, "class", "svelte-6j3hmg");
    			add_location(a3, file$n, 60, 12, 2717);
    			attr_dev(div2, "class", "social-links svelte-6j3hmg");
    			add_location(div2, file$n, 54, 10, 1925);
    			attr_dev(div3, "class", "footer-info");
    			add_location(div3, file$n, 44, 8, 1256);
    			attr_dev(h31, "class", "svelte-6j3hmg");
    			add_location(h31, file$n, 69, 10, 4929);
    			attr_dev(a4, "href", "#home");
    			attr_dev(a4, "class", "svelte-6j3hmg");
    			add_location(a4, file$n, 72, 14, 5018);
    			attr_dev(li0, "class", "svelte-6j3hmg");
    			add_location(li0, file$n, 71, 12, 4999);
    			attr_dev(a5, "href", "#booking");
    			attr_dev(a5, "class", "svelte-6j3hmg");
    			add_location(a5, file$n, 77, 14, 5198);
    			attr_dev(li1, "class", "svelte-6j3hmg");
    			add_location(li1, file$n, 76, 12, 5179);
    			attr_dev(a6, "href", "#about");
    			attr_dev(a6, "class", "svelte-6j3hmg");
    			add_location(a6, file$n, 82, 14, 5387);
    			attr_dev(li2, "class", "svelte-6j3hmg");
    			add_location(li2, file$n, 81, 12, 5368);
    			attr_dev(a7, "href", "#services");
    			attr_dev(a7, "class", "svelte-6j3hmg");
    			add_location(a7, file$n, 87, 14, 5570);
    			attr_dev(li3, "class", "svelte-6j3hmg");
    			add_location(li3, file$n, 86, 12, 5551);
    			attr_dev(a8, "href", "#contact");
    			attr_dev(a8, "class", "svelte-6j3hmg");
    			add_location(a8, file$n, 92, 14, 5762);
    			attr_dev(li4, "class", "svelte-6j3hmg");
    			add_location(li4, file$n, 91, 12, 5743);
    			attr_dev(ul, "class", "svelte-6j3hmg");
    			add_location(ul, file$n, 70, 10, 4982);
    			attr_dev(div4, "class", "footer-links svelte-6j3hmg");
    			add_location(div4, file$n, 68, 8, 4892);
    			if (!src_url_equal(iframe.src, iframe_src_value = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2700.102580768995!2d19.230113876877105!3d47.40994027117247!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x4741c1ece824d30f%3A0x632898beef8d5983!2sZima%20Auto%20Airport%20Parking%20-%20Aut%C3%B3szerv%C3%ADz%20-%20Gumiszerv%C3%ADz%20-%20K%C3%A9zi%20aut%C3%B3mos%C3%B3!5e0!3m2!1sen!2shu!4v1745609320883!5m2!1sen!2shu")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "width", "100%");
    			attr_dev(iframe, "height", "100%");
    			set_style(iframe, "border", "0");
    			iframe.allowFullscreen = "";
    			attr_dev(iframe, "loading", "lazy");
    			attr_dev(iframe, "referrerpolicy", "no-referrer-when-downgrade");
    			attr_dev(iframe, "title", "Zima Auto location");
    			attr_dev(iframe, "class", "svelte-6j3hmg");
    			add_location(iframe, file$n, 101, 12, 6035);
    			attr_dev(path2, "d", "M9 18l6-6-6-6");
    			add_location(path2, file$n, 117, 16, 7118);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "width", "16");
    			attr_dev(svg2, "height", "16");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "stroke", "currentColor");
    			attr_dev(svg2, "stroke-width", "2");
    			attr_dev(svg2, "stroke-linecap", "round");
    			attr_dev(svg2, "stroke-linejoin", "round");
    			add_location(svg2, file$n, 116, 14, 6920);
    			attr_dev(button0, "class", "directions-link svelte-6j3hmg");
    			add_location(button0, file$n, 111, 12, 6719);
    			attr_dev(div5, "class", "map-container svelte-6j3hmg");
    			add_location(div5, file$n, 100, 10, 5995);
    			attr_dev(div6, "class", "footer-map svelte-6j3hmg");
    			add_location(div6, file$n, 99, 8, 5960);
    			attr_dev(div7, "class", "footer-grid svelte-6j3hmg");
    			add_location(div7, file$n, 43, 6, 1222);
    			attr_dev(div8, "class", "container");
    			add_location(div8, file$n, 42, 4, 1192);
    			attr_dev(div9, "class", "footer-top svelte-6j3hmg");
    			add_location(div9, file$n, 41, 2, 1163);
    			attr_dev(p3, "class", "svelte-6j3hmg");
    			add_location(p3, file$n, 128, 6, 7317);
    			attr_dev(a9, "href", "#privacy");
    			attr_dev(a9, "class", "privacy-link svelte-6j3hmg");
    			add_location(a9, file$n, 129, 6, 7368);
    			attr_dev(div10, "class", "container svelte-6j3hmg");
    			add_location(div10, file$n, 127, 4, 7287);
    			attr_dev(div11, "class", "footer-bottom svelte-6j3hmg");
    			add_location(div11, file$n, 126, 2, 7255);
    			attr_dev(path3, "d", "M18 15l-6-6-6 6");
    			add_location(path3, file$n, 142, 6, 7939);
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg3, "width", "24");
    			attr_dev(svg3, "height", "24");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "stroke", "currentColor");
    			attr_dev(svg3, "stroke-width", "2");
    			attr_dev(svg3, "stroke-linecap", "round");
    			attr_dev(svg3, "stroke-linejoin", "round");
    			add_location(svg3, file$n, 141, 4, 7751);
    			attr_dev(button1, "class", "back-to-top svelte-6j3hmg");

    			attr_dev(button1, "aria-label", button1_aria_label_value = /*$currentLang*/ ctx[2] === 'hu'
    			? 'Vissza a tetejére'
    			: 'Back to top');

    			toggle_class(button1, "visible", /*showBackToTop*/ ctx[1]);
    			add_location(button1, file$n, 135, 2, 7573);
    			attr_dev(footer, "class", "svelte-6j3hmg");
    			add_location(footer, file$n, 40, 0, 1152);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, footer, anchor);
    			append_dev(footer, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div3);
    			append_dev(div3, div0);
    			append_dev(div0, img);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, h30);
    			append_dev(h30, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p0);
    			append_dev(p0, t3);
    			append_dev(div1, t4);
    			append_dev(div1, p1);
    			append_dev(p1, strong0);
    			append_dev(strong0, t5);
    			append_dev(strong0, t6);
    			append_dev(p1, t7);
    			append_dev(p1, a0);
    			append_dev(a0, t8);
    			append_dev(div1, t9);
    			append_dev(div1, p2);
    			append_dev(p2, strong1);
    			append_dev(strong1, t10);
    			append_dev(strong1, t11);
    			append_dev(p2, t12);
    			append_dev(p2, a1);
    			append_dev(a1, t13);
    			append_dev(div3, t14);
    			append_dev(div3, div2);
    			append_dev(div2, a2);
    			append_dev(a2, svg0);
    			append_dev(svg0, path0);
    			append_dev(div2, t15);
    			append_dev(div2, a3);
    			append_dev(a3, svg1);
    			append_dev(svg1, path1);
    			append_dev(div7, t16);
    			append_dev(div7, div4);
    			append_dev(div4, h31);
    			append_dev(h31, t17);
    			append_dev(div4, t18);
    			append_dev(div4, ul);
    			append_dev(ul, li0);
    			append_dev(li0, a4);
    			append_dev(a4, t19);
    			append_dev(ul, t20);
    			append_dev(ul, li1);
    			append_dev(li1, a5);
    			append_dev(a5, t21);
    			append_dev(ul, t22);
    			append_dev(ul, li2);
    			append_dev(li2, a6);
    			append_dev(a6, t23);
    			append_dev(ul, t24);
    			append_dev(ul, li3);
    			append_dev(li3, a7);
    			append_dev(a7, t25);
    			append_dev(ul, t26);
    			append_dev(ul, li4);
    			append_dev(li4, a8);
    			append_dev(a8, t27);
    			append_dev(div7, t28);
    			append_dev(div7, div6);
    			append_dev(div6, div5);
    			append_dev(div5, iframe);
    			append_dev(div5, t29);
    			append_dev(div5, button0);
    			append_dev(button0, t30);
    			append_dev(button0, t31);
    			append_dev(button0, svg2);
    			append_dev(svg2, path2);
    			append_dev(footer, t32);
    			append_dev(footer, div11);
    			append_dev(div11, div10);
    			append_dev(div10, p3);
    			append_dev(p3, t33);
    			append_dev(div10, t34);
    			append_dev(div10, a9);
    			append_dev(a9, t35);
    			append_dev(footer, t36);
    			append_dev(footer, button1);
    			append_dev(button1, svg3);
    			append_dev(svg3, path3);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a4, "click", prevent_default(/*click_handler*/ ctx[3]), false, true, false, false),
    					listen_dev(a5, "click", prevent_default(/*click_handler_1*/ ctx[4]), false, true, false, false),
    					listen_dev(a6, "click", prevent_default(/*click_handler_2*/ ctx[5]), false, true, false, false),
    					listen_dev(a7, "click", prevent_default(/*click_handler_3*/ ctx[6]), false, true, false, false),
    					listen_dev(a8, "click", prevent_default(/*click_handler_4*/ ctx[7]), false, true, false, false),
    					listen_dev(button0, "click", openGoogleMapsDirections$1, false, false, false, false),
    					listen_dev(a9, "click", prevent_default(/*click_handler_5*/ ctx[8]), false, true, false, false),
    					listen_dev(button1, "click", scrollToTop, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentLang*/ 4 && t1_value !== (t1_value = t('footer.visit', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*$currentLang*/ 4 && t3_value !== (t3_value = t('footer.address', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*$currentLang*/ 4 && t5_value !== (t5_value = t('footer.phone', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$currentLang*/ 4 && t8_value !== (t8_value = t('footer.phoneNumber', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t8, t8_value);
    			if (dirty & /*$currentLang*/ 4 && t10_value !== (t10_value = t('footer.email', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*$currentLang*/ 4 && t13_value !== (t13_value = t('footer.emailAddress', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t13, t13_value);
    			if (dirty & /*$currentLang*/ 4 && t17_value !== (t17_value = t('footer.links', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t17, t17_value);
    			if (dirty & /*$currentLang*/ 4 && t19_value !== (t19_value = t('nav.home', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t19, t19_value);
    			if (dirty & /*$currentLang*/ 4 && t21_value !== (t21_value = t('nav.booking', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t21, t21_value);
    			if (dirty & /*$currentLang*/ 4 && t23_value !== (t23_value = t('nav.about', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t23, t23_value);
    			if (dirty & /*$currentLang*/ 4 && t25_value !== (t25_value = t('nav.services', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t25, t25_value);
    			if (dirty & /*$currentLang*/ 4 && t27_value !== (t27_value = t('nav.contact', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t27, t27_value);

    			if (dirty & /*$currentLang*/ 4 && t30_value !== (t30_value = (/*$currentLang*/ ctx[2] === 'hu'
    			? 'Útvonaltervezés'
    			: 'Get Directions') + "")) set_data_dev(t30, t30_value);

    			if (dirty & /*$currentLang*/ 4 && t33_value !== (t33_value = t('footer.copyright', /*$currentLang*/ ctx[2]) + "")) set_data_dev(t33, t33_value);

    			if (dirty & /*$currentLang*/ 4 && t35_value !== (t35_value = (/*$currentLang*/ ctx[2] === 'hu'
    			? 'Adatvédelmi irányelvek'
    			: 'Privacy Policy') + "")) set_data_dev(t35, t35_value);

    			if (dirty & /*$currentLang*/ 4 && button1_aria_label_value !== (button1_aria_label_value = /*$currentLang*/ ctx[2] === 'hu'
    			? 'Vissza a tetejére'
    			: 'Back to top')) {
    				attr_dev(button1, "aria-label", button1_aria_label_value);
    			}

    			if (dirty & /*showBackToTop*/ 2) {
    				toggle_class(button1, "visible", /*showBackToTop*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(footer);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$n.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function scrollToTop() {
    	window.scrollTo({ top: 0, behavior: 'smooth' });
    }

    // Function to open Google Maps directions to Zima Auto
    function openGoogleMapsDirections$1() {
    	// Updated URL based on user feedback
    	window.open('https://www.google.com/maps/place/Zima+Auto+Airport+Parking+-+Aut%C3%B3szerv%C3%ADz+-+Gumiszerv%C3%ADz+-+K%C3%A9zi+aut%C3%B3mos%C3%B3/@47.4099403,19.2301139,17z/data=!3m1!4b1!4m6!3m5!1s0x4741c1ece824d30f:0x632898beef8d5983!8m2!3d47.4099403!4d19.2326888!16s%2Fg%2F11vyx0730g?entry=ttu&g_ep=EgoyMDI1MDQyMy4wIKXMDSoASAFQAw%3D%3D', '_blank');
    }

    function instance$n($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(2, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Footer', slots, []);
    	let { navigate } = $$props;
    	let lang;
    	let showBackToTop = false;

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	onMount(() => {
    		const handleScroll = () => {
    			$$invalidate(1, showBackToTop = window.scrollY > 300);
    		};

    		window.addEventListener('scroll', handleScroll);

    		return () => {
    			window.removeEventListener('scroll', handleScroll);
    		};
    	});

    	$$self.$$.on_mount.push(function () {
    		if (navigate === undefined && !('navigate' in $$props || $$self.$$.bound[$$self.$$.props['navigate']])) {
    			console.warn("<Footer> was created without expected prop 'navigate'");
    		}
    	});

    	const writable_props = ['navigate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Footer> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => navigate('home');
    	const click_handler_1 = () => navigate('booking');
    	const click_handler_2 = () => navigate('about');
    	const click_handler_3 = () => navigate('services');
    	const click_handler_4 = () => navigate('contact');
    	const click_handler_5 = () => navigate('privacy');

    	$$self.$$set = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    	};

    	$$self.$capture_state = () => ({
    		currentLang,
    		t,
    		onMount,
    		navigate,
    		lang,
    		showBackToTop,
    		scrollToTop,
    		openGoogleMapsDirections: openGoogleMapsDirections$1,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    		if ('lang' in $$props) lang = $$props.lang;
    		if ('showBackToTop' in $$props) $$invalidate(1, showBackToTop = $$props.showBackToTop);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		navigate,
    		showBackToTop,
    		$currentLang,
    		click_handler,
    		click_handler_1,
    		click_handler_2,
    		click_handler_3,
    		click_handler_4,
    		click_handler_5
    	];
    }

    class Footer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$n, create_fragment$n, safe_not_equal, { navigate: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Footer",
    			options,
    			id: create_fragment$n.name
    		});
    	}

    	get navigate() {
    		throw new Error("<Footer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigate(value) {
    		throw new Error("<Footer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function cubicOut(t) {
        const f = t - 1.0;
        return f * f * f + 1.0;
    }

    function fade(node, { delay = 0, duration = 400, easing = identity } = {}) {
        const o = +getComputedStyle(node).opacity;
        return {
            delay,
            duration,
            easing,
            css: t => `opacity: ${t * o}`
        };
    }
    function slide(node, { delay = 0, duration = 400, easing = cubicOut, axis = 'y' } = {}) {
        const style = getComputedStyle(node);
        const opacity = +style.opacity;
        const primary_property = axis === 'y' ? 'height' : 'width';
        const primary_property_value = parseFloat(style[primary_property]);
        const secondary_properties = axis === 'y' ? ['top', 'bottom'] : ['left', 'right'];
        const capitalized_secondary_properties = secondary_properties.map((e) => `${e[0].toUpperCase()}${e.slice(1)}`);
        const padding_start_value = parseFloat(style[`padding${capitalized_secondary_properties[0]}`]);
        const padding_end_value = parseFloat(style[`padding${capitalized_secondary_properties[1]}`]);
        const margin_start_value = parseFloat(style[`margin${capitalized_secondary_properties[0]}`]);
        const margin_end_value = parseFloat(style[`margin${capitalized_secondary_properties[1]}`]);
        const border_width_start_value = parseFloat(style[`border${capitalized_secondary_properties[0]}Width`]);
        const border_width_end_value = parseFloat(style[`border${capitalized_secondary_properties[1]}Width`]);
        return {
            delay,
            duration,
            easing,
            css: t => 'overflow: hidden;' +
                `opacity: ${Math.min(t * 20, 1) * opacity};` +
                `${primary_property}: ${t * primary_property_value}px;` +
                `padding-${secondary_properties[0]}: ${t * padding_start_value}px;` +
                `padding-${secondary_properties[1]}: ${t * padding_end_value}px;` +
                `margin-${secondary_properties[0]}: ${t * margin_start_value}px;` +
                `margin-${secondary_properties[1]}: ${t * margin_end_value}px;` +
                `border-${secondary_properties[0]}-width: ${t * border_width_start_value}px;` +
                `border-${secondary_properties[1]}-width: ${t * border_width_end_value}px;`
        };
    }
    function scale(node, { delay = 0, duration = 400, easing = cubicOut, start = 0, opacity = 0 } = {}) {
        const style = getComputedStyle(node);
        const target_opacity = +style.opacity;
        const transform = style.transform === 'none' ? '' : style.transform;
        const sd = 1 - start;
        const od = target_opacity * (1 - opacity);
        return {
            delay,
            duration,
            easing,
            css: (_t, u) => `
			transform: ${transform} scale(${1 - (sd * u)});
			opacity: ${target_opacity - (od * u)}
		`
        };
    }

    /* src/components/ServiceCard.svelte generated by Svelte v3.59.2 */
    const file$m = "src/components/ServiceCard.svelte";

    function create_fragment$m(ctx) {
    	let button;
    	let div0;
    	let t0;
    	let h3;
    	let t1;
    	let t2;
    	let p;
    	let t3;
    	let t4;
    	let div1;
    	let t5;
    	let div2;
    	let t6;
    	let div3;
    	let span;
    	let t7;
    	let t8;
    	let svg;
    	let path;
    	let button_class_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			button = element("button");
    			div0 = element("div");
    			t0 = space();
    			h3 = element("h3");
    			t1 = text(/*title*/ ctx[2]);
    			t2 = space();
    			p = element("p");
    			t3 = text(/*description*/ ctx[3]);
    			t4 = space();
    			div1 = element("div");
    			t5 = space();
    			div2 = element("div");
    			t6 = space();
    			div3 = element("div");
    			span = element("span");
    			t7 = text(/*ctaText*/ ctx[5]);
    			t8 = space();
    			svg = svg_element("svg");
    			path = svg_element("path");
    			attr_dev(div0, "class", "service-icon svelte-1xvzm4d");
    			add_location(div0, file$m, 40, 2, 836);
    			attr_dev(h3, "class", "svelte-1xvzm4d");
    			add_location(h3, file$m, 44, 2, 897);
    			attr_dev(p, "class", "svelte-1xvzm4d");
    			add_location(p, file$m, 45, 2, 916);
    			attr_dev(div1, "class", "service-overlay svelte-1xvzm4d");
    			set_style(div1, "background-image", "url('" + /*image*/ ctx[1] + "')");
    			add_location(div1, file$m, 47, 2, 942);
    			attr_dev(div2, "class", "gradient-overlay svelte-1xvzm4d");
    			add_location(div2, file$m, 48, 2, 1021);
    			add_location(span, file$m, 51, 4, 1093);
    			attr_dev(path, "d", "M5 12H19M19 12L12 5M19 12L12 19");
    			attr_dev(path, "stroke", "currentColor");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			add_location(path, file$m, 53, 6, 1222);
    			attr_dev(svg, "width", "16");
    			attr_dev(svg, "height", "16");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$m, 52, 4, 1120);
    			attr_dev(div3, "class", "card-action svelte-1xvzm4d");
    			add_location(div3, file$m, 50, 2, 1063);
    			attr_dev(button, "class", button_class_value = "service-card " + (/*isVisible*/ ctx[7] ? 'visible' : '') + " " + (/*isHovered*/ ctx[8] ? 'hovered' : '') + " svelte-1xvzm4d");
    			set_style(button, "transition-delay", 100 * /*index*/ ctx[4] + "ms");
    			add_location(button, file$m, 33, 0, 604);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, div0);
    			div0.innerHTML = /*svgIcon*/ ctx[0];
    			append_dev(button, t0);
    			append_dev(button, h3);
    			append_dev(h3, t1);
    			append_dev(button, t2);
    			append_dev(button, p);
    			append_dev(p, t3);
    			append_dev(button, t4);
    			append_dev(button, div1);
    			append_dev(button, t5);
    			append_dev(button, div2);
    			append_dev(button, t6);
    			append_dev(button, div3);
    			append_dev(div3, span);
    			append_dev(span, t7);
    			append_dev(div3, t8);
    			append_dev(div3, svg);
    			append_dev(svg, path);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "mouseenter", /*handleMouseEnter*/ ctx[9], false, false, false, false),
    					listen_dev(button, "mouseleave", /*handleMouseLeave*/ ctx[10], false, false, false, false),
    					listen_dev(
    						button,
    						"click",
    						function () {
    							if (is_function(/*ctaAction*/ ctx[6])) /*ctaAction*/ ctx[6].apply(this, arguments);
    						},
    						false,
    						false,
    						false,
    						false
    					)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if (dirty & /*svgIcon*/ 1) div0.innerHTML = /*svgIcon*/ ctx[0];			if (dirty & /*title*/ 4) set_data_dev(t1, /*title*/ ctx[2]);
    			if (dirty & /*description*/ 8) set_data_dev(t3, /*description*/ ctx[3]);

    			if (dirty & /*image*/ 2) {
    				set_style(div1, "background-image", "url('" + /*image*/ ctx[1] + "')");
    			}

    			if (dirty & /*ctaText*/ 32) set_data_dev(t7, /*ctaText*/ ctx[5]);

    			if (dirty & /*isVisible, isHovered*/ 384 && button_class_value !== (button_class_value = "service-card " + (/*isVisible*/ ctx[7] ? 'visible' : '') + " " + (/*isHovered*/ ctx[8] ? 'hovered' : '') + " svelte-1xvzm4d")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*index*/ 16) {
    				set_style(button, "transition-delay", 100 * /*index*/ ctx[4] + "ms");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$m.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$m($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ServiceCard', slots, []);
    	let { svgIcon } = $$props;
    	let { image } = $$props;
    	let { title } = $$props;
    	let { description } = $$props;
    	let { index = 0 } = $$props;
    	let { shouldAnimate = false } = $$props;
    	let { ctaText = 'Learn more' } = $$props;

    	let { ctaAction = () => {
    		
    	} } = $$props;

    	let isVisible = false;
    	let isHovered = false;

    	function handleMouseEnter() {
    		$$invalidate(8, isHovered = true);
    	}

    	function handleMouseLeave() {
    		$$invalidate(8, isHovered = false);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (svgIcon === undefined && !('svgIcon' in $$props || $$self.$$.bound[$$self.$$.props['svgIcon']])) {
    			console.warn("<ServiceCard> was created without expected prop 'svgIcon'");
    		}

    		if (image === undefined && !('image' in $$props || $$self.$$.bound[$$self.$$.props['image']])) {
    			console.warn("<ServiceCard> was created without expected prop 'image'");
    		}

    		if (title === undefined && !('title' in $$props || $$self.$$.bound[$$self.$$.props['title']])) {
    			console.warn("<ServiceCard> was created without expected prop 'title'");
    		}

    		if (description === undefined && !('description' in $$props || $$self.$$.bound[$$self.$$.props['description']])) {
    			console.warn("<ServiceCard> was created without expected prop 'description'");
    		}
    	});

    	const writable_props = [
    		'svgIcon',
    		'image',
    		'title',
    		'description',
    		'index',
    		'shouldAnimate',
    		'ctaText',
    		'ctaAction'
    	];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ServiceCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('svgIcon' in $$props) $$invalidate(0, svgIcon = $$props.svgIcon);
    		if ('image' in $$props) $$invalidate(1, image = $$props.image);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('description' in $$props) $$invalidate(3, description = $$props.description);
    		if ('index' in $$props) $$invalidate(4, index = $$props.index);
    		if ('shouldAnimate' in $$props) $$invalidate(11, shouldAnimate = $$props.shouldAnimate);
    		if ('ctaText' in $$props) $$invalidate(5, ctaText = $$props.ctaText);
    		if ('ctaAction' in $$props) $$invalidate(6, ctaAction = $$props.ctaAction);
    	};

    	$$self.$capture_state = () => ({
    		svgIcon,
    		image,
    		title,
    		description,
    		index,
    		shouldAnimate,
    		ctaText,
    		ctaAction,
    		onMount,
    		isVisible,
    		isHovered,
    		handleMouseEnter,
    		handleMouseLeave
    	});

    	$$self.$inject_state = $$props => {
    		if ('svgIcon' in $$props) $$invalidate(0, svgIcon = $$props.svgIcon);
    		if ('image' in $$props) $$invalidate(1, image = $$props.image);
    		if ('title' in $$props) $$invalidate(2, title = $$props.title);
    		if ('description' in $$props) $$invalidate(3, description = $$props.description);
    		if ('index' in $$props) $$invalidate(4, index = $$props.index);
    		if ('shouldAnimate' in $$props) $$invalidate(11, shouldAnimate = $$props.shouldAnimate);
    		if ('ctaText' in $$props) $$invalidate(5, ctaText = $$props.ctaText);
    		if ('ctaAction' in $$props) $$invalidate(6, ctaAction = $$props.ctaAction);
    		if ('isVisible' in $$props) $$invalidate(7, isVisible = $$props.isVisible);
    		if ('isHovered' in $$props) $$invalidate(8, isHovered = $$props.isHovered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*shouldAnimate, index*/ 2064) {
    			if (shouldAnimate) {
    				// Add a staggered delay based on the index
    				setTimeout(
    					() => {
    						$$invalidate(7, isVisible = true);
    					},
    					150 * index
    				);
    			}
    		}
    	};

    	return [
    		svgIcon,
    		image,
    		title,
    		description,
    		index,
    		ctaText,
    		ctaAction,
    		isVisible,
    		isHovered,
    		handleMouseEnter,
    		handleMouseLeave,
    		shouldAnimate
    	];
    }

    class ServiceCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$m, create_fragment$m, safe_not_equal, {
    			svgIcon: 0,
    			image: 1,
    			title: 2,
    			description: 3,
    			index: 4,
    			shouldAnimate: 11,
    			ctaText: 5,
    			ctaAction: 6
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ServiceCard",
    			options,
    			id: create_fragment$m.name
    		});
    	}

    	get svgIcon() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set svgIcon(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get image() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set image(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get title() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set title(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get description() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set description(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get shouldAnimate() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set shouldAnimate(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ctaText() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ctaText(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get ctaAction() {
    		throw new Error("<ServiceCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set ctaAction(value) {
    		throw new Error("<ServiceCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/TestimonialCard.svelte generated by Svelte v3.59.2 */
    const file$l = "src/components/TestimonialCard.svelte";

    // (44:8) {:else}
    function create_else_block$a(ctx) {
    	let div;
    	let t_value = /*name*/ ctx[0].charAt(0) + "";
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "author-initials svelte-1wtpenc");
    			add_location(div, file$l, 44, 10, 1857);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*name*/ 1 && t_value !== (t_value = /*name*/ ctx[0].charAt(0) + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$a.name,
    		type: "else",
    		source: "(44:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (42:8) {#if image}
    function create_if_block_1$d(ctx) {
    	let img;
    	let img_src_value;

    	const block = {
    		c: function create() {
    			img = element("img");
    			if (!src_url_equal(img.src, img_src_value = /*image*/ ctx[3])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", /*name*/ ctx[0]);
    			attr_dev(img, "class", "svelte-1wtpenc");
    			add_location(img, file$l, 42, 10, 1800);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, img, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*image*/ 8 && !src_url_equal(img.src, img_src_value = /*image*/ ctx[3])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (dirty & /*name*/ 1) {
    				attr_dev(img, "alt", /*name*/ ctx[0]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(img);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$d.name,
    		type: "if",
    		source: "(42:8) {#if image}",
    		ctx
    	});

    	return block;
    }

    // (50:8) {#if location}
    function create_if_block$h(ctx) {
    	let span;
    	let t;

    	const block = {
    		c: function create() {
    			span = element("span");
    			t = text(/*location*/ ctx[1]);
    			attr_dev(span, "class", "svelte-1wtpenc");
    			add_location(span, file$l, 50, 10, 2025);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    			append_dev(span, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*location*/ 2) set_data_dev(t, /*location*/ ctx[1]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$h.name,
    		type: "if",
    		source: "(50:8) {#if location}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$l(ctx) {
    	let div6;
    	let div0;
    	let t0;
    	let div1;
    	let svg;
    	let path;
    	let t1;
    	let div5;
    	let p;
    	let t2;
    	let t3;
    	let div4;
    	let div2;
    	let t4;
    	let div3;
    	let h4;
    	let t5;
    	let t6;
    	let div6_class_value;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*image*/ ctx[3]) return create_if_block_1$d;
    		return create_else_block$a;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*location*/ ctx[1] && create_if_block$h(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t1 = space();
    			div5 = element("div");
    			p = element("p");
    			t2 = text(/*text*/ ctx[2]);
    			t3 = space();
    			div4 = element("div");
    			div2 = element("div");
    			if_block0.c();
    			t4 = space();
    			div3 = element("div");
    			h4 = element("h4");
    			t5 = text(/*name*/ ctx[0]);
    			t6 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(div0, "class", "card-border svelte-1wtpenc");
    			add_location(div0, file$l, 29, 2, 559);
    			attr_dev(path, "d", "M11.928 36C8.208 36 5.184 34.704 2.856 32.112C0.952 29.52 0 26.352 0 22.608C0 16.8 2.38 11.664 7.14 7.2C11.9 2.4 17.612 0 24.276 0L26.18 6.768C21.42 7.104 17.374 8.4 14.042 10.656C10.71 12.576 8.856 15.12 8.58 18.288C9.964 17.28 11.69 16.776 13.766 16.776C16.65 16.776 19.058 17.76 20.994 19.728C22.93 21.648 23.898 24.144 23.898 27.216C23.898 30.288 22.93 32.784 20.994 34.704C19.058 35.568 15.904 36 11.928 36ZM30.03 36C26.31 36 23.286 34.704 20.958 32.112C19.054 29.52 18.102 26.352 18.102 22.608C18.102 16.8 20.482 11.664 25.242 7.2C30.002 2.4 35.714 0 42.378 0L44.282 6.768C39.522 7.104 35.476 8.4 32.144 10.656C28.812 12.576 26.958 15.12 26.682 18.288C28.066 17.28 29.792 16.776 31.868 16.776C34.752 16.776 37.16 17.76 39.096 19.728C41.032 21.648 42 24.144 42 27.216C42 30.288 41.032 32.784 39.096 34.704C37.16 35.568 34.006 36 30.03 36Z");
    			attr_dev(path, "fill", "currentColor");
    			add_location(path, file$l, 32, 6, 724);
    			attr_dev(svg, "width", "42");
    			attr_dev(svg, "height", "36");
    			attr_dev(svg, "viewBox", "0 0 42 36");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$l, 31, 4, 622);
    			attr_dev(div1, "class", "quote-icon svelte-1wtpenc");
    			add_location(div1, file$l, 30, 2, 593);
    			attr_dev(p, "class", "testimonial-text svelte-1wtpenc");
    			add_location(p, file$l, 37, 4, 1656);
    			attr_dev(div2, "class", "author-image svelte-1wtpenc");
    			add_location(div2, file$l, 40, 6, 1743);
    			attr_dev(h4, "class", "svelte-1wtpenc");
    			add_location(h4, file$l, 48, 8, 1976);
    			attr_dev(div3, "class", "author-info svelte-1wtpenc");
    			add_location(div3, file$l, 47, 6, 1942);
    			attr_dev(div4, "class", "testimonial-author svelte-1wtpenc");
    			add_location(div4, file$l, 39, 4, 1704);
    			attr_dev(div5, "class", "card-content svelte-1wtpenc");
    			add_location(div5, file$l, 36, 2, 1625);
    			attr_dev(div6, "class", div6_class_value = "testimonial-card " + (/*isVisible*/ ctx[5] ? 'visible' : '') + " " + (/*isHovered*/ ctx[6] ? 'hovered' : '') + " svelte-1wtpenc");
    			set_style(div6, "transition-delay", 150 * /*index*/ ctx[4] + "ms");
    			add_location(div6, file$l, 23, 0, 349);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div0);
    			append_dev(div6, t0);
    			append_dev(div6, div1);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div6, t1);
    			append_dev(div6, div5);
    			append_dev(div5, p);
    			append_dev(p, t2);
    			append_dev(div5, t3);
    			append_dev(div5, div4);
    			append_dev(div4, div2);
    			if_block0.m(div2, null);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, h4);
    			append_dev(h4, t5);
    			append_dev(div3, t6);
    			if (if_block1) if_block1.m(div3, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div6, "mouseenter", /*handleMouseEnter*/ ctx[7], false, false, false, false),
    					listen_dev(div6, "mouseleave", /*handleMouseLeave*/ ctx[8], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*text*/ 4) set_data_dev(t2, /*text*/ ctx[2]);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div2, null);
    				}
    			}

    			if (dirty & /*name*/ 1) set_data_dev(t5, /*name*/ ctx[0]);

    			if (/*location*/ ctx[1]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$h(ctx);
    					if_block1.c();
    					if_block1.m(div3, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*isVisible, isHovered*/ 96 && div6_class_value !== (div6_class_value = "testimonial-card " + (/*isVisible*/ ctx[5] ? 'visible' : '') + " " + (/*isHovered*/ ctx[6] ? 'hovered' : '') + " svelte-1wtpenc")) {
    				attr_dev(div6, "class", div6_class_value);
    			}

    			if (dirty & /*index*/ 16) {
    				set_style(div6, "transition-delay", 150 * /*index*/ ctx[4] + "ms");
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$l.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$l($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TestimonialCard', slots, []);
    	let { name } = $$props;
    	let { location } = $$props;
    	let { text } = $$props;
    	let { image } = $$props;
    	let { index = 0 } = $$props;
    	let { isVisible = false } = $$props;
    	let isHovered = false;

    	function handleMouseEnter() {
    		$$invalidate(6, isHovered = true);
    	}

    	function handleMouseLeave() {
    		$$invalidate(6, isHovered = false);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (name === undefined && !('name' in $$props || $$self.$$.bound[$$self.$$.props['name']])) {
    			console.warn("<TestimonialCard> was created without expected prop 'name'");
    		}

    		if (location === undefined && !('location' in $$props || $$self.$$.bound[$$self.$$.props['location']])) {
    			console.warn("<TestimonialCard> was created without expected prop 'location'");
    		}

    		if (text === undefined && !('text' in $$props || $$self.$$.bound[$$self.$$.props['text']])) {
    			console.warn("<TestimonialCard> was created without expected prop 'text'");
    		}

    		if (image === undefined && !('image' in $$props || $$self.$$.bound[$$self.$$.props['image']])) {
    			console.warn("<TestimonialCard> was created without expected prop 'image'");
    		}
    	});

    	const writable_props = ['name', 'location', 'text', 'image', 'index', 'isVisible'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<TestimonialCard> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('location' in $$props) $$invalidate(1, location = $$props.location);
    		if ('text' in $$props) $$invalidate(2, text = $$props.text);
    		if ('image' in $$props) $$invalidate(3, image = $$props.image);
    		if ('index' in $$props) $$invalidate(4, index = $$props.index);
    		if ('isVisible' in $$props) $$invalidate(5, isVisible = $$props.isVisible);
    	};

    	$$self.$capture_state = () => ({
    		name,
    		location,
    		text,
    		image,
    		index,
    		isVisible,
    		onMount,
    		isHovered,
    		handleMouseEnter,
    		handleMouseLeave
    	});

    	$$self.$inject_state = $$props => {
    		if ('name' in $$props) $$invalidate(0, name = $$props.name);
    		if ('location' in $$props) $$invalidate(1, location = $$props.location);
    		if ('text' in $$props) $$invalidate(2, text = $$props.text);
    		if ('image' in $$props) $$invalidate(3, image = $$props.image);
    		if ('index' in $$props) $$invalidate(4, index = $$props.index);
    		if ('isVisible' in $$props) $$invalidate(5, isVisible = $$props.isVisible);
    		if ('isHovered' in $$props) $$invalidate(6, isHovered = $$props.isHovered);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		name,
    		location,
    		text,
    		image,
    		index,
    		isVisible,
    		isHovered,
    		handleMouseEnter,
    		handleMouseLeave
    	];
    }

    class TestimonialCard extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$l, create_fragment$l, safe_not_equal, {
    			name: 0,
    			location: 1,
    			text: 2,
    			image: 3,
    			index: 4,
    			isVisible: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TestimonialCard",
    			options,
    			id: create_fragment$l.name
    		});
    	}

    	get name() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set name(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get location() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set location(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get text() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set text(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get image() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set image(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get index() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set index(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isVisible() {
    		throw new Error("<TestimonialCard>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set isVisible(value) {
    		throw new Error("<TestimonialCard>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

    function _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; subClass.__proto__ = superClass; }

    /*!
     * GSAP 3.12.7
     * https://gsap.com
     *
     * @license Copyright 2008-2025, GreenSock. All rights reserved.
     * Subject to the terms at https://gsap.com/standard-license or for
     * Club GSAP members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */

    /* eslint-disable */
    var _config = {
      autoSleep: 120,
      force3D: "auto",
      nullTargetWarn: 1,
      units: {
        lineHeight: ""
      }
    },
        _defaults$1 = {
      duration: .5,
      overwrite: false,
      delay: 0
    },
        _suppressOverwrites$1,
        _reverting$1,
        _context$2,
        _bigNum$1 = 1e8,
        _tinyNum = 1 / _bigNum$1,
        _2PI = Math.PI * 2,
        _HALF_PI = _2PI / 4,
        _gsID = 0,
        _sqrt = Math.sqrt,
        _cos = Math.cos,
        _sin = Math.sin,
        _isString$1 = function _isString(value) {
      return typeof value === "string";
    },
        _isFunction$1 = function _isFunction(value) {
      return typeof value === "function";
    },
        _isNumber$1 = function _isNumber(value) {
      return typeof value === "number";
    },
        _isUndefined = function _isUndefined(value) {
      return typeof value === "undefined";
    },
        _isObject$1 = function _isObject(value) {
      return typeof value === "object";
    },
        _isNotFalse = function _isNotFalse(value) {
      return value !== false;
    },
        _windowExists$2 = function _windowExists() {
      return typeof window !== "undefined";
    },
        _isFuncOrString = function _isFuncOrString(value) {
      return _isFunction$1(value) || _isString$1(value);
    },
        _isTypedArray = typeof ArrayBuffer === "function" && ArrayBuffer.isView || function () {},
        // note: IE10 has ArrayBuffer, but NOT ArrayBuffer.isView().
    _isArray = Array.isArray,
        _strictNumExp = /(?:-?\.?\d|\.)+/gi,
        //only numbers (including negatives and decimals) but NOT relative values.
    _numExp = /[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,
        //finds any numbers, including ones that start with += or -=, negative numbers, and ones in scientific notation like 1e-8.
    _numWithUnitExp = /[-+=.]*\d+[.e-]*\d*[a-z%]*/g,
        _complexStringNumExp = /[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,
        //duplicate so that while we're looping through matches from exec(), it doesn't contaminate the lastIndex of _numExp which we use to search for colors too.
    _relExp = /[+-]=-?[.\d]+/,
        _delimitedValueExp = /[^,'"\[\]\s]+/gi,
        // previously /[#\-+.]*\b[a-z\d\-=+%.]+/gi but didn't catch special characters.
    _unitExp = /^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,
        _globalTimeline,
        _win$3,
        _coreInitted$2,
        _doc$3,
        _globals = {},
        _installScope = {},
        _coreReady,
        _install = function _install(scope) {
      return (_installScope = _merge(scope, _globals)) && gsap$2;
    },
        _missingPlugin = function _missingPlugin(property, value) {
      return console.warn("Invalid property", property, "set to", value, "Missing plugin? gsap.registerPlugin()");
    },
        _warn = function _warn(message, suppress) {
      return !suppress && console.warn(message);
    },
        _addGlobal = function _addGlobal(name, obj) {
      return name && (_globals[name] = obj) && _installScope && (_installScope[name] = obj) || _globals;
    },
        _emptyFunc = function _emptyFunc() {
      return 0;
    },
        _startAtRevertConfig = {
      suppressEvents: true,
      isStart: true,
      kill: false
    },
        _revertConfigNoKill = {
      suppressEvents: true,
      kill: false
    },
        _revertConfig = {
      suppressEvents: true
    },
        _reservedProps = {},
        _lazyTweens = [],
        _lazyLookup = {},
        _lastRenderedFrame,
        _plugins = {},
        _effects = {},
        _nextGCFrame = 30,
        _harnessPlugins = [],
        _callbackNames = "",
        _harness = function _harness(targets) {
      var target = targets[0],
          harnessPlugin,
          i;
      _isObject$1(target) || _isFunction$1(target) || (targets = [targets]);

      if (!(harnessPlugin = (target._gsap || {}).harness)) {
        // find the first target with a harness. We assume targets passed into an animation will be of similar type, meaning the same kind of harness can be used for them all (performance optimization)
        i = _harnessPlugins.length;

        while (i-- && !_harnessPlugins[i].targetTest(target)) {}

        harnessPlugin = _harnessPlugins[i];
      }

      i = targets.length;

      while (i--) {
        targets[i] && (targets[i]._gsap || (targets[i]._gsap = new GSCache(targets[i], harnessPlugin))) || targets.splice(i, 1);
      }

      return targets;
    },
        _getCache = function _getCache(target) {
      return target._gsap || _harness(toArray(target))[0]._gsap;
    },
        _getProperty = function _getProperty(target, property, v) {
      return (v = target[property]) && _isFunction$1(v) ? target[property]() : _isUndefined(v) && target.getAttribute && target.getAttribute(property) || v;
    },
        _forEachName = function _forEachName(names, func) {
      return (names = names.split(",")).forEach(func) || names;
    },
        //split a comma-delimited list of names into an array, then run a forEach() function and return the split array (this is just a way to consolidate/shorten some code).
    _round$1 = function _round(value) {
      return Math.round(value * 100000) / 100000 || 0;
    },
        _roundPrecise = function _roundPrecise(value) {
      return Math.round(value * 10000000) / 10000000 || 0;
    },
        // increased precision mostly for timing values.
    _parseRelative = function _parseRelative(start, value) {
      var operator = value.charAt(0),
          end = parseFloat(value.substr(2));
      start = parseFloat(start);
      return operator === "+" ? start + end : operator === "-" ? start - end : operator === "*" ? start * end : start / end;
    },
        _arrayContainsAny = function _arrayContainsAny(toSearch, toFind) {
      //searches one array to find matches for any of the items in the toFind array. As soon as one is found, it returns true. It does NOT return all the matches; it's simply a boolean search.
      var l = toFind.length,
          i = 0;

      for (; toSearch.indexOf(toFind[i]) < 0 && ++i < l;) {}

      return i < l;
    },
        _lazyRender = function _lazyRender() {
      var l = _lazyTweens.length,
          a = _lazyTweens.slice(0),
          i,
          tween;

      _lazyLookup = {};
      _lazyTweens.length = 0;

      for (i = 0; i < l; i++) {
        tween = a[i];
        tween && tween._lazy && (tween.render(tween._lazy[0], tween._lazy[1], true)._lazy = 0);
      }
    },
        _lazySafeRender = function _lazySafeRender(animation, time, suppressEvents, force) {
      _lazyTweens.length && !_reverting$1 && _lazyRender();
      animation.render(time, suppressEvents, force || _reverting$1 && time < 0 && (animation._initted || animation._startAt));
      _lazyTweens.length && !_reverting$1 && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when someone calls seek() or time() or progress(), they expect an immediate render.
    },
        _numericIfPossible = function _numericIfPossible(value) {
      var n = parseFloat(value);
      return (n || n === 0) && (value + "").match(_delimitedValueExp).length < 2 ? n : _isString$1(value) ? value.trim() : value;
    },
        _passThrough$1 = function _passThrough(p) {
      return p;
    },
        _setDefaults$1 = function _setDefaults(obj, defaults) {
      for (var p in defaults) {
        p in obj || (obj[p] = defaults[p]);
      }

      return obj;
    },
        _setKeyframeDefaults = function _setKeyframeDefaults(excludeDuration) {
      return function (obj, defaults) {
        for (var p in defaults) {
          p in obj || p === "duration" && excludeDuration || p === "ease" || (obj[p] = defaults[p]);
        }
      };
    },
        _merge = function _merge(base, toMerge) {
      for (var p in toMerge) {
        base[p] = toMerge[p];
      }

      return base;
    },
        _mergeDeep = function _mergeDeep(base, toMerge) {
      for (var p in toMerge) {
        p !== "__proto__" && p !== "constructor" && p !== "prototype" && (base[p] = _isObject$1(toMerge[p]) ? _mergeDeep(base[p] || (base[p] = {}), toMerge[p]) : toMerge[p]);
      }

      return base;
    },
        _copyExcluding = function _copyExcluding(obj, excluding) {
      var copy = {},
          p;

      for (p in obj) {
        p in excluding || (copy[p] = obj[p]);
      }

      return copy;
    },
        _inheritDefaults = function _inheritDefaults(vars) {
      var parent = vars.parent || _globalTimeline,
          func = vars.keyframes ? _setKeyframeDefaults(_isArray(vars.keyframes)) : _setDefaults$1;

      if (_isNotFalse(vars.inherit)) {
        while (parent) {
          func(vars, parent.vars.defaults);
          parent = parent.parent || parent._dp;
        }
      }

      return vars;
    },
        _arraysMatch = function _arraysMatch(a1, a2) {
      var i = a1.length,
          match = i === a2.length;

      while (match && i-- && a1[i] === a2[i]) {}

      return i < 0;
    },
        _addLinkedListItem = function _addLinkedListItem(parent, child, firstProp, lastProp, sortBy) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }

      if (lastProp === void 0) {
        lastProp = "_last";
      }

      var prev = parent[lastProp],
          t;

      if (sortBy) {
        t = child[sortBy];

        while (prev && prev[sortBy] > t) {
          prev = prev._prev;
        }
      }

      if (prev) {
        child._next = prev._next;
        prev._next = child;
      } else {
        child._next = parent[firstProp];
        parent[firstProp] = child;
      }

      if (child._next) {
        child._next._prev = child;
      } else {
        parent[lastProp] = child;
      }

      child._prev = prev;
      child.parent = child._dp = parent;
      return child;
    },
        _removeLinkedListItem = function _removeLinkedListItem(parent, child, firstProp, lastProp) {
      if (firstProp === void 0) {
        firstProp = "_first";
      }

      if (lastProp === void 0) {
        lastProp = "_last";
      }

      var prev = child._prev,
          next = child._next;

      if (prev) {
        prev._next = next;
      } else if (parent[firstProp] === child) {
        parent[firstProp] = next;
      }

      if (next) {
        next._prev = prev;
      } else if (parent[lastProp] === child) {
        parent[lastProp] = prev;
      }

      child._next = child._prev = child.parent = null; // don't delete the _dp just so we can revert if necessary. But parent should be null to indicate the item isn't in a linked list.
    },
        _removeFromParent = function _removeFromParent(child, onlyIfParentHasAutoRemove) {
      child.parent && (!onlyIfParentHasAutoRemove || child.parent.autoRemoveChildren) && child.parent.remove && child.parent.remove(child);
      child._act = 0;
    },
        _uncache = function _uncache(animation, child) {
      if (animation && (!child || child._end > animation._dur || child._start < 0)) {
        // performance optimization: if a child animation is passed in we should only uncache if that child EXTENDS the animation (its end time is beyond the end)
        var a = animation;

        while (a) {
          a._dirty = 1;
          a = a.parent;
        }
      }

      return animation;
    },
        _recacheAncestors = function _recacheAncestors(animation) {
      var parent = animation.parent;

      while (parent && parent.parent) {
        //sometimes we must force a re-sort of all children and update the duration/totalDuration of all ancestor timelines immediately in case, for example, in the middle of a render loop, one tween alters another tween's timeScale which shoves its startTime before 0, forcing the parent timeline to shift around and shiftChildren() which could affect that next tween's render (startTime). Doesn't matter for the root timeline though.
        parent._dirty = 1;
        parent.totalDuration();
        parent = parent.parent;
      }

      return animation;
    },
        _rewindStartAt = function _rewindStartAt(tween, totalTime, suppressEvents, force) {
      return tween._startAt && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween.vars.immediateRender && !tween.vars.autoRevert || tween._startAt.render(totalTime, true, force));
    },
        _hasNoPausedAncestors = function _hasNoPausedAncestors(animation) {
      return !animation || animation._ts && _hasNoPausedAncestors(animation.parent);
    },
        _elapsedCycleDuration = function _elapsedCycleDuration(animation) {
      return animation._repeat ? _animationCycle(animation._tTime, animation = animation.duration() + animation._rDelay) * animation : 0;
    },
        // feed in the totalTime and cycleDuration and it'll return the cycle (iteration minus 1) and if the playhead is exactly at the very END, it will NOT bump up to the next cycle.
    _animationCycle = function _animationCycle(tTime, cycleDuration) {
      var whole = Math.floor(tTime = _roundPrecise(tTime / cycleDuration));
      return tTime && whole === tTime ? whole - 1 : whole;
    },
        _parentToChildTotalTime = function _parentToChildTotalTime(parentTime, child) {
      return (parentTime - child._start) * child._ts + (child._ts >= 0 ? 0 : child._dirty ? child.totalDuration() : child._tDur);
    },
        _setEnd = function _setEnd(animation) {
      return animation._end = _roundPrecise(animation._start + (animation._tDur / Math.abs(animation._ts || animation._rts || _tinyNum) || 0));
    },
        _alignPlayhead = function _alignPlayhead(animation, totalTime) {
      // adjusts the animation's _start and _end according to the provided totalTime (only if the parent's smoothChildTiming is true and the animation isn't paused). It doesn't do any rendering or forcing things back into parent timelines, etc. - that's what totalTime() is for.
      var parent = animation._dp;

      if (parent && parent.smoothChildTiming && animation._ts) {
        animation._start = _roundPrecise(parent._time - (animation._ts > 0 ? totalTime / animation._ts : ((animation._dirty ? animation.totalDuration() : animation._tDur) - totalTime) / -animation._ts));

        _setEnd(animation);

        parent._dirty || _uncache(parent, animation); //for performance improvement. If the parent's cache is already dirty, it already took care of marking the ancestors as dirty too, so skip the function call here.
      }

      return animation;
    },

    /*
    _totalTimeToTime = (clampedTotalTime, duration, repeat, repeatDelay, yoyo) => {
    	let cycleDuration = duration + repeatDelay,
    		time = _round(clampedTotalTime % cycleDuration);
    	if (time > duration) {
    		time = duration;
    	}
    	return (yoyo && (~~(clampedTotalTime / cycleDuration) & 1)) ? duration - time : time;
    },
    */
    _postAddChecks = function _postAddChecks(timeline, child) {
      var t;

      if (child._time || !child._dur && child._initted || child._start < timeline._time && (child._dur || !child.add)) {
        // in case, for example, the _start is moved on a tween that has already rendered, or if it's being inserted into a timeline BEFORE where the playhead is currently. Imagine it's at its end state, then the startTime is moved WAY later (after the end of this timeline), it should render at its beginning. Special case: if it's a timeline (has .add() method) and no duration, we can skip rendering because the user may be populating it AFTER adding it to a parent timeline (unconventional, but possible, and we wouldn't want it to get removed if the parent's autoRemoveChildren is true).
        t = _parentToChildTotalTime(timeline.rawTime(), child);

        if (!child._dur || _clamp$1(0, child.totalDuration(), t) - child._tTime > _tinyNum) {
          child.render(t, true);
        }
      } //if the timeline has already ended but the inserted tween/timeline extends the duration, we should enable this timeline again so that it renders properly. We should also align the playhead with the parent timeline's when appropriate.


      if (_uncache(timeline, child)._dp && timeline._initted && timeline._time >= timeline._dur && timeline._ts) {
        //in case any of the ancestors had completed but should now be enabled...
        if (timeline._dur < timeline.duration()) {
          t = timeline;

          while (t._dp) {
            t.rawTime() >= 0 && t.totalTime(t._tTime); //moves the timeline (shifts its startTime) if necessary, and also enables it. If it's currently zero, though, it may not be scheduled to render until later so there's no need to force it to align with the current playhead position. Only move to catch up with the playhead.

            t = t._dp;
          }
        }

        timeline._zTime = -_tinyNum; // helps ensure that the next render() will be forced (crossingStart = true in render()), even if the duration hasn't changed (we're adding a child which would need to get rendered). Definitely an edge case. Note: we MUST do this AFTER the loop above where the totalTime() might trigger a render() because this _addToTimeline() method gets called from the Animation constructor, BEFORE tweens even record their targets, etc. so we wouldn't want things to get triggered in the wrong order.
      }
    },
        _addToTimeline = function _addToTimeline(timeline, child, position, skipChecks) {
      child.parent && _removeFromParent(child);
      child._start = _roundPrecise((_isNumber$1(position) ? position : position || timeline !== _globalTimeline ? _parsePosition$1(timeline, position, child) : timeline._time) + child._delay);
      child._end = _roundPrecise(child._start + (child.totalDuration() / Math.abs(child.timeScale()) || 0));

      _addLinkedListItem(timeline, child, "_first", "_last", timeline._sort ? "_start" : 0);

      _isFromOrFromStart(child) || (timeline._recent = child);
      skipChecks || _postAddChecks(timeline, child);
      timeline._ts < 0 && _alignPlayhead(timeline, timeline._tTime); // if the timeline is reversed and the new child makes it longer, we may need to adjust the parent's _start (push it back)

      return timeline;
    },
        _scrollTrigger = function _scrollTrigger(animation, trigger) {
      return (_globals.ScrollTrigger || _missingPlugin("scrollTrigger", trigger)) && _globals.ScrollTrigger.create(trigger, animation);
    },
        _attemptInitTween = function _attemptInitTween(tween, time, force, suppressEvents, tTime) {
      _initTween(tween, time, tTime);

      if (!tween._initted) {
        return 1;
      }

      if (!force && tween._pt && !_reverting$1 && (tween._dur && tween.vars.lazy !== false || !tween._dur && tween.vars.lazy) && _lastRenderedFrame !== _ticker.frame) {
        _lazyTweens.push(tween);

        tween._lazy = [tTime, suppressEvents];
        return 1;
      }
    },
        _parentPlayheadIsBeforeStart = function _parentPlayheadIsBeforeStart(_ref) {
      var parent = _ref.parent;
      return parent && parent._ts && parent._initted && !parent._lock && (parent.rawTime() < 0 || _parentPlayheadIsBeforeStart(parent));
    },
        // check parent's _lock because when a timeline repeats/yoyos and does its artificial wrapping, we shouldn't force the ratio back to 0
    _isFromOrFromStart = function _isFromOrFromStart(_ref2) {
      var data = _ref2.data;
      return data === "isFromStart" || data === "isStart";
    },
        _renderZeroDurationTween = function _renderZeroDurationTween(tween, totalTime, suppressEvents, force) {
      var prevRatio = tween.ratio,
          ratio = totalTime < 0 || !totalTime && (!tween._start && _parentPlayheadIsBeforeStart(tween) && !(!tween._initted && _isFromOrFromStart(tween)) || (tween._ts < 0 || tween._dp._ts < 0) && !_isFromOrFromStart(tween)) ? 0 : 1,
          // if the tween or its parent is reversed and the totalTime is 0, we should go to a ratio of 0. Edge case: if a from() or fromTo() stagger tween is placed later in a timeline, the "startAt" zero-duration tween could initially render at a time when the parent timeline's playhead is technically BEFORE where this tween is, so make sure that any "from" and "fromTo" startAt tweens are rendered the first time at a ratio of 1.
      repeatDelay = tween._rDelay,
          tTime = 0,
          pt,
          iteration,
          prevIteration;

      if (repeatDelay && tween._repeat) {
        // in case there's a zero-duration tween that has a repeat with a repeatDelay
        tTime = _clamp$1(0, tween._tDur, totalTime);
        iteration = _animationCycle(tTime, repeatDelay);
        tween._yoyo && iteration & 1 && (ratio = 1 - ratio);

        if (iteration !== _animationCycle(tween._tTime, repeatDelay)) {
          // if iteration changed
          prevRatio = 1 - ratio;
          tween.vars.repeatRefresh && tween._initted && tween.invalidate();
        }
      }

      if (ratio !== prevRatio || _reverting$1 || force || tween._zTime === _tinyNum || !totalTime && tween._zTime) {
        if (!tween._initted && _attemptInitTween(tween, totalTime, force, suppressEvents, tTime)) {
          // if we render the very beginning (time == 0) of a fromTo(), we must force the render (normal tweens wouldn't need to render at a time of 0 when the prevTime was also 0). This is also mandatory to make sure overwriting kicks in immediately.
          return;
        }

        prevIteration = tween._zTime;
        tween._zTime = totalTime || (suppressEvents ? _tinyNum : 0); // when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration tween, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

        suppressEvents || (suppressEvents = totalTime && !prevIteration); // if it was rendered previously at exactly 0 (_zTime) and now the playhead is moving away, DON'T fire callbacks otherwise they'll seem like duplicates.

        tween.ratio = ratio;
        tween._from && (ratio = 1 - ratio);
        tween._time = 0;
        tween._tTime = tTime;
        pt = tween._pt;

        while (pt) {
          pt.r(ratio, pt.d);
          pt = pt._next;
        }

        totalTime < 0 && _rewindStartAt(tween, totalTime, suppressEvents, true);
        tween._onUpdate && !suppressEvents && _callback$1(tween, "onUpdate");
        tTime && tween._repeat && !suppressEvents && tween.parent && _callback$1(tween, "onRepeat");

        if ((totalTime >= tween._tDur || totalTime < 0) && tween.ratio === ratio) {
          ratio && _removeFromParent(tween, 1);

          if (!suppressEvents && !_reverting$1) {
            _callback$1(tween, ratio ? "onComplete" : "onReverseComplete", true);

            tween._prom && tween._prom();
          }
        }
      } else if (!tween._zTime) {
        tween._zTime = totalTime;
      }
    },
        _findNextPauseTween = function _findNextPauseTween(animation, prevTime, time) {
      var child;

      if (time > prevTime) {
        child = animation._first;

        while (child && child._start <= time) {
          if (child.data === "isPause" && child._start > prevTime) {
            return child;
          }

          child = child._next;
        }
      } else {
        child = animation._last;

        while (child && child._start >= time) {
          if (child.data === "isPause" && child._start < prevTime) {
            return child;
          }

          child = child._prev;
        }
      }
    },
        _setDuration = function _setDuration(animation, duration, skipUncache, leavePlayhead) {
      var repeat = animation._repeat,
          dur = _roundPrecise(duration) || 0,
          totalProgress = animation._tTime / animation._tDur;
      totalProgress && !leavePlayhead && (animation._time *= dur / animation._dur);
      animation._dur = dur;
      animation._tDur = !repeat ? dur : repeat < 0 ? 1e10 : _roundPrecise(dur * (repeat + 1) + animation._rDelay * repeat);
      totalProgress > 0 && !leavePlayhead && _alignPlayhead(animation, animation._tTime = animation._tDur * totalProgress);
      animation.parent && _setEnd(animation);
      skipUncache || _uncache(animation.parent, animation);
      return animation;
    },
        _onUpdateTotalDuration = function _onUpdateTotalDuration(animation) {
      return animation instanceof Timeline ? _uncache(animation) : _setDuration(animation, animation._dur);
    },
        _zeroPosition = {
      _start: 0,
      endTime: _emptyFunc,
      totalDuration: _emptyFunc
    },
        _parsePosition$1 = function _parsePosition(animation, position, percentAnimation) {
      var labels = animation.labels,
          recent = animation._recent || _zeroPosition,
          clippedDuration = animation.duration() >= _bigNum$1 ? recent.endTime(false) : animation._dur,
          //in case there's a child that infinitely repeats, users almost never intend for the insertion point of a new child to be based on a SUPER long value like that so we clip it and assume the most recently-added child's endTime should be used instead.
      i,
          offset,
          isPercent;

      if (_isString$1(position) && (isNaN(position) || position in labels)) {
        //if the string is a number like "1", check to see if there's a label with that name, otherwise interpret it as a number (absolute value).
        offset = position.charAt(0);
        isPercent = position.substr(-1) === "%";
        i = position.indexOf("=");

        if (offset === "<" || offset === ">") {
          i >= 0 && (position = position.replace(/=/, ""));
          return (offset === "<" ? recent._start : recent.endTime(recent._repeat >= 0)) + (parseFloat(position.substr(1)) || 0) * (isPercent ? (i < 0 ? recent : percentAnimation).totalDuration() / 100 : 1);
        }

        if (i < 0) {
          position in labels || (labels[position] = clippedDuration);
          return labels[position];
        }

        offset = parseFloat(position.charAt(i - 1) + position.substr(i + 1));

        if (isPercent && percentAnimation) {
          offset = offset / 100 * (_isArray(percentAnimation) ? percentAnimation[0] : percentAnimation).totalDuration();
        }

        return i > 1 ? _parsePosition(animation, position.substr(0, i - 1), percentAnimation) + offset : clippedDuration + offset;
      }

      return position == null ? clippedDuration : +position;
    },
        _createTweenType = function _createTweenType(type, params, timeline) {
      var isLegacy = _isNumber$1(params[1]),
          varsIndex = (isLegacy ? 2 : 1) + (type < 2 ? 0 : 1),
          vars = params[varsIndex],
          irVars,
          parent;

      isLegacy && (vars.duration = params[1]);
      vars.parent = timeline;

      if (type) {
        irVars = vars;
        parent = timeline;

        while (parent && !("immediateRender" in irVars)) {
          // inheritance hasn't happened yet, but someone may have set a default in an ancestor timeline. We could do vars.immediateRender = _isNotFalse(_inheritDefaults(vars).immediateRender) but that'd exact a slight performance penalty because _inheritDefaults() also runs in the Tween constructor. We're paying a small kb price here to gain speed.
          irVars = parent.vars.defaults || {};
          parent = _isNotFalse(parent.vars.inherit) && parent.parent;
        }

        vars.immediateRender = _isNotFalse(irVars.immediateRender);
        type < 2 ? vars.runBackwards = 1 : vars.startAt = params[varsIndex - 1]; // "from" vars
      }

      return new Tween(params[0], vars, params[varsIndex + 1]);
    },
        _conditionalReturn = function _conditionalReturn(value, func) {
      return value || value === 0 ? func(value) : func;
    },
        _clamp$1 = function _clamp(min, max, value) {
      return value < min ? min : value > max ? max : value;
    },
        getUnit = function getUnit(value, v) {
      return !_isString$1(value) || !(v = _unitExp.exec(value)) ? "" : v[1];
    },
        // note: protect against padded numbers as strings, like "100.100". That shouldn't return "00" as the unit. If it's numeric, return no unit.
    clamp = function clamp(min, max, value) {
      return _conditionalReturn(value, function (v) {
        return _clamp$1(min, max, v);
      });
    },
        _slice = [].slice,
        _isArrayLike = function _isArrayLike(value, nonEmpty) {
      return value && _isObject$1(value) && "length" in value && (!nonEmpty && !value.length || value.length - 1 in value && _isObject$1(value[0])) && !value.nodeType && value !== _win$3;
    },
        _flatten = function _flatten(ar, leaveStrings, accumulator) {
      if (accumulator === void 0) {
        accumulator = [];
      }

      return ar.forEach(function (value) {
        var _accumulator;

        return _isString$1(value) && !leaveStrings || _isArrayLike(value, 1) ? (_accumulator = accumulator).push.apply(_accumulator, toArray(value)) : accumulator.push(value);
      }) || accumulator;
    },
        //takes any value and returns an array. If it's a string (and leaveStrings isn't true), it'll use document.querySelectorAll() and convert that to an array. It'll also accept iterables like jQuery objects.
    toArray = function toArray(value, scope, leaveStrings) {
      return _context$2 && !scope && _context$2.selector ? _context$2.selector(value) : _isString$1(value) && !leaveStrings && (_coreInitted$2 || !_wake()) ? _slice.call((scope || _doc$3).querySelectorAll(value), 0) : _isArray(value) ? _flatten(value, leaveStrings) : _isArrayLike(value) ? _slice.call(value, 0) : value ? [value] : [];
    },
        selector = function selector(value) {
      value = toArray(value)[0] || _warn("Invalid scope") || {};
      return function (v) {
        var el = value.current || value.nativeElement || value;
        return toArray(v, el.querySelectorAll ? el : el === value ? _warn("Invalid scope") || _doc$3.createElement("div") : value);
      };
    },
        shuffle = function shuffle(a) {
      return a.sort(function () {
        return .5 - Math.random();
      });
    },
        // alternative that's a bit faster and more reliably diverse but bigger:   for (let j, v, i = a.length; i; j = (Math.random() * i) | 0, v = a[--i], a[i] = a[j], a[j] = v); return a;
    //for distributing values across an array. Can accept a number, a function or (most commonly) a function which can contain the following properties: {base, amount, from, ease, grid, axis, length, each}. Returns a function that expects the following parameters: index, target, array. Recognizes the following
    distribute = function distribute(v) {
      if (_isFunction$1(v)) {
        return v;
      }

      var vars = _isObject$1(v) ? v : {
        each: v
      },
          //n:1 is just to indicate v was a number; we leverage that later to set v according to the length we get. If a number is passed in, we treat it like the old stagger value where 0.1, for example, would mean that things would be distributed with 0.1 between each element in the array rather than a total "amount" that's chunked out among them all.
      ease = _parseEase(vars.ease),
          from = vars.from || 0,
          base = parseFloat(vars.base) || 0,
          cache = {},
          isDecimal = from > 0 && from < 1,
          ratios = isNaN(from) || isDecimal,
          axis = vars.axis,
          ratioX = from,
          ratioY = from;

      if (_isString$1(from)) {
        ratioX = ratioY = {
          center: .5,
          edges: .5,
          end: 1
        }[from] || 0;
      } else if (!isDecimal && ratios) {
        ratioX = from[0];
        ratioY = from[1];
      }

      return function (i, target, a) {
        var l = (a || vars).length,
            distances = cache[l],
            originX,
            originY,
            x,
            y,
            d,
            j,
            max,
            min,
            wrapAt;

        if (!distances) {
          wrapAt = vars.grid === "auto" ? 0 : (vars.grid || [1, _bigNum$1])[1];

          if (!wrapAt) {
            max = -_bigNum$1;

            while (max < (max = a[wrapAt++].getBoundingClientRect().left) && wrapAt < l) {}

            wrapAt < l && wrapAt--;
          }

          distances = cache[l] = [];
          originX = ratios ? Math.min(wrapAt, l) * ratioX - .5 : from % wrapAt;
          originY = wrapAt === _bigNum$1 ? 0 : ratios ? l * ratioY / wrapAt - .5 : from / wrapAt | 0;
          max = 0;
          min = _bigNum$1;

          for (j = 0; j < l; j++) {
            x = j % wrapAt - originX;
            y = originY - (j / wrapAt | 0);
            distances[j] = d = !axis ? _sqrt(x * x + y * y) : Math.abs(axis === "y" ? y : x);
            d > max && (max = d);
            d < min && (min = d);
          }

          from === "random" && shuffle(distances);
          distances.max = max - min;
          distances.min = min;
          distances.v = l = (parseFloat(vars.amount) || parseFloat(vars.each) * (wrapAt > l ? l - 1 : !axis ? Math.max(wrapAt, l / wrapAt) : axis === "y" ? l / wrapAt : wrapAt) || 0) * (from === "edges" ? -1 : 1);
          distances.b = l < 0 ? base - l : base;
          distances.u = getUnit(vars.amount || vars.each) || 0; //unit

          ease = ease && l < 0 ? _invertEase(ease) : ease;
        }

        l = (distances[i] - distances.min) / distances.max || 0;
        return _roundPrecise(distances.b + (ease ? ease(l) : l) * distances.v) + distances.u; //round in order to work around floating point errors
      };
    },
        _roundModifier = function _roundModifier(v) {
      //pass in 0.1 get a function that'll round to the nearest tenth, or 5 to round to the closest 5, or 0.001 to the closest 1000th, etc.
      var p = Math.pow(10, ((v + "").split(".")[1] || "").length); //to avoid floating point math errors (like 24 * 0.1 == 2.4000000000000004), we chop off at a specific number of decimal places (much faster than toFixed())

      return function (raw) {
        var n = _roundPrecise(Math.round(parseFloat(raw) / v) * v * p);

        return (n - n % 1) / p + (_isNumber$1(raw) ? 0 : getUnit(raw)); // n - n % 1 replaces Math.floor() in order to handle negative values properly. For example, Math.floor(-150.00000000000003) is 151!
      };
    },
        snap = function snap(snapTo, value) {
      var isArray = _isArray(snapTo),
          radius,
          is2D;

      if (!isArray && _isObject$1(snapTo)) {
        radius = isArray = snapTo.radius || _bigNum$1;

        if (snapTo.values) {
          snapTo = toArray(snapTo.values);

          if (is2D = !_isNumber$1(snapTo[0])) {
            radius *= radius; //performance optimization so we don't have to Math.sqrt() in the loop.
          }
        } else {
          snapTo = _roundModifier(snapTo.increment);
        }
      }

      return _conditionalReturn(value, !isArray ? _roundModifier(snapTo) : _isFunction$1(snapTo) ? function (raw) {
        is2D = snapTo(raw);
        return Math.abs(is2D - raw) <= radius ? is2D : raw;
      } : function (raw) {
        var x = parseFloat(is2D ? raw.x : raw),
            y = parseFloat(is2D ? raw.y : 0),
            min = _bigNum$1,
            closest = 0,
            i = snapTo.length,
            dx,
            dy;

        while (i--) {
          if (is2D) {
            dx = snapTo[i].x - x;
            dy = snapTo[i].y - y;
            dx = dx * dx + dy * dy;
          } else {
            dx = Math.abs(snapTo[i] - x);
          }

          if (dx < min) {
            min = dx;
            closest = i;
          }
        }

        closest = !radius || min <= radius ? snapTo[closest] : raw;
        return is2D || closest === raw || _isNumber$1(raw) ? closest : closest + getUnit(raw);
      });
    },
        random = function random(min, max, roundingIncrement, returnFunction) {
      return _conditionalReturn(_isArray(min) ? !max : roundingIncrement === true ? !!(roundingIncrement = 0) : !returnFunction, function () {
        return _isArray(min) ? min[~~(Math.random() * min.length)] : (roundingIncrement = roundingIncrement || 1e-5) && (returnFunction = roundingIncrement < 1 ? Math.pow(10, (roundingIncrement + "").length - 2) : 1) && Math.floor(Math.round((min - roundingIncrement / 2 + Math.random() * (max - min + roundingIncrement * .99)) / roundingIncrement) * roundingIncrement * returnFunction) / returnFunction;
      });
    },
        pipe = function pipe() {
      for (var _len = arguments.length, functions = new Array(_len), _key = 0; _key < _len; _key++) {
        functions[_key] = arguments[_key];
      }

      return function (value) {
        return functions.reduce(function (v, f) {
          return f(v);
        }, value);
      };
    },
        unitize = function unitize(func, unit) {
      return function (value) {
        return func(parseFloat(value)) + (unit || getUnit(value));
      };
    },
        normalize = function normalize(min, max, value) {
      return mapRange(min, max, 0, 1, value);
    },
        _wrapArray = function _wrapArray(a, wrapper, value) {
      return _conditionalReturn(value, function (index) {
        return a[~~wrapper(index)];
      });
    },
        wrap = function wrap(min, max, value) {
      // NOTE: wrap() CANNOT be an arrow function! A very odd compiling bug causes problems (unrelated to GSAP).
      var range = max - min;
      return _isArray(min) ? _wrapArray(min, wrap(0, min.length), max) : _conditionalReturn(value, function (value) {
        return (range + (value - min) % range) % range + min;
      });
    },
        wrapYoyo = function wrapYoyo(min, max, value) {
      var range = max - min,
          total = range * 2;
      return _isArray(min) ? _wrapArray(min, wrapYoyo(0, min.length - 1), max) : _conditionalReturn(value, function (value) {
        value = (total + (value - min) % total) % total || 0;
        return min + (value > range ? total - value : value);
      });
    },
        _replaceRandom = function _replaceRandom(value) {
      //replaces all occurrences of random(...) in a string with the calculated random value. can be a range like random(-100, 100, 5) or an array like random([0, 100, 500])
      var prev = 0,
          s = "",
          i,
          nums,
          end,
          isArray;

      while (~(i = value.indexOf("random(", prev))) {
        end = value.indexOf(")", i);
        isArray = value.charAt(i + 7) === "[";
        nums = value.substr(i + 7, end - i - 7).match(isArray ? _delimitedValueExp : _strictNumExp);
        s += value.substr(prev, i - prev) + random(isArray ? nums : +nums[0], isArray ? 0 : +nums[1], +nums[2] || 1e-5);
        prev = end + 1;
      }

      return s + value.substr(prev, value.length - prev);
    },
        mapRange = function mapRange(inMin, inMax, outMin, outMax, value) {
      var inRange = inMax - inMin,
          outRange = outMax - outMin;
      return _conditionalReturn(value, function (value) {
        return outMin + ((value - inMin) / inRange * outRange || 0);
      });
    },
        interpolate = function interpolate(start, end, progress, mutate) {
      var func = isNaN(start + end) ? 0 : function (p) {
        return (1 - p) * start + p * end;
      };

      if (!func) {
        var isString = _isString$1(start),
            master = {},
            p,
            i,
            interpolators,
            l,
            il;

        progress === true && (mutate = 1) && (progress = null);

        if (isString) {
          start = {
            p: start
          };
          end = {
            p: end
          };
        } else if (_isArray(start) && !_isArray(end)) {
          interpolators = [];
          l = start.length;
          il = l - 2;

          for (i = 1; i < l; i++) {
            interpolators.push(interpolate(start[i - 1], start[i])); //build the interpolators up front as a performance optimization so that when the function is called many times, it can just reuse them.
          }

          l--;

          func = function func(p) {
            p *= l;
            var i = Math.min(il, ~~p);
            return interpolators[i](p - i);
          };

          progress = end;
        } else if (!mutate) {
          start = _merge(_isArray(start) ? [] : {}, start);
        }

        if (!interpolators) {
          for (p in end) {
            _addPropTween.call(master, start, p, "get", end[p]);
          }

          func = function func(p) {
            return _renderPropTweens(p, master) || (isString ? start.p : start);
          };
        }
      }

      return _conditionalReturn(progress, func);
    },
        _getLabelInDirection = function _getLabelInDirection(timeline, fromTime, backward) {
      //used for nextLabel() and previousLabel()
      var labels = timeline.labels,
          min = _bigNum$1,
          p,
          distance,
          label;

      for (p in labels) {
        distance = labels[p] - fromTime;

        if (distance < 0 === !!backward && distance && min > (distance = Math.abs(distance))) {
          label = p;
          min = distance;
        }
      }

      return label;
    },
        _callback$1 = function _callback(animation, type, executeLazyFirst) {
      var v = animation.vars,
          callback = v[type],
          prevContext = _context$2,
          context = animation._ctx,
          params,
          scope,
          result;

      if (!callback) {
        return;
      }

      params = v[type + "Params"];
      scope = v.callbackScope || animation;
      executeLazyFirst && _lazyTweens.length && _lazyRender(); //in case rendering caused any tweens to lazy-init, we should render them because typically when a timeline finishes, users expect things to have rendered fully. Imagine an onUpdate on a timeline that reports/checks tweened values.

      context && (_context$2 = context);
      result = params ? callback.apply(scope, params) : callback.call(scope);
      _context$2 = prevContext;
      return result;
    },
        _interrupt = function _interrupt(animation) {
      _removeFromParent(animation);

      animation.scrollTrigger && animation.scrollTrigger.kill(!!_reverting$1);
      animation.progress() < 1 && _callback$1(animation, "onInterrupt");
      return animation;
    },
        _quickTween,
        _registerPluginQueue = [],
        _createPlugin = function _createPlugin(config) {
      if (!config) return;
      config = !config.name && config["default"] || config; // UMD packaging wraps things oddly, so for example MotionPathHelper becomes {MotionPathHelper:MotionPathHelper, default:MotionPathHelper}.

      if (_windowExists$2() || config.headless) {
        // edge case: some build tools may pass in a null/undefined value
        var name = config.name,
            isFunc = _isFunction$1(config),
            Plugin = name && !isFunc && config.init ? function () {
          this._props = [];
        } : config,
            //in case someone passes in an object that's not a plugin, like CustomEase
        instanceDefaults = {
          init: _emptyFunc,
          render: _renderPropTweens,
          add: _addPropTween,
          kill: _killPropTweensOf,
          modifier: _addPluginModifier,
          rawVars: 0
        },
            statics = {
          targetTest: 0,
          get: 0,
          getSetter: _getSetter,
          aliases: {},
          register: 0
        };

        _wake();

        if (config !== Plugin) {
          if (_plugins[name]) {
            return;
          }

          _setDefaults$1(Plugin, _setDefaults$1(_copyExcluding(config, instanceDefaults), statics)); //static methods


          _merge(Plugin.prototype, _merge(instanceDefaults, _copyExcluding(config, statics))); //instance methods


          _plugins[Plugin.prop = name] = Plugin;

          if (config.targetTest) {
            _harnessPlugins.push(Plugin);

            _reservedProps[name] = 1;
          }

          name = (name === "css" ? "CSS" : name.charAt(0).toUpperCase() + name.substr(1)) + "Plugin"; //for the global name. "motionPath" should become MotionPathPlugin
        }

        _addGlobal(name, Plugin);

        config.register && config.register(gsap$2, Plugin, PropTween);
      } else {
        _registerPluginQueue.push(config);
      }
    },

    /*
     * --------------------------------------------------------------------------------------
     * COLORS
     * --------------------------------------------------------------------------------------
     */
    _255 = 255,
        _colorLookup = {
      aqua: [0, _255, _255],
      lime: [0, _255, 0],
      silver: [192, 192, 192],
      black: [0, 0, 0],
      maroon: [128, 0, 0],
      teal: [0, 128, 128],
      blue: [0, 0, _255],
      navy: [0, 0, 128],
      white: [_255, _255, _255],
      olive: [128, 128, 0],
      yellow: [_255, _255, 0],
      orange: [_255, 165, 0],
      gray: [128, 128, 128],
      purple: [128, 0, 128],
      green: [0, 128, 0],
      red: [_255, 0, 0],
      pink: [_255, 192, 203],
      cyan: [0, _255, _255],
      transparent: [_255, _255, _255, 0]
    },
        // possible future idea to replace the hard-coded color name values - put this in the ticker.wake() where we set the _doc:
    // let ctx = _doc.createElement("canvas").getContext("2d");
    // _forEachName("aqua,lime,silver,black,maroon,teal,blue,navy,white,olive,yellow,orange,gray,purple,green,red,pink,cyan", color => {ctx.fillStyle = color; _colorLookup[color] = splitColor(ctx.fillStyle)});
    _hue = function _hue(h, m1, m2) {
      h += h < 0 ? 1 : h > 1 ? -1 : 0;
      return (h * 6 < 1 ? m1 + (m2 - m1) * h * 6 : h < .5 ? m2 : h * 3 < 2 ? m1 + (m2 - m1) * (2 / 3 - h) * 6 : m1) * _255 + .5 | 0;
    },
        splitColor = function splitColor(v, toHSL, forceAlpha) {
      var a = !v ? _colorLookup.black : _isNumber$1(v) ? [v >> 16, v >> 8 & _255, v & _255] : 0,
          r,
          g,
          b,
          h,
          s,
          l,
          max,
          min,
          d,
          wasHSL;

      if (!a) {
        if (v.substr(-1) === ",") {
          //sometimes a trailing comma is included and we should chop it off (typically from a comma-delimited list of values like a textShadow:"2px 2px 2px blue, 5px 5px 5px rgb(255,0,0)" - in this example "blue," has a trailing comma. We could strip it out inside parseComplex() but we'd need to do it to the beginning and ending values plus it wouldn't provide protection from other potential scenarios like if the user passes in a similar value.
          v = v.substr(0, v.length - 1);
        }

        if (_colorLookup[v]) {
          a = _colorLookup[v];
        } else if (v.charAt(0) === "#") {
          if (v.length < 6) {
            //for shorthand like #9F0 or #9F0F (could have alpha)
            r = v.charAt(1);
            g = v.charAt(2);
            b = v.charAt(3);
            v = "#" + r + r + g + g + b + b + (v.length === 5 ? v.charAt(4) + v.charAt(4) : "");
          }

          if (v.length === 9) {
            // hex with alpha, like #fd5e53ff
            a = parseInt(v.substr(1, 6), 16);
            return [a >> 16, a >> 8 & _255, a & _255, parseInt(v.substr(7), 16) / 255];
          }

          v = parseInt(v.substr(1), 16);
          a = [v >> 16, v >> 8 & _255, v & _255];
        } else if (v.substr(0, 3) === "hsl") {
          a = wasHSL = v.match(_strictNumExp);

          if (!toHSL) {
            h = +a[0] % 360 / 360;
            s = +a[1] / 100;
            l = +a[2] / 100;
            g = l <= .5 ? l * (s + 1) : l + s - l * s;
            r = l * 2 - g;
            a.length > 3 && (a[3] *= 1); //cast as number

            a[0] = _hue(h + 1 / 3, r, g);
            a[1] = _hue(h, r, g);
            a[2] = _hue(h - 1 / 3, r, g);
          } else if (~v.indexOf("=")) {
            //if relative values are found, just return the raw strings with the relative prefixes in place.
            a = v.match(_numExp);
            forceAlpha && a.length < 4 && (a[3] = 1);
            return a;
          }
        } else {
          a = v.match(_strictNumExp) || _colorLookup.transparent;
        }

        a = a.map(Number);
      }

      if (toHSL && !wasHSL) {
        r = a[0] / _255;
        g = a[1] / _255;
        b = a[2] / _255;
        max = Math.max(r, g, b);
        min = Math.min(r, g, b);
        l = (max + min) / 2;

        if (max === min) {
          h = s = 0;
        } else {
          d = max - min;
          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
          h = max === r ? (g - b) / d + (g < b ? 6 : 0) : max === g ? (b - r) / d + 2 : (r - g) / d + 4;
          h *= 60;
        }

        a[0] = ~~(h + .5);
        a[1] = ~~(s * 100 + .5);
        a[2] = ~~(l * 100 + .5);
      }

      forceAlpha && a.length < 4 && (a[3] = 1);
      return a;
    },
        _colorOrderData = function _colorOrderData(v) {
      // strips out the colors from the string, finds all the numeric slots (with units) and returns an array of those. The Array also has a "c" property which is an Array of the index values where the colors belong. This is to help work around issues where there's a mis-matched order of color/numeric data like drop-shadow(#f00 0px 1px 2px) and drop-shadow(0x 1px 2px #f00). This is basically a helper function used in _formatColors()
      var values = [],
          c = [],
          i = -1;
      v.split(_colorExp).forEach(function (v) {
        var a = v.match(_numWithUnitExp) || [];
        values.push.apply(values, a);
        c.push(i += a.length + 1);
      });
      values.c = c;
      return values;
    },
        _formatColors = function _formatColors(s, toHSL, orderMatchData) {
      var result = "",
          colors = (s + result).match(_colorExp),
          type = toHSL ? "hsla(" : "rgba(",
          i = 0,
          c,
          shell,
          d,
          l;

      if (!colors) {
        return s;
      }

      colors = colors.map(function (color) {
        return (color = splitColor(color, toHSL, 1)) && type + (toHSL ? color[0] + "," + color[1] + "%," + color[2] + "%," + color[3] : color.join(",")) + ")";
      });

      if (orderMatchData) {
        d = _colorOrderData(s);
        c = orderMatchData.c;

        if (c.join(result) !== d.c.join(result)) {
          shell = s.replace(_colorExp, "1").split(_numWithUnitExp);
          l = shell.length - 1;

          for (; i < l; i++) {
            result += shell[i] + (~c.indexOf(i) ? colors.shift() || type + "0,0,0,0)" : (d.length ? d : colors.length ? colors : orderMatchData).shift());
          }
        }
      }

      if (!shell) {
        shell = s.split(_colorExp);
        l = shell.length - 1;

        for (; i < l; i++) {
          result += shell[i] + colors[i];
        }
      }

      return result + shell[l];
    },
        _colorExp = function () {
      var s = "(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b",
          //we'll dynamically build this Regular Expression to conserve file size. After building it, it will be able to find rgb(), rgba(), # (hexadecimal), and named color values like red, blue, purple, etc.,
      p;

      for (p in _colorLookup) {
        s += "|" + p + "\\b";
      }

      return new RegExp(s + ")", "gi");
    }(),
        _hslExp = /hsl[a]?\(/,
        _colorStringFilter = function _colorStringFilter(a) {
      var combined = a.join(" "),
          toHSL;
      _colorExp.lastIndex = 0;

      if (_colorExp.test(combined)) {
        toHSL = _hslExp.test(combined);
        a[1] = _formatColors(a[1], toHSL);
        a[0] = _formatColors(a[0], toHSL, _colorOrderData(a[1])); // make sure the order of numbers/colors match with the END value.

        return true;
      }
    },

    /*
     * --------------------------------------------------------------------------------------
     * TICKER
     * --------------------------------------------------------------------------------------
     */
    _tickerActive,
        _ticker = function () {
      var _getTime = Date.now,
          _lagThreshold = 500,
          _adjustedLag = 33,
          _startTime = _getTime(),
          _lastUpdate = _startTime,
          _gap = 1000 / 240,
          _nextTime = _gap,
          _listeners = [],
          _id,
          _req,
          _raf,
          _self,
          _delta,
          _i,
          _tick = function _tick(v) {
        var elapsed = _getTime() - _lastUpdate,
            manual = v === true,
            overlap,
            dispatch,
            time,
            frame;

        (elapsed > _lagThreshold || elapsed < 0) && (_startTime += elapsed - _adjustedLag);
        _lastUpdate += elapsed;
        time = _lastUpdate - _startTime;
        overlap = time - _nextTime;

        if (overlap > 0 || manual) {
          frame = ++_self.frame;
          _delta = time - _self.time * 1000;
          _self.time = time = time / 1000;
          _nextTime += overlap + (overlap >= _gap ? 4 : _gap - overlap);
          dispatch = 1;
        }

        manual || (_id = _req(_tick)); //make sure the request is made before we dispatch the "tick" event so that timing is maintained. Otherwise, if processing the "tick" requires a bunch of time (like 15ms) and we're using a setTimeout() that's based on 16.7ms, it'd technically take 31.7ms between frames otherwise.

        if (dispatch) {
          for (_i = 0; _i < _listeners.length; _i++) {
            // use _i and check _listeners.length instead of a variable because a listener could get removed during the loop, and if that happens to an element less than the current index, it'd throw things off in the loop.
            _listeners[_i](time, _delta, frame, v);
          }
        }
      };

      _self = {
        time: 0,
        frame: 0,
        tick: function tick() {
          _tick(true);
        },
        deltaRatio: function deltaRatio(fps) {
          return _delta / (1000 / (fps || 60));
        },
        wake: function wake() {
          if (_coreReady) {
            if (!_coreInitted$2 && _windowExists$2()) {
              _win$3 = _coreInitted$2 = window;
              _doc$3 = _win$3.document || {};
              _globals.gsap = gsap$2;
              (_win$3.gsapVersions || (_win$3.gsapVersions = [])).push(gsap$2.version);

              _install(_installScope || _win$3.GreenSockGlobals || !_win$3.gsap && _win$3 || {});

              _registerPluginQueue.forEach(_createPlugin);
            }

            _raf = typeof requestAnimationFrame !== "undefined" && requestAnimationFrame;
            _id && _self.sleep();

            _req = _raf || function (f) {
              return setTimeout(f, _nextTime - _self.time * 1000 + 1 | 0);
            };

            _tickerActive = 1;

            _tick(2);
          }
        },
        sleep: function sleep() {
          (_raf ? cancelAnimationFrame : clearTimeout)(_id);
          _tickerActive = 0;
          _req = _emptyFunc;
        },
        lagSmoothing: function lagSmoothing(threshold, adjustedLag) {
          _lagThreshold = threshold || Infinity; // zero should be interpreted as basically unlimited

          _adjustedLag = Math.min(adjustedLag || 33, _lagThreshold);
        },
        fps: function fps(_fps) {
          _gap = 1000 / (_fps || 240);
          _nextTime = _self.time * 1000 + _gap;
        },
        add: function add(callback, once, prioritize) {
          var func = once ? function (t, d, f, v) {
            callback(t, d, f, v);

            _self.remove(func);
          } : callback;

          _self.remove(callback);

          _listeners[prioritize ? "unshift" : "push"](func);

          _wake();

          return func;
        },
        remove: function remove(callback, i) {
          ~(i = _listeners.indexOf(callback)) && _listeners.splice(i, 1) && _i >= i && _i--;
        },
        _listeners: _listeners
      };
      return _self;
    }(),
        _wake = function _wake() {
      return !_tickerActive && _ticker.wake();
    },
        //also ensures the core classes are initialized.

    /*
    * -------------------------------------------------
    * EASING
    * -------------------------------------------------
    */
    _easeMap = {},
        _customEaseExp = /^[\d.\-M][\d.\-,\s]/,
        _quotesExp = /["']/g,
        _parseObjectInString = function _parseObjectInString(value) {
      //takes a string like "{wiggles:10, type:anticipate})" and turns it into a real object. Notice it ends in ")" and includes the {} wrappers. This is because we only use this function for parsing ease configs and prioritized optimization rather than reusability.
      var obj = {},
          split = value.substr(1, value.length - 3).split(":"),
          key = split[0],
          i = 1,
          l = split.length,
          index,
          val,
          parsedVal;

      for (; i < l; i++) {
        val = split[i];
        index = i !== l - 1 ? val.lastIndexOf(",") : val.length;
        parsedVal = val.substr(0, index);
        obj[key] = isNaN(parsedVal) ? parsedVal.replace(_quotesExp, "").trim() : +parsedVal;
        key = val.substr(index + 1).trim();
      }

      return obj;
    },
        _valueInParentheses = function _valueInParentheses(value) {
      var open = value.indexOf("(") + 1,
          close = value.indexOf(")"),
          nested = value.indexOf("(", open);
      return value.substring(open, ~nested && nested < close ? value.indexOf(")", close + 1) : close);
    },
        _configEaseFromString = function _configEaseFromString(name) {
      //name can be a string like "elastic.out(1,0.5)", and pass in _easeMap as obj and it'll parse it out and call the actual function like _easeMap.Elastic.easeOut.config(1,0.5). It will also parse custom ease strings as long as CustomEase is loaded and registered (internally as _easeMap._CE).
      var split = (name + "").split("("),
          ease = _easeMap[split[0]];
      return ease && split.length > 1 && ease.config ? ease.config.apply(null, ~name.indexOf("{") ? [_parseObjectInString(split[1])] : _valueInParentheses(name).split(",").map(_numericIfPossible)) : _easeMap._CE && _customEaseExp.test(name) ? _easeMap._CE("", name) : ease;
    },
        _invertEase = function _invertEase(ease) {
      return function (p) {
        return 1 - ease(1 - p);
      };
    },
        // allow yoyoEase to be set in children and have those affected when the parent/ancestor timeline yoyos.
    _propagateYoyoEase = function _propagateYoyoEase(timeline, isYoyo) {
      var child = timeline._first,
          ease;

      while (child) {
        if (child instanceof Timeline) {
          _propagateYoyoEase(child, isYoyo);
        } else if (child.vars.yoyoEase && (!child._yoyo || !child._repeat) && child._yoyo !== isYoyo) {
          if (child.timeline) {
            _propagateYoyoEase(child.timeline, isYoyo);
          } else {
            ease = child._ease;
            child._ease = child._yEase;
            child._yEase = ease;
            child._yoyo = isYoyo;
          }
        }

        child = child._next;
      }
    },
        _parseEase = function _parseEase(ease, defaultEase) {
      return !ease ? defaultEase : (_isFunction$1(ease) ? ease : _easeMap[ease] || _configEaseFromString(ease)) || defaultEase;
    },
        _insertEase = function _insertEase(names, easeIn, easeOut, easeInOut) {
      if (easeOut === void 0) {
        easeOut = function easeOut(p) {
          return 1 - easeIn(1 - p);
        };
      }

      if (easeInOut === void 0) {
        easeInOut = function easeInOut(p) {
          return p < .5 ? easeIn(p * 2) / 2 : 1 - easeIn((1 - p) * 2) / 2;
        };
      }

      var ease = {
        easeIn: easeIn,
        easeOut: easeOut,
        easeInOut: easeInOut
      },
          lowercaseName;

      _forEachName(names, function (name) {
        _easeMap[name] = _globals[name] = ease;
        _easeMap[lowercaseName = name.toLowerCase()] = easeOut;

        for (var p in ease) {
          _easeMap[lowercaseName + (p === "easeIn" ? ".in" : p === "easeOut" ? ".out" : ".inOut")] = _easeMap[name + "." + p] = ease[p];
        }
      });

      return ease;
    },
        _easeInOutFromOut = function _easeInOutFromOut(easeOut) {
      return function (p) {
        return p < .5 ? (1 - easeOut(1 - p * 2)) / 2 : .5 + easeOut((p - .5) * 2) / 2;
      };
    },
        _configElastic = function _configElastic(type, amplitude, period) {
      var p1 = amplitude >= 1 ? amplitude : 1,
          //note: if amplitude is < 1, we simply adjust the period for a more natural feel. Otherwise the math doesn't work right and the curve starts at 1.
      p2 = (period || (type ? .3 : .45)) / (amplitude < 1 ? amplitude : 1),
          p3 = p2 / _2PI * (Math.asin(1 / p1) || 0),
          easeOut = function easeOut(p) {
        return p === 1 ? 1 : p1 * Math.pow(2, -10 * p) * _sin((p - p3) * p2) + 1;
      },
          ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);

      p2 = _2PI / p2; //precalculate to optimize

      ease.config = function (amplitude, period) {
        return _configElastic(type, amplitude, period);
      };

      return ease;
    },
        _configBack = function _configBack(type, overshoot) {
      if (overshoot === void 0) {
        overshoot = 1.70158;
      }

      var easeOut = function easeOut(p) {
        return p ? --p * p * ((overshoot + 1) * p + overshoot) + 1 : 0;
      },
          ease = type === "out" ? easeOut : type === "in" ? function (p) {
        return 1 - easeOut(1 - p);
      } : _easeInOutFromOut(easeOut);

      ease.config = function (overshoot) {
        return _configBack(type, overshoot);
      };

      return ease;
    }; // a cheaper (kb and cpu) but more mild way to get a parameterized weighted ease by feeding in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
    // _weightedEase = ratio => {
    // 	let y = 0.5 + ratio / 2;
    // 	return p => (2 * (1 - p) * p * y + p * p);
    // },
    // a stronger (but more expensive kb/cpu) parameterized weighted ease that lets you feed in a value between -1 (easeIn) and 1 (easeOut) where 0 is linear.
    // _weightedEaseStrong = ratio => {
    // 	ratio = .5 + ratio / 2;
    // 	let o = 1 / 3 * (ratio < .5 ? ratio : 1 - ratio),
    // 		b = ratio - o,
    // 		c = ratio + o;
    // 	return p => p === 1 ? p : 3 * b * (1 - p) * (1 - p) * p + 3 * c * (1 - p) * p * p + p * p * p;
    // };


    _forEachName("Linear,Quad,Cubic,Quart,Quint,Strong", function (name, i) {
      var power = i < 5 ? i + 1 : i;

      _insertEase(name + ",Power" + (power - 1), i ? function (p) {
        return Math.pow(p, power);
      } : function (p) {
        return p;
      }, function (p) {
        return 1 - Math.pow(1 - p, power);
      }, function (p) {
        return p < .5 ? Math.pow(p * 2, power) / 2 : 1 - Math.pow((1 - p) * 2, power) / 2;
      });
    });

    _easeMap.Linear.easeNone = _easeMap.none = _easeMap.Linear.easeIn;

    _insertEase("Elastic", _configElastic("in"), _configElastic("out"), _configElastic());

    (function (n, c) {
      var n1 = 1 / c,
          n2 = 2 * n1,
          n3 = 2.5 * n1,
          easeOut = function easeOut(p) {
        return p < n1 ? n * p * p : p < n2 ? n * Math.pow(p - 1.5 / c, 2) + .75 : p < n3 ? n * (p -= 2.25 / c) * p + .9375 : n * Math.pow(p - 2.625 / c, 2) + .984375;
      };

      _insertEase("Bounce", function (p) {
        return 1 - easeOut(1 - p);
      }, easeOut);
    })(7.5625, 2.75);

    _insertEase("Expo", function (p) {
      return Math.pow(2, 10 * (p - 1)) * p + p * p * p * p * p * p * (1 - p);
    }); // previously 2 ** (10 * (p - 1)) but that doesn't end up with the value quite at the right spot so we do a blended ease to ensure it lands where it should perfectly.


    _insertEase("Circ", function (p) {
      return -(_sqrt(1 - p * p) - 1);
    });

    _insertEase("Sine", function (p) {
      return p === 1 ? 1 : -_cos(p * _HALF_PI) + 1;
    });

    _insertEase("Back", _configBack("in"), _configBack("out"), _configBack());

    _easeMap.SteppedEase = _easeMap.steps = _globals.SteppedEase = {
      config: function config(steps, immediateStart) {
        if (steps === void 0) {
          steps = 1;
        }

        var p1 = 1 / steps,
            p2 = steps + (immediateStart ? 0 : 1),
            p3 = immediateStart ? 1 : 0,
            max = 1 - _tinyNum;
        return function (p) {
          return ((p2 * _clamp$1(0, max, p) | 0) + p3) * p1;
        };
      }
    };
    _defaults$1.ease = _easeMap["quad.out"];

    _forEachName("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt", function (name) {
      return _callbackNames += name + "," + name + "Params,";
    });
    /*
     * --------------------------------------------------------------------------------------
     * CACHE
     * --------------------------------------------------------------------------------------
     */


    var GSCache = function GSCache(target, harness) {
      this.id = _gsID++;
      target._gsap = this;
      this.target = target;
      this.harness = harness;
      this.get = harness ? harness.get : _getProperty;
      this.set = harness ? harness.getSetter : _getSetter;
    };
    /*
     * --------------------------------------------------------------------------------------
     * ANIMATION
     * --------------------------------------------------------------------------------------
     */

    var Animation = /*#__PURE__*/function () {
      function Animation(vars) {
        this.vars = vars;
        this._delay = +vars.delay || 0;

        if (this._repeat = vars.repeat === Infinity ? -2 : vars.repeat || 0) {
          // TODO: repeat: Infinity on a timeline's children must flag that timeline internally and affect its totalDuration, otherwise it'll stop in the negative direction when reaching the start.
          this._rDelay = vars.repeatDelay || 0;
          this._yoyo = !!vars.yoyo || !!vars.yoyoEase;
        }

        this._ts = 1;

        _setDuration(this, +vars.duration, 1, 1);

        this.data = vars.data;

        if (_context$2) {
          this._ctx = _context$2;

          _context$2.data.push(this);
        }

        _tickerActive || _ticker.wake();
      }

      var _proto = Animation.prototype;

      _proto.delay = function delay(value) {
        if (value || value === 0) {
          this.parent && this.parent.smoothChildTiming && this.startTime(this._start + value - this._delay);
          this._delay = value;
          return this;
        }

        return this._delay;
      };

      _proto.duration = function duration(value) {
        return arguments.length ? this.totalDuration(this._repeat > 0 ? value + (value + this._rDelay) * this._repeat : value) : this.totalDuration() && this._dur;
      };

      _proto.totalDuration = function totalDuration(value) {
        if (!arguments.length) {
          return this._tDur;
        }

        this._dirty = 0;
        return _setDuration(this, this._repeat < 0 ? value : (value - this._repeat * this._rDelay) / (this._repeat + 1));
      };

      _proto.totalTime = function totalTime(_totalTime, suppressEvents) {
        _wake();

        if (!arguments.length) {
          return this._tTime;
        }

        var parent = this._dp;

        if (parent && parent.smoothChildTiming && this._ts) {
          _alignPlayhead(this, _totalTime);

          !parent._dp || parent.parent || _postAddChecks(parent, this); // edge case: if this is a child of a timeline that already completed, for example, we must re-activate the parent.
          //in case any of the ancestor timelines had completed but should now be enabled, we should reset their totalTime() which will also ensure that they're lined up properly and enabled. Skip for animations that are on the root (wasteful). Example: a TimelineLite.exportRoot() is performed when there's a paused tween on the root, the export will not complete until that tween is unpaused, but imagine a child gets restarted later, after all [unpaused] tweens have completed. The start of that child would get pushed out, but one of the ancestors may have completed.

          while (parent && parent.parent) {
            if (parent.parent._time !== parent._start + (parent._ts >= 0 ? parent._tTime / parent._ts : (parent.totalDuration() - parent._tTime) / -parent._ts)) {
              parent.totalTime(parent._tTime, true);
            }

            parent = parent.parent;
          }

          if (!this.parent && this._dp.autoRemoveChildren && (this._ts > 0 && _totalTime < this._tDur || this._ts < 0 && _totalTime > 0 || !this._tDur && !_totalTime)) {
            //if the animation doesn't have a parent, put it back into its last parent (recorded as _dp for exactly cases like this). Limit to parents with autoRemoveChildren (like globalTimeline) so that if the user manually removes an animation from a timeline and then alters its playhead, it doesn't get added back in.
            _addToTimeline(this._dp, this, this._start - this._delay);
          }
        }

        if (this._tTime !== _totalTime || !this._dur && !suppressEvents || this._initted && Math.abs(this._zTime) === _tinyNum || !_totalTime && !this._initted && (this.add || this._ptLookup)) {
          // check for _ptLookup on a Tween instance to ensure it has actually finished being instantiated, otherwise if this.reverse() gets called in the Animation constructor, it could trigger a render() here even though the _targets weren't populated, thus when _init() is called there won't be any PropTweens (it'll act like the tween is non-functional)
          this._ts || (this._pTime = _totalTime); // otherwise, if an animation is paused, then the playhead is moved back to zero, then resumed, it'd revert back to the original time at the pause
          //if (!this._lock) { // avoid endless recursion (not sure we need this yet or if it's worth the performance hit)
          //   this._lock = 1;

          _lazySafeRender(this, _totalTime, suppressEvents); //   this._lock = 0;
          //}

        }

        return this;
      };

      _proto.time = function time(value, suppressEvents) {
        return arguments.length ? this.totalTime(Math.min(this.totalDuration(), value + _elapsedCycleDuration(this)) % (this._dur + this._rDelay) || (value ? this._dur : 0), suppressEvents) : this._time; // note: if the modulus results in 0, the playhead could be exactly at the end or the beginning, and we always defer to the END with a non-zero value, otherwise if you set the time() to the very end (duration()), it would render at the START!
      };

      _proto.totalProgress = function totalProgress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.totalDuration() * value, suppressEvents) : this.totalDuration() ? Math.min(1, this._tTime / this._tDur) : this.rawTime() >= 0 && this._initted ? 1 : 0;
      };

      _proto.progress = function progress(value, suppressEvents) {
        return arguments.length ? this.totalTime(this.duration() * (this._yoyo && !(this.iteration() & 1) ? 1 - value : value) + _elapsedCycleDuration(this), suppressEvents) : this.duration() ? Math.min(1, this._time / this._dur) : this.rawTime() > 0 ? 1 : 0;
      };

      _proto.iteration = function iteration(value, suppressEvents) {
        var cycleDuration = this.duration() + this._rDelay;

        return arguments.length ? this.totalTime(this._time + (value - 1) * cycleDuration, suppressEvents) : this._repeat ? _animationCycle(this._tTime, cycleDuration) + 1 : 1;
      } // potential future addition:
      // isPlayingBackwards() {
      // 	let animation = this,
      // 		orientation = 1; // 1 = forward, -1 = backward
      // 	while (animation) {
      // 		orientation *= animation.reversed() || (animation.repeat() && !(animation.iteration() & 1)) ? -1 : 1;
      // 		animation = animation.parent;
      // 	}
      // 	return orientation < 0;
      // }
      ;

      _proto.timeScale = function timeScale(value, suppressEvents) {
        if (!arguments.length) {
          return this._rts === -_tinyNum ? 0 : this._rts; // recorded timeScale. Special case: if someone calls reverse() on an animation with timeScale of 0, we assign it -_tinyNum to remember it's reversed.
        }

        if (this._rts === value) {
          return this;
        }

        var tTime = this.parent && this._ts ? _parentToChildTotalTime(this.parent._time, this) : this._tTime; // make sure to do the parentToChildTotalTime() BEFORE setting the new _ts because the old one must be used in that calculation.
        // future addition? Up side: fast and minimal file size. Down side: only works on this animation; if a timeline is reversed, for example, its childrens' onReverse wouldn't get called.
        //(+value < 0 && this._rts >= 0) && _callback(this, "onReverse", true);
        // prioritize rendering where the parent's playhead lines up instead of this._tTime because there could be a tween that's animating another tween's timeScale in the same rendering loop (same parent), thus if the timeScale tween renders first, it would alter _start BEFORE _tTime was set on that tick (in the rendering loop), effectively freezing it until the timeScale tween finishes.

        this._rts = +value || 0;
        this._ts = this._ps || value === -_tinyNum ? 0 : this._rts; // _ts is the functional timeScale which would be 0 if the animation is paused.

        this.totalTime(_clamp$1(-Math.abs(this._delay), this._tDur, tTime), suppressEvents !== false);

        _setEnd(this); // if parent.smoothChildTiming was false, the end time didn't get updated in the _alignPlayhead() method, so do it here.


        return _recacheAncestors(this);
      };

      _proto.paused = function paused(value) {
        if (!arguments.length) {
          return this._ps;
        } // possible future addition - if an animation is removed from its parent and then .restart() or .play() or .resume() is called, perhaps we should force it back into the globalTimeline but be careful because what if it's already at its end? We don't want it to just persist forever and not get released for GC.
        // !this.parent && !value && this._tTime < this._tDur && this !== _globalTimeline && _globalTimeline.add(this);


        if (this._ps !== value) {
          this._ps = value;

          if (value) {
            this._pTime = this._tTime || Math.max(-this._delay, this.rawTime()); // if the pause occurs during the delay phase, make sure that's factored in when resuming.

            this._ts = this._act = 0; // _ts is the functional timeScale, so a paused tween would effectively have a timeScale of 0. We record the "real" timeScale as _rts (recorded time scale)
          } else {
            _wake();

            this._ts = this._rts; //only defer to _pTime (pauseTime) if tTime is zero. Remember, someone could pause() an animation, then scrub the playhead and resume(). If the parent doesn't have smoothChildTiming, we render at the rawTime() because the startTime won't get updated.

            this.totalTime(this.parent && !this.parent.smoothChildTiming ? this.rawTime() : this._tTime || this._pTime, this.progress() === 1 && Math.abs(this._zTime) !== _tinyNum && (this._tTime -= _tinyNum)); // edge case: animation.progress(1).pause().play() wouldn't render again because the playhead is already at the end, but the call to totalTime() below will add it back to its parent...and not remove it again (since removing only happens upon rendering at a new time). Offsetting the _tTime slightly is done simply to cause the final render in totalTime() that'll pop it off its timeline (if autoRemoveChildren is true, of course). Check to make sure _zTime isn't -_tinyNum to avoid an edge case where the playhead is pushed to the end but INSIDE a tween/callback, the timeline itself is paused thus halting rendering and leaving a few unrendered. When resuming, it wouldn't render those otherwise.
          }
        }

        return this;
      };

      _proto.startTime = function startTime(value) {
        if (arguments.length) {
          this._start = value;
          var parent = this.parent || this._dp;
          parent && (parent._sort || !this.parent) && _addToTimeline(parent, this, value - this._delay);
          return this;
        }

        return this._start;
      };

      _proto.endTime = function endTime(includeRepeats) {
        return this._start + (_isNotFalse(includeRepeats) ? this.totalDuration() : this.duration()) / Math.abs(this._ts || 1);
      };

      _proto.rawTime = function rawTime(wrapRepeats) {
        var parent = this.parent || this._dp; // _dp = detached parent

        return !parent ? this._tTime : wrapRepeats && (!this._ts || this._repeat && this._time && this.totalProgress() < 1) ? this._tTime % (this._dur + this._rDelay) : !this._ts ? this._tTime : _parentToChildTotalTime(parent.rawTime(wrapRepeats), this);
      };

      _proto.revert = function revert(config) {
        if (config === void 0) {
          config = _revertConfig;
        }

        var prevIsReverting = _reverting$1;
        _reverting$1 = config;

        if (this._initted || this._startAt) {
          this.timeline && this.timeline.revert(config);
          this.totalTime(-0.01, config.suppressEvents);
        }

        this.data !== "nested" && config.kill !== false && this.kill();
        _reverting$1 = prevIsReverting;
        return this;
      };

      _proto.globalTime = function globalTime(rawTime) {
        var animation = this,
            time = arguments.length ? rawTime : animation.rawTime();

        while (animation) {
          time = animation._start + time / (Math.abs(animation._ts) || 1);
          animation = animation._dp;
        }

        return !this.parent && this._sat ? this._sat.globalTime(rawTime) : time; // the _startAt tweens for .fromTo() and .from() that have immediateRender should always be FIRST in the timeline (important for context.revert()). "_sat" stands for _startAtTween, referring to the parent tween that created the _startAt. We must discern if that tween had immediateRender so that we can know whether or not to prioritize it in revert().
      };

      _proto.repeat = function repeat(value) {
        if (arguments.length) {
          this._repeat = value === Infinity ? -2 : value;
          return _onUpdateTotalDuration(this);
        }

        return this._repeat === -2 ? Infinity : this._repeat;
      };

      _proto.repeatDelay = function repeatDelay(value) {
        if (arguments.length) {
          var time = this._time;
          this._rDelay = value;

          _onUpdateTotalDuration(this);

          return time ? this.time(time) : this;
        }

        return this._rDelay;
      };

      _proto.yoyo = function yoyo(value) {
        if (arguments.length) {
          this._yoyo = value;
          return this;
        }

        return this._yoyo;
      };

      _proto.seek = function seek(position, suppressEvents) {
        return this.totalTime(_parsePosition$1(this, position), _isNotFalse(suppressEvents));
      };

      _proto.restart = function restart(includeDelay, suppressEvents) {
        this.play().totalTime(includeDelay ? -this._delay : 0, _isNotFalse(suppressEvents));
        this._dur || (this._zTime = -_tinyNum); // ensures onComplete fires on a zero-duration animation that gets restarted.

        return this;
      };

      _proto.play = function play(from, suppressEvents) {
        from != null && this.seek(from, suppressEvents);
        return this.reversed(false).paused(false);
      };

      _proto.reverse = function reverse(from, suppressEvents) {
        from != null && this.seek(from || this.totalDuration(), suppressEvents);
        return this.reversed(true).paused(false);
      };

      _proto.pause = function pause(atTime, suppressEvents) {
        atTime != null && this.seek(atTime, suppressEvents);
        return this.paused(true);
      };

      _proto.resume = function resume() {
        return this.paused(false);
      };

      _proto.reversed = function reversed(value) {
        if (arguments.length) {
          !!value !== this.reversed() && this.timeScale(-this._rts || (value ? -_tinyNum : 0)); // in case timeScale is zero, reversing would have no effect so we use _tinyNum.

          return this;
        }

        return this._rts < 0;
      };

      _proto.invalidate = function invalidate() {
        this._initted = this._act = 0;
        this._zTime = -_tinyNum;
        return this;
      };

      _proto.isActive = function isActive() {
        var parent = this.parent || this._dp,
            start = this._start,
            rawTime;
        return !!(!parent || this._ts && this._initted && parent.isActive() && (rawTime = parent.rawTime(true)) >= start && rawTime < this.endTime(true) - _tinyNum);
      };

      _proto.eventCallback = function eventCallback(type, callback, params) {
        var vars = this.vars;

        if (arguments.length > 1) {
          if (!callback) {
            delete vars[type];
          } else {
            vars[type] = callback;
            params && (vars[type + "Params"] = params);
            type === "onUpdate" && (this._onUpdate = callback);
          }

          return this;
        }

        return vars[type];
      };

      _proto.then = function then(onFulfilled) {
        var self = this;
        return new Promise(function (resolve) {
          var f = _isFunction$1(onFulfilled) ? onFulfilled : _passThrough$1,
              _resolve = function _resolve() {
            var _then = self.then;
            self.then = null; // temporarily null the then() method to avoid an infinite loop (see https://github.com/greensock/GSAP/issues/322)

            _isFunction$1(f) && (f = f(self)) && (f.then || f === self) && (self.then = _then);
            resolve(f);
            self.then = _then;
          };

          if (self._initted && self.totalProgress() === 1 && self._ts >= 0 || !self._tTime && self._ts < 0) {
            _resolve();
          } else {
            self._prom = _resolve;
          }
        });
      };

      _proto.kill = function kill() {
        _interrupt(this);
      };

      return Animation;
    }();

    _setDefaults$1(Animation.prototype, {
      _time: 0,
      _start: 0,
      _end: 0,
      _tTime: 0,
      _tDur: 0,
      _dirty: 0,
      _repeat: 0,
      _yoyo: false,
      parent: null,
      _initted: false,
      _rDelay: 0,
      _ts: 1,
      _dp: 0,
      ratio: 0,
      _zTime: -_tinyNum,
      _prom: 0,
      _ps: false,
      _rts: 1
    });
    /*
     * -------------------------------------------------
     * TIMELINE
     * -------------------------------------------------
     */


    var Timeline = /*#__PURE__*/function (_Animation) {
      _inheritsLoose(Timeline, _Animation);

      function Timeline(vars, position) {
        var _this;

        if (vars === void 0) {
          vars = {};
        }

        _this = _Animation.call(this, vars) || this;
        _this.labels = {};
        _this.smoothChildTiming = !!vars.smoothChildTiming;
        _this.autoRemoveChildren = !!vars.autoRemoveChildren;
        _this._sort = _isNotFalse(vars.sortChildren);
        _globalTimeline && _addToTimeline(vars.parent || _globalTimeline, _assertThisInitialized(_this), position);
        vars.reversed && _this.reverse();
        vars.paused && _this.paused(true);
        vars.scrollTrigger && _scrollTrigger(_assertThisInitialized(_this), vars.scrollTrigger);
        return _this;
      }

      var _proto2 = Timeline.prototype;

      _proto2.to = function to(targets, vars, position) {
        _createTweenType(0, arguments, this);

        return this;
      };

      _proto2.from = function from(targets, vars, position) {
        _createTweenType(1, arguments, this);

        return this;
      };

      _proto2.fromTo = function fromTo(targets, fromVars, toVars, position) {
        _createTweenType(2, arguments, this);

        return this;
      };

      _proto2.set = function set(targets, vars, position) {
        vars.duration = 0;
        vars.parent = this;
        _inheritDefaults(vars).repeatDelay || (vars.repeat = 0);
        vars.immediateRender = !!vars.immediateRender;
        new Tween(targets, vars, _parsePosition$1(this, position), 1);
        return this;
      };

      _proto2.call = function call(callback, params, position) {
        return _addToTimeline(this, Tween.delayedCall(0, callback, params), position);
      } //ONLY for backward compatibility! Maybe delete?
      ;

      _proto2.staggerTo = function staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.duration = duration;
        vars.stagger = vars.stagger || stagger;
        vars.onComplete = onCompleteAll;
        vars.onCompleteParams = onCompleteAllParams;
        vars.parent = this;
        new Tween(targets, vars, _parsePosition$1(this, position));
        return this;
      };

      _proto2.staggerFrom = function staggerFrom(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams) {
        vars.runBackwards = 1;
        _inheritDefaults(vars).immediateRender = _isNotFalse(vars.immediateRender);
        return this.staggerTo(targets, duration, vars, stagger, position, onCompleteAll, onCompleteAllParams);
      };

      _proto2.staggerFromTo = function staggerFromTo(targets, duration, fromVars, toVars, stagger, position, onCompleteAll, onCompleteAllParams) {
        toVars.startAt = fromVars;
        _inheritDefaults(toVars).immediateRender = _isNotFalse(toVars.immediateRender);
        return this.staggerTo(targets, duration, toVars, stagger, position, onCompleteAll, onCompleteAllParams);
      };

      _proto2.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time,
            tDur = this._dirty ? this.totalDuration() : this._tDur,
            dur = this._dur,
            tTime = totalTime <= 0 ? 0 : _roundPrecise(totalTime),
            // if a paused timeline is resumed (or its _start is updated for another reason...which rounds it), that could result in the playhead shifting a **tiny** amount and a zero-duration child at that spot may get rendered at a different ratio, like its totalTime in render() may be 1e-17 instead of 0, for example.
        crossingStart = this._zTime < 0 !== totalTime < 0 && (this._initted || !dur),
            time,
            child,
            next,
            iteration,
            cycleDuration,
            prevPaused,
            pauseTween,
            timeScale,
            prevStart,
            prevIteration,
            yoyo,
            isYoyo;
        this !== _globalTimeline && tTime > tDur && totalTime >= 0 && (tTime = tDur);

        if (tTime !== this._tTime || force || crossingStart) {
          if (prevTime !== this._time && dur) {
            //if totalDuration() finds a child with a negative startTime and smoothChildTiming is true, things get shifted around internally so we need to adjust the time accordingly. For example, if a tween starts at -30 we must shift EVERYTHING forward 30 seconds and move this timeline's startTime backward by 30 seconds so that things align with the playhead (no jump).
            tTime += this._time - prevTime;
            totalTime += this._time - prevTime;
          }

          time = tTime;
          prevStart = this._start;
          timeScale = this._ts;
          prevPaused = !timeScale;

          if (crossingStart) {
            dur || (prevTime = this._zTime); //when the playhead arrives at EXACTLY time 0 (right on top) of a zero-duration timeline, we need to discern if events are suppressed so that when the playhead moves again (next time), it'll trigger the callback. If events are NOT suppressed, obviously the callback would be triggered in this render. Basically, the callback should fire either when the playhead ARRIVES or LEAVES this exact spot, not both. Imagine doing a timeline.seek(0) and there's a callback that sits at 0. Since events are suppressed on that seek() by default, nothing will fire, but when the playhead moves off of that position, the callback should fire. This behavior is what people intuitively expect.

            (totalTime || !suppressEvents) && (this._zTime = totalTime);
          }

          if (this._repeat) {
            //adjust the time for repeats and yoyos
            yoyo = this._yoyo;
            cycleDuration = dur + this._rDelay;

            if (this._repeat < -1 && totalTime < 0) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }

            time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

            if (tTime === tDur) {
              // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
              iteration = this._repeat;
              time = dur;
            } else {
              prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

              iteration = ~~prevIteration;

              if (iteration && iteration === prevIteration) {
                time = dur;
                iteration--;
              }

              time > dur && (time = dur);
            }

            prevIteration = _animationCycle(this._tTime, cycleDuration);
            !prevTime && this._tTime && prevIteration !== iteration && this._tTime - prevIteration * cycleDuration - this._dur <= 0 && (prevIteration = iteration); // edge case - if someone does addPause() at the very beginning of a repeating timeline, that pause is technically at the same spot as the end which causes this._time to get set to 0 when the totalTime would normally place the playhead at the end. See https://gsap.com/forums/topic/23823-closing-nav-animation-not-working-on-ie-and-iphone-6-maybe-other-older-browser/?tab=comments#comment-113005 also, this._tTime - prevIteration * cycleDuration - this._dur <= 0 just checks to make sure it wasn't previously in the "repeatDelay" portion

            if (yoyo && iteration & 1) {
              time = dur - time;
              isYoyo = 1;
            }
            /*
            make sure children at the end/beginning of the timeline are rendered properly. If, for example,
            a 3-second long timeline rendered at 2.9 seconds previously, and now renders at 3.2 seconds (which
            would get translated to 2.8 seconds if the timeline yoyos or 0.2 seconds if it just repeats), there
            could be a callback or a short tween that's at 2.95 or 3 seconds in which wouldn't render. So
            we need to push the timeline to the end (and/or beginning depending on its yoyo value). Also we must
            ensure that zero-duration tweens at the very beginning or end of the Timeline work.
            */


            if (iteration !== prevIteration && !this._lock) {
              var rewinding = yoyo && prevIteration & 1,
                  doesWrap = rewinding === (yoyo && iteration & 1);
              iteration < prevIteration && (rewinding = !rewinding);
              prevTime = rewinding ? 0 : tTime % dur ? dur : tTime; // if the playhead is landing exactly at the end of an iteration, use that totalTime rather than only the duration, otherwise it'll skip the 2nd render since it's effectively at the same time.

              this._lock = 1;
              this.render(prevTime || (isYoyo ? 0 : _roundPrecise(iteration * cycleDuration)), suppressEvents, !dur)._lock = 0;
              this._tTime = tTime; // if a user gets the iteration() inside the onRepeat, for example, it should be accurate.

              !suppressEvents && this.parent && _callback$1(this, "onRepeat");
              this.vars.repeatRefresh && !isYoyo && (this.invalidate()._lock = 1);

              if (prevTime && prevTime !== this._time || prevPaused !== !this._ts || this.vars.onRepeat && !this.parent && !this._act) {
                // if prevTime is 0 and we render at the very end, _time will be the end, thus won't match. So in this edge case, prevTime won't match _time but that's okay. If it gets killed in the onRepeat, eject as well.
                return this;
              }

              dur = this._dur; // in case the duration changed in the onRepeat

              tDur = this._tDur;

              if (doesWrap) {
                this._lock = 2;
                prevTime = rewinding ? dur : -0.0001;
                this.render(prevTime, true);
                this.vars.repeatRefresh && !isYoyo && this.invalidate();
              }

              this._lock = 0;

              if (!this._ts && !prevPaused) {
                return this;
              } //in order for yoyoEase to work properly when there's a stagger, we must swap out the ease in each sub-tween.


              _propagateYoyoEase(this, isYoyo);
            }
          }

          if (this._hasPause && !this._forcing && this._lock < 2) {
            pauseTween = _findNextPauseTween(this, _roundPrecise(prevTime), _roundPrecise(time));

            if (pauseTween) {
              tTime -= time - (time = pauseTween._start);
            }
          }

          this._tTime = tTime;
          this._time = time;
          this._act = !timeScale; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

          if (!this._initted) {
            this._onUpdate = this.vars.onUpdate;
            this._initted = 1;
            this._zTime = totalTime;
            prevTime = 0; // upon init, the playhead should always go forward; someone could invalidate() a completed timeline and then if they restart(), that would make child tweens render in reverse order which could lock in the wrong starting values if they build on each other, like tl.to(obj, {x: 100}).to(obj, {x: 0}).
          }

          if (!prevTime && time && !suppressEvents && !iteration) {
            _callback$1(this, "onStart");

            if (this._tTime !== tTime) {
              // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
              return this;
            }
          }

          if (time >= prevTime && totalTime >= 0) {
            child = this._first;

            while (child) {
              next = child._next;

              if ((child._act || time >= child._start) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                  return this.render(totalTime, suppressEvents, force);
                }

                child.render(child._ts > 0 ? (time - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (time - child._start) * child._ts, suppressEvents, force);

                if (time !== this._time || !this._ts && !prevPaused) {
                  //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                  pauseTween = 0;
                  next && (tTime += this._zTime = -_tinyNum); // it didn't finish rendering, so flag zTime as negative so that the next time render() is called it'll be forced (to render any remaining children)

                  break;
                }
              }

              child = next;
            }
          } else {
            child = this._last;
            var adjustedTime = totalTime < 0 ? totalTime : time; //when the playhead goes backward beyond the start of this timeline, we must pass that information down to the child animations so that zero-duration tweens know whether to render their starting or ending values.

            while (child) {
              next = child._prev;

              if ((child._act || adjustedTime <= child._end) && child._ts && pauseTween !== child) {
                if (child.parent !== this) {
                  // an extreme edge case - the child's render could do something like kill() the "next" one in the linked list, or reparent it. In that case we must re-initiate the whole render to be safe.
                  return this.render(totalTime, suppressEvents, force);
                }

                child.render(child._ts > 0 ? (adjustedTime - child._start) * child._ts : (child._dirty ? child.totalDuration() : child._tDur) + (adjustedTime - child._start) * child._ts, suppressEvents, force || _reverting$1 && (child._initted || child._startAt)); // if reverting, we should always force renders of initted tweens (but remember that .fromTo() or .from() may have a _startAt but not _initted yet). If, for example, a .fromTo() tween with a stagger (which creates an internal timeline) gets reverted BEFORE some of its child tweens render for the first time, it may not properly trigger them to revert.

                if (time !== this._time || !this._ts && !prevPaused) {
                  //in case a tween pauses or seeks the timeline when rendering, like inside of an onUpdate/onComplete
                  pauseTween = 0;
                  next && (tTime += this._zTime = adjustedTime ? -_tinyNum : _tinyNum); // it didn't finish rendering, so adjust zTime so that so that the next time render() is called it'll be forced (to render any remaining children)

                  break;
                }
              }

              child = next;
            }
          }

          if (pauseTween && !suppressEvents) {
            this.pause();
            pauseTween.render(time >= prevTime ? 0 : -_tinyNum)._zTime = time >= prevTime ? 1 : -1;

            if (this._ts) {
              //the callback resumed playback! So since we may have held back the playhead due to where the pause is positioned, go ahead and jump to where it's SUPPOSED to be (if no pause happened).
              this._start = prevStart; //if the pause was at an earlier time and the user resumed in the callback, it could reposition the timeline (changing its startTime), throwing things off slightly, so we make sure the _start doesn't shift.

              _setEnd(this);

              return this.render(totalTime, suppressEvents, force);
            }
          }

          this._onUpdate && !suppressEvents && _callback$1(this, "onUpdate", true);
          if (tTime === tDur && this._tTime >= this.totalDuration() || !tTime && prevTime) if (prevStart === this._start || Math.abs(timeScale) !== Math.abs(this._ts)) if (!this._lock) {
            // remember, a child's callback may alter this timeline's playhead or timeScale which is why we need to add some of these checks.
            (totalTime || !dur) && (tTime === tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

            if (!suppressEvents && !(totalTime < 0 && !prevTime) && (tTime || prevTime || !tDur)) {
              _callback$1(this, tTime === tDur && totalTime >= 0 ? "onComplete" : "onReverseComplete", true);

              this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
            }
          }
        }

        return this;
      };

      _proto2.add = function add(child, position) {
        var _this2 = this;

        _isNumber$1(position) || (position = _parsePosition$1(this, position, child));

        if (!(child instanceof Animation)) {
          if (_isArray(child)) {
            child.forEach(function (obj) {
              return _this2.add(obj, position);
            });
            return this;
          }

          if (_isString$1(child)) {
            return this.addLabel(child, position);
          }

          if (_isFunction$1(child)) {
            child = Tween.delayedCall(0, child);
          } else {
            return this;
          }
        }

        return this !== child ? _addToTimeline(this, child, position) : this; //don't allow a timeline to be added to itself as a child!
      };

      _proto2.getChildren = function getChildren(nested, tweens, timelines, ignoreBeforeTime) {
        if (nested === void 0) {
          nested = true;
        }

        if (tweens === void 0) {
          tweens = true;
        }

        if (timelines === void 0) {
          timelines = true;
        }

        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = -_bigNum$1;
        }

        var a = [],
            child = this._first;

        while (child) {
          if (child._start >= ignoreBeforeTime) {
            if (child instanceof Tween) {
              tweens && a.push(child);
            } else {
              timelines && a.push(child);
              nested && a.push.apply(a, child.getChildren(true, tweens, timelines));
            }
          }

          child = child._next;
        }

        return a;
      };

      _proto2.getById = function getById(id) {
        var animations = this.getChildren(1, 1, 1),
            i = animations.length;

        while (i--) {
          if (animations[i].vars.id === id) {
            return animations[i];
          }
        }
      };

      _proto2.remove = function remove(child) {
        if (_isString$1(child)) {
          return this.removeLabel(child);
        }

        if (_isFunction$1(child)) {
          return this.killTweensOf(child);
        }

        child.parent === this && _removeLinkedListItem(this, child);

        if (child === this._recent) {
          this._recent = this._last;
        }

        return _uncache(this);
      };

      _proto2.totalTime = function totalTime(_totalTime2, suppressEvents) {
        if (!arguments.length) {
          return this._tTime;
        }

        this._forcing = 1;

        if (!this._dp && this._ts) {
          //special case for the global timeline (or any other that has no parent or detached parent).
          this._start = _roundPrecise(_ticker.time - (this._ts > 0 ? _totalTime2 / this._ts : (this.totalDuration() - _totalTime2) / -this._ts));
        }

        _Animation.prototype.totalTime.call(this, _totalTime2, suppressEvents);

        this._forcing = 0;
        return this;
      };

      _proto2.addLabel = function addLabel(label, position) {
        this.labels[label] = _parsePosition$1(this, position);
        return this;
      };

      _proto2.removeLabel = function removeLabel(label) {
        delete this.labels[label];
        return this;
      };

      _proto2.addPause = function addPause(position, callback, params) {
        var t = Tween.delayedCall(0, callback || _emptyFunc, params);
        t.data = "isPause";
        this._hasPause = 1;
        return _addToTimeline(this, t, _parsePosition$1(this, position));
      };

      _proto2.removePause = function removePause(position) {
        var child = this._first;
        position = _parsePosition$1(this, position);

        while (child) {
          if (child._start === position && child.data === "isPause") {
            _removeFromParent(child);
          }

          child = child._next;
        }
      };

      _proto2.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        var tweens = this.getTweensOf(targets, onlyActive),
            i = tweens.length;

        while (i--) {
          _overwritingTween !== tweens[i] && tweens[i].kill(targets, props);
        }

        return this;
      };

      _proto2.getTweensOf = function getTweensOf(targets, onlyActive) {
        var a = [],
            parsedTargets = toArray(targets),
            child = this._first,
            isGlobalTime = _isNumber$1(onlyActive),
            // a number is interpreted as a global time. If the animation spans
        children;

        while (child) {
          if (child instanceof Tween) {
            if (_arrayContainsAny(child._targets, parsedTargets) && (isGlobalTime ? (!_overwritingTween || child._initted && child._ts) && child.globalTime(0) <= onlyActive && child.globalTime(child.totalDuration()) > onlyActive : !onlyActive || child.isActive())) {
              // note: if this is for overwriting, it should only be for tweens that aren't paused and are initted.
              a.push(child);
            }
          } else if ((children = child.getTweensOf(parsedTargets, onlyActive)).length) {
            a.push.apply(a, children);
          }

          child = child._next;
        }

        return a;
      } // potential future feature - targets() on timelines
      // targets() {
      // 	let result = [];
      // 	this.getChildren(true, true, false).forEach(t => result.push(...t.targets()));
      // 	return result.filter((v, i) => result.indexOf(v) === i);
      // }
      ;

      _proto2.tweenTo = function tweenTo(position, vars) {
        vars = vars || {};

        var tl = this,
            endTime = _parsePosition$1(tl, position),
            _vars = vars,
            startAt = _vars.startAt,
            _onStart = _vars.onStart,
            onStartParams = _vars.onStartParams,
            immediateRender = _vars.immediateRender,
            initted,
            tween = Tween.to(tl, _setDefaults$1({
          ease: vars.ease || "none",
          lazy: false,
          immediateRender: false,
          time: endTime,
          overwrite: "auto",
          duration: vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale()) || _tinyNum,
          onStart: function onStart() {
            tl.pause();

            if (!initted) {
              var duration = vars.duration || Math.abs((endTime - (startAt && "time" in startAt ? startAt.time : tl._time)) / tl.timeScale());
              tween._dur !== duration && _setDuration(tween, duration, 0, 1).render(tween._time, true, true);
              initted = 1;
            }

            _onStart && _onStart.apply(tween, onStartParams || []); //in case the user had an onStart in the vars - we don't want to overwrite it.
          }
        }, vars));

        return immediateRender ? tween.render(0) : tween;
      };

      _proto2.tweenFromTo = function tweenFromTo(fromPosition, toPosition, vars) {
        return this.tweenTo(toPosition, _setDefaults$1({
          startAt: {
            time: _parsePosition$1(this, fromPosition)
          }
        }, vars));
      };

      _proto2.recent = function recent() {
        return this._recent;
      };

      _proto2.nextLabel = function nextLabel(afterTime) {
        if (afterTime === void 0) {
          afterTime = this._time;
        }

        return _getLabelInDirection(this, _parsePosition$1(this, afterTime));
      };

      _proto2.previousLabel = function previousLabel(beforeTime) {
        if (beforeTime === void 0) {
          beforeTime = this._time;
        }

        return _getLabelInDirection(this, _parsePosition$1(this, beforeTime), 1);
      };

      _proto2.currentLabel = function currentLabel(value) {
        return arguments.length ? this.seek(value, true) : this.previousLabel(this._time + _tinyNum);
      };

      _proto2.shiftChildren = function shiftChildren(amount, adjustLabels, ignoreBeforeTime) {
        if (ignoreBeforeTime === void 0) {
          ignoreBeforeTime = 0;
        }

        var child = this._first,
            labels = this.labels,
            p;

        while (child) {
          if (child._start >= ignoreBeforeTime) {
            child._start += amount;
            child._end += amount;
          }

          child = child._next;
        }

        if (adjustLabels) {
          for (p in labels) {
            if (labels[p] >= ignoreBeforeTime) {
              labels[p] += amount;
            }
          }
        }

        return _uncache(this);
      };

      _proto2.invalidate = function invalidate(soft) {
        var child = this._first;
        this._lock = 0;

        while (child) {
          child.invalidate(soft);
          child = child._next;
        }

        return _Animation.prototype.invalidate.call(this, soft);
      };

      _proto2.clear = function clear(includeLabels) {
        if (includeLabels === void 0) {
          includeLabels = true;
        }

        var child = this._first,
            next;

        while (child) {
          next = child._next;
          this.remove(child);
          child = next;
        }

        this._dp && (this._time = this._tTime = this._pTime = 0);
        includeLabels && (this.labels = {});
        return _uncache(this);
      };

      _proto2.totalDuration = function totalDuration(value) {
        var max = 0,
            self = this,
            child = self._last,
            prevStart = _bigNum$1,
            prev,
            start,
            parent;

        if (arguments.length) {
          return self.timeScale((self._repeat < 0 ? self.duration() : self.totalDuration()) / (self.reversed() ? -value : value));
        }

        if (self._dirty) {
          parent = self.parent;

          while (child) {
            prev = child._prev; //record it here in case the tween changes position in the sequence...

            child._dirty && child.totalDuration(); //could change the tween._startTime, so make sure the animation's cache is clean before analyzing it.

            start = child._start;

            if (start > prevStart && self._sort && child._ts && !self._lock) {
              //in case one of the tweens shifted out of order, it needs to be re-inserted into the correct position in the sequence
              self._lock = 1; //prevent endless recursive calls - there are methods that get triggered that check duration/totalDuration when we add().

              _addToTimeline(self, child, start - child._delay, 1)._lock = 0;
            } else {
              prevStart = start;
            }

            if (start < 0 && child._ts) {
              //children aren't allowed to have negative startTimes unless smoothChildTiming is true, so adjust here if one is found.
              max -= start;

              if (!parent && !self._dp || parent && parent.smoothChildTiming) {
                self._start += start / self._ts;
                self._time -= start;
                self._tTime -= start;
              }

              self.shiftChildren(-start, false, -1e999);
              prevStart = 0;
            }

            child._end > max && child._ts && (max = child._end);
            child = prev;
          }

          _setDuration(self, self === _globalTimeline && self._time > max ? self._time : max, 1, 1);

          self._dirty = 0;
        }

        return self._tDur;
      };

      Timeline.updateRoot = function updateRoot(time) {
        if (_globalTimeline._ts) {
          _lazySafeRender(_globalTimeline, _parentToChildTotalTime(time, _globalTimeline));

          _lastRenderedFrame = _ticker.frame;
        }

        if (_ticker.frame >= _nextGCFrame) {
          _nextGCFrame += _config.autoSleep || 120;
          var child = _globalTimeline._first;
          if (!child || !child._ts) if (_config.autoSleep && _ticker._listeners.length < 2) {
            while (child && !child._ts) {
              child = child._next;
            }

            child || _ticker.sleep();
          }
        }
      };

      return Timeline;
    }(Animation);

    _setDefaults$1(Timeline.prototype, {
      _lock: 0,
      _hasPause: 0,
      _forcing: 0
    });

    var _addComplexStringPropTween = function _addComplexStringPropTween(target, prop, start, end, setter, stringFilter, funcParam) {
      //note: we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
      var pt = new PropTween(this._pt, target, prop, 0, 1, _renderComplexString, null, setter),
          index = 0,
          matchIndex = 0,
          result,
          startNums,
          color,
          endNum,
          chunk,
          startNum,
          hasRandom,
          a;
      pt.b = start;
      pt.e = end;
      start += ""; //ensure values are strings

      end += "";

      if (hasRandom = ~end.indexOf("random(")) {
        end = _replaceRandom(end);
      }

      if (stringFilter) {
        a = [start, end];
        stringFilter(a, target, prop); //pass an array with the starting and ending values and let the filter do whatever it needs to the values.

        start = a[0];
        end = a[1];
      }

      startNums = start.match(_complexStringNumExp) || [];

      while (result = _complexStringNumExp.exec(end)) {
        endNum = result[0];
        chunk = end.substring(index, result.index);

        if (color) {
          color = (color + 1) % 5;
        } else if (chunk.substr(-5) === "rgba(") {
          color = 1;
        }

        if (endNum !== startNums[matchIndex++]) {
          startNum = parseFloat(startNums[matchIndex - 1]) || 0; //these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.

          pt._pt = {
            _next: pt._pt,
            p: chunk || matchIndex === 1 ? chunk : ",",
            //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
            s: startNum,
            c: endNum.charAt(1) === "=" ? _parseRelative(startNum, endNum) - startNum : parseFloat(endNum) - startNum,
            m: color && color < 4 ? Math.round : 0
          };
          index = _complexStringNumExp.lastIndex;
        }
      }

      pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)

      pt.fp = funcParam;

      if (_relExp.test(end) || hasRandom) {
        pt.e = 0; //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).
      }

      this._pt = pt; //start the linked list with this new PropTween. Remember, we call _addComplexStringPropTween.call(tweenInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.

      return pt;
    },
        _addPropTween = function _addPropTween(target, prop, start, end, index, targets, modifier, stringFilter, funcParam, optional) {
      _isFunction$1(end) && (end = end(index || 0, target, targets));
      var currentValue = target[prop],
          parsedStart = start !== "get" ? start : !_isFunction$1(currentValue) ? currentValue : funcParam ? target[prop.indexOf("set") || !_isFunction$1(target["get" + prop.substr(3)]) ? prop : "get" + prop.substr(3)](funcParam) : target[prop](),
          setter = !_isFunction$1(currentValue) ? _setterPlain : funcParam ? _setterFuncWithParam : _setterFunc,
          pt;

      if (_isString$1(end)) {
        if (~end.indexOf("random(")) {
          end = _replaceRandom(end);
        }

        if (end.charAt(1) === "=") {
          pt = _parseRelative(parsedStart, end) + (getUnit(parsedStart) || 0);

          if (pt || pt === 0) {
            // to avoid isNaN, like if someone passes in a value like "!= whatever"
            end = pt;
          }
        }
      }

      if (!optional || parsedStart !== end || _forceAllPropTweens) {
        if (!isNaN(parsedStart * end) && end !== "") {
          // fun fact: any number multiplied by "" is evaluated as the number 0!
          pt = new PropTween(this._pt, target, prop, +parsedStart || 0, end - (parsedStart || 0), typeof currentValue === "boolean" ? _renderBoolean : _renderPlain, 0, setter);
          funcParam && (pt.fp = funcParam);
          modifier && pt.modifier(modifier, this, target);
          return this._pt = pt;
        }

        !currentValue && !(prop in target) && _missingPlugin(prop, end);
        return _addComplexStringPropTween.call(this, target, prop, parsedStart, end, setter, stringFilter || _config.stringFilter, funcParam);
      }
    },
        //creates a copy of the vars object and processes any function-based values (putting the resulting values directly into the copy) as well as strings with "random()" in them. It does NOT process relative values.
    _processVars = function _processVars(vars, index, target, targets, tween) {
      _isFunction$1(vars) && (vars = _parseFuncOrString(vars, tween, index, target, targets));

      if (!_isObject$1(vars) || vars.style && vars.nodeType || _isArray(vars) || _isTypedArray(vars)) {
        return _isString$1(vars) ? _parseFuncOrString(vars, tween, index, target, targets) : vars;
      }

      var copy = {},
          p;

      for (p in vars) {
        copy[p] = _parseFuncOrString(vars[p], tween, index, target, targets);
      }

      return copy;
    },
        _checkPlugin = function _checkPlugin(property, vars, tween, index, target, targets) {
      var plugin, pt, ptLookup, i;

      if (_plugins[property] && (plugin = new _plugins[property]()).init(target, plugin.rawVars ? vars[property] : _processVars(vars[property], index, target, targets, tween), tween, index, targets) !== false) {
        tween._pt = pt = new PropTween(tween._pt, target, property, 0, 1, plugin.render, plugin, 0, plugin.priority);

        if (tween !== _quickTween) {
          ptLookup = tween._ptLookup[tween._targets.indexOf(target)]; //note: we can't use tween._ptLookup[index] because for staggered tweens, the index from the fullTargets array won't match what it is in each individual tween that spawns from the stagger.

          i = plugin._props.length;

          while (i--) {
            ptLookup[plugin._props[i]] = pt;
          }
        }
      }

      return plugin;
    },
        _overwritingTween,
        //store a reference temporarily so we can avoid overwriting itself.
    _forceAllPropTweens,
        _initTween = function _initTween(tween, time, tTime) {
      var vars = tween.vars,
          ease = vars.ease,
          startAt = vars.startAt,
          immediateRender = vars.immediateRender,
          lazy = vars.lazy,
          onUpdate = vars.onUpdate,
          runBackwards = vars.runBackwards,
          yoyoEase = vars.yoyoEase,
          keyframes = vars.keyframes,
          autoRevert = vars.autoRevert,
          dur = tween._dur,
          prevStartAt = tween._startAt,
          targets = tween._targets,
          parent = tween.parent,
          fullTargets = parent && parent.data === "nested" ? parent.vars.targets : targets,
          autoOverwrite = tween._overwrite === "auto" && !_suppressOverwrites$1,
          tl = tween.timeline,
          cleanVars,
          i,
          p,
          pt,
          target,
          hasPriority,
          gsData,
          harness,
          plugin,
          ptLookup,
          index,
          harnessVars,
          overwritten;
      tl && (!keyframes || !ease) && (ease = "none");
      tween._ease = _parseEase(ease, _defaults$1.ease);
      tween._yEase = yoyoEase ? _invertEase(_parseEase(yoyoEase === true ? ease : yoyoEase, _defaults$1.ease)) : 0;

      if (yoyoEase && tween._yoyo && !tween._repeat) {
        //there must have been a parent timeline with yoyo:true that is currently in its yoyo phase, so flip the eases.
        yoyoEase = tween._yEase;
        tween._yEase = tween._ease;
        tween._ease = yoyoEase;
      }

      tween._from = !tl && !!vars.runBackwards; //nested timelines should never run backwards - the backwards-ness is in the child tweens.

      if (!tl || keyframes && !vars.stagger) {
        //if there's an internal timeline, skip all the parsing because we passed that task down the chain.
        harness = targets[0] ? _getCache(targets[0]).harness : 0;
        harnessVars = harness && vars[harness.prop]; //someone may need to specify CSS-specific values AND non-CSS values, like if the element has an "x" property plus it's a standard DOM element. We allow people to distinguish by wrapping plugin-specific stuff in a css:{} object for example.

        cleanVars = _copyExcluding(vars, _reservedProps);

        if (prevStartAt) {
          prevStartAt._zTime < 0 && prevStartAt.progress(1); // in case it's a lazy startAt that hasn't rendered yet.

          time < 0 && runBackwards && immediateRender && !autoRevert ? prevStartAt.render(-1, true) : prevStartAt.revert(runBackwards && dur ? _revertConfigNoKill : _startAtRevertConfig); // if it's a "startAt" (not "from()" or runBackwards: true), we only need to do a shallow revert (keep transforms cached in CSSPlugin)
          // don't just _removeFromParent(prevStartAt.render(-1, true)) because that'll leave inline styles. We're creating a new _startAt for "startAt" tweens that re-capture things to ensure that if the pre-tween values changed since the tween was created, they're recorded.

          prevStartAt._lazy = 0;
        }

        if (startAt) {
          _removeFromParent(tween._startAt = Tween.set(targets, _setDefaults$1({
            data: "isStart",
            overwrite: false,
            parent: parent,
            immediateRender: true,
            lazy: !prevStartAt && _isNotFalse(lazy),
            startAt: null,
            delay: 0,
            onUpdate: onUpdate && function () {
              return _callback$1(tween, "onUpdate");
            },
            stagger: 0
          }, startAt))); //copy the properties/values into a new object to avoid collisions, like var to = {x:0}, from = {x:500}; timeline.fromTo(e, from, to).fromTo(e, to, from);


          tween._startAt._dp = 0; // don't allow it to get put back into root timeline! Like when revert() is called and totalTime() gets set.

          tween._startAt._sat = tween; // used in globalTime(). _sat stands for _startAtTween

          time < 0 && (_reverting$1 || !immediateRender && !autoRevert) && tween._startAt.revert(_revertConfigNoKill); // rare edge case, like if a render is forced in the negative direction of a non-initted tween.

          if (immediateRender) {
            if (dur && time <= 0 && tTime <= 0) {
              // check tTime here because in the case of a yoyo tween whose playhead gets pushed to the end like tween.progress(1), we should allow it through so that the onComplete gets fired properly.
              time && (tween._zTime = time);
              return; //we skip initialization here so that overwriting doesn't occur until the tween actually begins. Otherwise, if you create several immediateRender:true tweens of the same target/properties to drop into a Timeline, the last one created would overwrite the first ones because they didn't get placed into the timeline yet before the first render occurs and kicks in overwriting.
            }
          }
        } else if (runBackwards && dur) {
          //from() tweens must be handled uniquely: their beginning values must be rendered but we don't want overwriting to occur yet (when time is still 0). Wait until the tween actually begins before doing all the routines like overwriting. At that time, we should render at the END of the tween to ensure that things initialize correctly (remember, from() tweens go backwards)
          if (!prevStartAt) {
            time && (immediateRender = false); //in rare cases (like if a from() tween runs and then is invalidate()-ed), immediateRender could be true but the initial forced-render gets skipped, so there's no need to force the render in this context when the _time is greater than 0

            p = _setDefaults$1({
              overwrite: false,
              data: "isFromStart",
              //we tag the tween with as "isFromStart" so that if [inside a plugin] we need to only do something at the very END of a tween, we have a way of identifying this tween as merely the one that's setting the beginning values for a "from()" tween. For example, clearProps in CSSPlugin should only get applied at the very END of a tween and without this tag, from(...{height:100, clearProps:"height", delay:1}) would wipe the height at the beginning of the tween and after 1 second, it'd kick back in.
              lazy: immediateRender && !prevStartAt && _isNotFalse(lazy),
              immediateRender: immediateRender,
              //zero-duration tweens render immediately by default, but if we're not specifically instructed to render this tween immediately, we should skip this and merely _init() to record the starting values (rendering them immediately would push them to completion which is wasteful in that case - we'd have to render(-1) immediately after)
              stagger: 0,
              parent: parent //ensures that nested tweens that had a stagger are handled properly, like gsap.from(".class", {y: gsap.utils.wrap([-100,100]), stagger: 0.5})

            }, cleanVars);
            harnessVars && (p[harness.prop] = harnessVars); // in case someone does something like .from(..., {css:{}})

            _removeFromParent(tween._startAt = Tween.set(targets, p));

            tween._startAt._dp = 0; // don't allow it to get put back into root timeline!

            tween._startAt._sat = tween; // used in globalTime()

            time < 0 && (_reverting$1 ? tween._startAt.revert(_revertConfigNoKill) : tween._startAt.render(-1, true));
            tween._zTime = time;

            if (!immediateRender) {
              _initTween(tween._startAt, _tinyNum, _tinyNum); //ensures that the initial values are recorded

            } else if (!time) {
              return;
            }
          }
        }

        tween._pt = tween._ptCache = 0;
        lazy = dur && _isNotFalse(lazy) || lazy && !dur;

        for (i = 0; i < targets.length; i++) {
          target = targets[i];
          gsData = target._gsap || _harness(targets)[i]._gsap;
          tween._ptLookup[i] = ptLookup = {};
          _lazyLookup[gsData.id] && _lazyTweens.length && _lazyRender(); //if other tweens of the same target have recently initted but haven't rendered yet, we've got to force the render so that the starting values are correct (imagine populating a timeline with a bunch of sequential tweens and then jumping to the end)

          index = fullTargets === targets ? i : fullTargets.indexOf(target);

          if (harness && (plugin = new harness()).init(target, harnessVars || cleanVars, tween, index, fullTargets) !== false) {
            tween._pt = pt = new PropTween(tween._pt, target, plugin.name, 0, 1, plugin.render, plugin, 0, plugin.priority);

            plugin._props.forEach(function (name) {
              ptLookup[name] = pt;
            });

            plugin.priority && (hasPriority = 1);
          }

          if (!harness || harnessVars) {
            for (p in cleanVars) {
              if (_plugins[p] && (plugin = _checkPlugin(p, cleanVars, tween, index, target, fullTargets))) {
                plugin.priority && (hasPriority = 1);
              } else {
                ptLookup[p] = pt = _addPropTween.call(tween, target, p, "get", cleanVars[p], index, fullTargets, 0, vars.stringFilter);
              }
            }
          }

          tween._op && tween._op[i] && tween.kill(target, tween._op[i]);

          if (autoOverwrite && tween._pt) {
            _overwritingTween = tween;

            _globalTimeline.killTweensOf(target, ptLookup, tween.globalTime(time)); // make sure the overwriting doesn't overwrite THIS tween!!!


            overwritten = !tween.parent;
            _overwritingTween = 0;
          }

          tween._pt && lazy && (_lazyLookup[gsData.id] = 1);
        }

        hasPriority && _sortPropTweensByPriority(tween);
        tween._onInit && tween._onInit(tween); //plugins like RoundProps must wait until ALL of the PropTweens are instantiated. In the plugin's init() function, it sets the _onInit on the tween instance. May not be pretty/intuitive, but it's fast and keeps file size down.
      }

      tween._onUpdate = onUpdate;
      tween._initted = (!tween._op || tween._pt) && !overwritten; // if overwrittenProps resulted in the entire tween being killed, do NOT flag it as initted or else it may render for one tick.

      keyframes && time <= 0 && tl.render(_bigNum$1, true, true); // if there's a 0% keyframe, it'll render in the "before" state for any staggered/delayed animations thus when the following tween initializes, it'll use the "before" state instead of the "after" state as the initial values.
    },
        _updatePropTweens = function _updatePropTweens(tween, property, value, start, startIsRelative, ratio, time, skipRecursion) {
      var ptCache = (tween._pt && tween._ptCache || (tween._ptCache = {}))[property],
          pt,
          rootPT,
          lookup,
          i;

      if (!ptCache) {
        ptCache = tween._ptCache[property] = [];
        lookup = tween._ptLookup;
        i = tween._targets.length;

        while (i--) {
          pt = lookup[i][property];

          if (pt && pt.d && pt.d._pt) {
            // it's a plugin, so find the nested PropTween
            pt = pt.d._pt;

            while (pt && pt.p !== property && pt.fp !== property) {
              // "fp" is functionParam for things like setting CSS variables which require .setProperty("--var-name", value)
              pt = pt._next;
            }
          }

          if (!pt) {
            // there is no PropTween associated with that property, so we must FORCE one to be created and ditch out of this
            // if the tween has other properties that already rendered at new positions, we'd normally have to rewind to put them back like tween.render(0, true) before forcing an _initTween(), but that can create another edge case like tweening a timeline's progress would trigger onUpdates to fire which could move other things around. It's better to just inform users that .resetTo() should ONLY be used for tweens that already have that property. For example, you can't gsap.to(...{ y: 0 }) and then tween.restTo("x", 200) for example.
            _forceAllPropTweens = 1; // otherwise, when we _addPropTween() and it finds no change between the start and end values, it skips creating a PropTween (for efficiency...why tween when there's no difference?) but in this case we NEED that PropTween created so we can edit it.

            tween.vars[property] = "+=0";

            _initTween(tween, time);

            _forceAllPropTweens = 0;
            return skipRecursion ? _warn(property + " not eligible for reset") : 1; // if someone tries to do a quickTo() on a special property like borderRadius which must get split into 4 different properties, that's not eligible for .resetTo().
          }

          ptCache.push(pt);
        }
      }

      i = ptCache.length;

      while (i--) {
        rootPT = ptCache[i];
        pt = rootPT._pt || rootPT; // complex values may have nested PropTweens. We only accommodate the FIRST value.

        pt.s = (start || start === 0) && !startIsRelative ? start : pt.s + (start || 0) + ratio * pt.c;
        pt.c = value - pt.s;
        rootPT.e && (rootPT.e = _round$1(value) + getUnit(rootPT.e)); // mainly for CSSPlugin (end value)

        rootPT.b && (rootPT.b = pt.s + getUnit(rootPT.b)); // (beginning value)
      }
    },
        _addAliasesToVars = function _addAliasesToVars(targets, vars) {
      var harness = targets[0] ? _getCache(targets[0]).harness : 0,
          propertyAliases = harness && harness.aliases,
          copy,
          p,
          i,
          aliases;

      if (!propertyAliases) {
        return vars;
      }

      copy = _merge({}, vars);

      for (p in propertyAliases) {
        if (p in copy) {
          aliases = propertyAliases[p].split(",");
          i = aliases.length;

          while (i--) {
            copy[aliases[i]] = copy[p];
          }
        }
      }

      return copy;
    },
        // parses multiple formats, like {"0%": {x: 100}, {"50%": {x: -20}} and { x: {"0%": 100, "50%": -20} }, and an "ease" can be set on any object. We populate an "allProps" object with an Array for each property, like {x: [{}, {}], y:[{}, {}]} with data for each property tween. The objects have a "t" (time), "v", (value), and "e" (ease) property. This allows us to piece together a timeline later.
    _parseKeyframe = function _parseKeyframe(prop, obj, allProps, easeEach) {
      var ease = obj.ease || easeEach || "power1.inOut",
          p,
          a;

      if (_isArray(obj)) {
        a = allProps[prop] || (allProps[prop] = []); // t = time (out of 100), v = value, e = ease

        obj.forEach(function (value, i) {
          return a.push({
            t: i / (obj.length - 1) * 100,
            v: value,
            e: ease
          });
        });
      } else {
        for (p in obj) {
          a = allProps[p] || (allProps[p] = []);
          p === "ease" || a.push({
            t: parseFloat(prop),
            v: obj[p],
            e: ease
          });
        }
      }
    },
        _parseFuncOrString = function _parseFuncOrString(value, tween, i, target, targets) {
      return _isFunction$1(value) ? value.call(tween, i, target, targets) : _isString$1(value) && ~value.indexOf("random(") ? _replaceRandom(value) : value;
    },
        _staggerTweenProps = _callbackNames + "repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",
        _staggerPropsToSkip = {};

    _forEachName(_staggerTweenProps + ",id,stagger,delay,duration,paused,scrollTrigger", function (name) {
      return _staggerPropsToSkip[name] = 1;
    });
    /*
     * --------------------------------------------------------------------------------------
     * TWEEN
     * --------------------------------------------------------------------------------------
     */


    var Tween = /*#__PURE__*/function (_Animation2) {
      _inheritsLoose(Tween, _Animation2);

      function Tween(targets, vars, position, skipInherit) {
        var _this3;

        if (typeof vars === "number") {
          position.duration = vars;
          vars = position;
          position = null;
        }

        _this3 = _Animation2.call(this, skipInherit ? vars : _inheritDefaults(vars)) || this;
        var _this3$vars = _this3.vars,
            duration = _this3$vars.duration,
            delay = _this3$vars.delay,
            immediateRender = _this3$vars.immediateRender,
            stagger = _this3$vars.stagger,
            overwrite = _this3$vars.overwrite,
            keyframes = _this3$vars.keyframes,
            defaults = _this3$vars.defaults,
            scrollTrigger = _this3$vars.scrollTrigger,
            yoyoEase = _this3$vars.yoyoEase,
            parent = vars.parent || _globalTimeline,
            parsedTargets = (_isArray(targets) || _isTypedArray(targets) ? _isNumber$1(targets[0]) : "length" in vars) ? [targets] : toArray(targets),
            tl,
            i,
            copy,
            l,
            p,
            curTarget,
            staggerFunc,
            staggerVarsToMerge;
        _this3._targets = parsedTargets.length ? _harness(parsedTargets) : _warn("GSAP target " + targets + " not found. https://gsap.com", !_config.nullTargetWarn) || [];
        _this3._ptLookup = []; //PropTween lookup. An array containing an object for each target, having keys for each tweening property

        _this3._overwrite = overwrite;

        if (keyframes || stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
          vars = _this3.vars;
          tl = _this3.timeline = new Timeline({
            data: "nested",
            defaults: defaults || {},
            targets: parent && parent.data === "nested" ? parent.vars.targets : parsedTargets
          }); // we need to store the targets because for staggers and keyframes, we end up creating an individual tween for each but function-based values need to know the index and the whole Array of targets.

          tl.kill();
          tl.parent = tl._dp = _assertThisInitialized(_this3);
          tl._start = 0;

          if (stagger || _isFuncOrString(duration) || _isFuncOrString(delay)) {
            l = parsedTargets.length;
            staggerFunc = stagger && distribute(stagger);

            if (_isObject$1(stagger)) {
              //users can pass in callbacks like onStart/onComplete in the stagger object. These should fire with each individual tween.
              for (p in stagger) {
                if (~_staggerTweenProps.indexOf(p)) {
                  staggerVarsToMerge || (staggerVarsToMerge = {});
                  staggerVarsToMerge[p] = stagger[p];
                }
              }
            }

            for (i = 0; i < l; i++) {
              copy = _copyExcluding(vars, _staggerPropsToSkip);
              copy.stagger = 0;
              yoyoEase && (copy.yoyoEase = yoyoEase);
              staggerVarsToMerge && _merge(copy, staggerVarsToMerge);
              curTarget = parsedTargets[i]; //don't just copy duration or delay because if they're a string or function, we'd end up in an infinite loop because _isFuncOrString() would evaluate as true in the child tweens, entering this loop, etc. So we parse the value straight from vars and default to 0.

              copy.duration = +_parseFuncOrString(duration, _assertThisInitialized(_this3), i, curTarget, parsedTargets);
              copy.delay = (+_parseFuncOrString(delay, _assertThisInitialized(_this3), i, curTarget, parsedTargets) || 0) - _this3._delay;

              if (!stagger && l === 1 && copy.delay) {
                // if someone does delay:"random(1, 5)", repeat:-1, for example, the delay shouldn't be inside the repeat.
                _this3._delay = delay = copy.delay;
                _this3._start += delay;
                copy.delay = 0;
              }

              tl.to(curTarget, copy, staggerFunc ? staggerFunc(i, curTarget, parsedTargets) : 0);
              tl._ease = _easeMap.none;
            }

            tl.duration() ? duration = delay = 0 : _this3.timeline = 0; // if the timeline's duration is 0, we don't need a timeline internally!
          } else if (keyframes) {
            _inheritDefaults(_setDefaults$1(tl.vars.defaults, {
              ease: "none"
            }));

            tl._ease = _parseEase(keyframes.ease || vars.ease || "none");
            var time = 0,
                a,
                kf,
                v;

            if (_isArray(keyframes)) {
              keyframes.forEach(function (frame) {
                return tl.to(parsedTargets, frame, ">");
              });
              tl.duration(); // to ensure tl._dur is cached because we tap into it for performance purposes in the render() method.
            } else {
              copy = {};

              for (p in keyframes) {
                p === "ease" || p === "easeEach" || _parseKeyframe(p, keyframes[p], copy, keyframes.easeEach);
              }

              for (p in copy) {
                a = copy[p].sort(function (a, b) {
                  return a.t - b.t;
                });
                time = 0;

                for (i = 0; i < a.length; i++) {
                  kf = a[i];
                  v = {
                    ease: kf.e,
                    duration: (kf.t - (i ? a[i - 1].t : 0)) / 100 * duration
                  };
                  v[p] = kf.v;
                  tl.to(parsedTargets, v, time);
                  time += v.duration;
                }
              }

              tl.duration() < duration && tl.to({}, {
                duration: duration - tl.duration()
              }); // in case keyframes didn't go to 100%
            }
          }

          duration || _this3.duration(duration = tl.duration());
        } else {
          _this3.timeline = 0; //speed optimization, faster lookups (no going up the prototype chain)
        }

        if (overwrite === true && !_suppressOverwrites$1) {
          _overwritingTween = _assertThisInitialized(_this3);

          _globalTimeline.killTweensOf(parsedTargets);

          _overwritingTween = 0;
        }

        _addToTimeline(parent, _assertThisInitialized(_this3), position);

        vars.reversed && _this3.reverse();
        vars.paused && _this3.paused(true);

        if (immediateRender || !duration && !keyframes && _this3._start === _roundPrecise(parent._time) && _isNotFalse(immediateRender) && _hasNoPausedAncestors(_assertThisInitialized(_this3)) && parent.data !== "nested") {
          _this3._tTime = -_tinyNum; //forces a render without having to set the render() "force" parameter to true because we want to allow lazying by default (using the "force" parameter always forces an immediate full render)

          _this3.render(Math.max(0, -delay) || 0); //in case delay is negative

        }

        scrollTrigger && _scrollTrigger(_assertThisInitialized(_this3), scrollTrigger);
        return _this3;
      }

      var _proto3 = Tween.prototype;

      _proto3.render = function render(totalTime, suppressEvents, force) {
        var prevTime = this._time,
            tDur = this._tDur,
            dur = this._dur,
            isNegative = totalTime < 0,
            tTime = totalTime > tDur - _tinyNum && !isNegative ? tDur : totalTime < _tinyNum ? 0 : totalTime,
            time,
            pt,
            iteration,
            cycleDuration,
            prevIteration,
            isYoyo,
            ratio,
            timeline,
            yoyoEase;

        if (!dur) {
          _renderZeroDurationTween(this, totalTime, suppressEvents, force);
        } else if (tTime !== this._tTime || !totalTime || force || !this._initted && this._tTime || this._startAt && this._zTime < 0 !== isNegative || this._lazy) {
          // this senses if we're crossing over the start time, in which case we must record _zTime and force the render, but we do it in this lengthy conditional way for performance reasons (usually we can skip the calculations): this._initted && (this._zTime < 0) !== (totalTime < 0)
          time = tTime;
          timeline = this.timeline;

          if (this._repeat) {
            //adjust the time for repeats and yoyos
            cycleDuration = dur + this._rDelay;

            if (this._repeat < -1 && isNegative) {
              return this.totalTime(cycleDuration * 100 + totalTime, suppressEvents, force);
            }

            time = _roundPrecise(tTime % cycleDuration); //round to avoid floating point errors. (4 % 0.8 should be 0 but some browsers report it as 0.79999999!)

            if (tTime === tDur) {
              // the tDur === tTime is for edge cases where there's a lengthy decimal on the duration and it may reach the very end but the time is rendered as not-quite-there (remember, tDur is rounded to 4 decimals whereas dur isn't)
              iteration = this._repeat;
              time = dur;
            } else {
              prevIteration = _roundPrecise(tTime / cycleDuration); // full decimal version of iterations, not the previous iteration (we're reusing prevIteration variable for efficiency)

              iteration = ~~prevIteration;

              if (iteration && iteration === prevIteration) {
                time = dur;
                iteration--;
              } else if (time > dur) {
                time = dur;
              }
            }

            isYoyo = this._yoyo && iteration & 1;

            if (isYoyo) {
              yoyoEase = this._yEase;
              time = dur - time;
            }

            prevIteration = _animationCycle(this._tTime, cycleDuration);

            if (time === prevTime && !force && this._initted && iteration === prevIteration) {
              //could be during the repeatDelay part. No need to render and fire callbacks.
              this._tTime = tTime;
              return this;
            }

            if (iteration !== prevIteration) {
              timeline && this._yEase && _propagateYoyoEase(timeline, isYoyo); //repeatRefresh functionality

              if (this.vars.repeatRefresh && !isYoyo && !this._lock && time !== cycleDuration && this._initted) {
                // this._time will === cycleDuration when we render at EXACTLY the end of an iteration. Without this condition, it'd often do the repeatRefresh render TWICE (again on the very next tick).
                this._lock = force = 1; //force, otherwise if lazy is true, the _attemptInitTween() will return and we'll jump out and get caught bouncing on each tick.

                this.render(_roundPrecise(cycleDuration * iteration), true).invalidate()._lock = 0;
              }
            }
          }

          if (!this._initted) {
            if (_attemptInitTween(this, isNegative ? totalTime : time, force, suppressEvents, tTime)) {
              this._tTime = 0; // in constructor if immediateRender is true, we set _tTime to -_tinyNum to have the playhead cross the starting point but we can't leave _tTime as a negative number.

              return this;
            }

            if (prevTime !== this._time && !(force && this.vars.repeatRefresh && iteration !== prevIteration)) {
              // rare edge case - during initialization, an onUpdate in the _startAt (.fromTo()) might force this tween to render at a different spot in which case we should ditch this render() call so that it doesn't revert the values. But we also don't want to dump if we're doing a repeatRefresh render!
              return this;
            }

            if (dur !== this._dur) {
              // while initting, a plugin like InertiaPlugin might alter the duration, so rerun from the start to ensure everything renders as it should.
              return this.render(totalTime, suppressEvents, force);
            }
          }

          this._tTime = tTime;
          this._time = time;

          if (!this._act && this._ts) {
            this._act = 1; //as long as it's not paused, force it to be active so that if the user renders independent of the parent timeline, it'll be forced to re-render on the next tick.

            this._lazy = 0;
          }

          this.ratio = ratio = (yoyoEase || this._ease)(time / dur);

          if (this._from) {
            this.ratio = ratio = 1 - ratio;
          }

          if (time && !prevTime && !suppressEvents && !iteration) {
            _callback$1(this, "onStart");

            if (this._tTime !== tTime) {
              // in case the onStart triggered a render at a different spot, eject. Like if someone did animation.pause(0.5) or something inside the onStart.
              return this;
            }
          }

          pt = this._pt;

          while (pt) {
            pt.r(ratio, pt.d);
            pt = pt._next;
          }

          timeline && timeline.render(totalTime < 0 ? totalTime : timeline._dur * timeline._ease(time / this._dur), suppressEvents, force) || this._startAt && (this._zTime = totalTime);

          if (this._onUpdate && !suppressEvents) {
            isNegative && _rewindStartAt(this, totalTime, suppressEvents, force); //note: for performance reasons, we tuck this conditional logic inside less traveled areas (most tweens don't have an onUpdate). We'd just have it at the end before the onComplete, but the values should be updated before any onUpdate is called, so we ALSO put it here and then if it's not called, we do so later near the onComplete.

            _callback$1(this, "onUpdate");
          }

          this._repeat && iteration !== prevIteration && this.vars.onRepeat && !suppressEvents && this.parent && _callback$1(this, "onRepeat");

          if ((tTime === this._tDur || !tTime) && this._tTime === tTime) {
            isNegative && !this._onUpdate && _rewindStartAt(this, totalTime, true, true);
            (totalTime || !dur) && (tTime === this._tDur && this._ts > 0 || !tTime && this._ts < 0) && _removeFromParent(this, 1); // don't remove if we're rendering at exactly a time of 0, as there could be autoRevert values that should get set on the next tick (if the playhead goes backward beyond the startTime, negative totalTime). Don't remove if the timeline is reversed and the playhead isn't at 0, otherwise tl.progress(1).reverse() won't work. Only remove if the playhead is at the end and timeScale is positive, or if the playhead is at 0 and the timeScale is negative.

            if (!suppressEvents && !(isNegative && !prevTime) && (tTime || prevTime || isYoyo)) {
              // if prevTime and tTime are zero, we shouldn't fire the onReverseComplete. This could happen if you gsap.to(... {paused:true}).play();
              _callback$1(this, tTime === tDur ? "onComplete" : "onReverseComplete", true);

              this._prom && !(tTime < tDur && this.timeScale() > 0) && this._prom();
            }
          }
        }

        return this;
      };

      _proto3.targets = function targets() {
        return this._targets;
      };

      _proto3.invalidate = function invalidate(soft) {
        // "soft" gives us a way to clear out everything EXCEPT the recorded pre-"from" portion of from() tweens. Otherwise, for example, if you tween.progress(1).render(0, true true).invalidate(), the "from" values would persist and then on the next render, the from() tweens would initialize and the current value would match the "from" values, thus animate from the same value to the same value (no animation). We tap into this in ScrollTrigger's refresh() where we must push a tween to completion and then back again but honor its init state in case the tween is dependent on another tween further up on the page.
        (!soft || !this.vars.runBackwards) && (this._startAt = 0);
        this._pt = this._op = this._onUpdate = this._lazy = this.ratio = 0;
        this._ptLookup = [];
        this.timeline && this.timeline.invalidate(soft);
        return _Animation2.prototype.invalidate.call(this, soft);
      };

      _proto3.resetTo = function resetTo(property, value, start, startIsRelative, skipRecursion) {
        _tickerActive || _ticker.wake();
        this._ts || this.play();
        var time = Math.min(this._dur, (this._dp._time - this._start) * this._ts),
            ratio;
        this._initted || _initTween(this, time);
        ratio = this._ease(time / this._dur); // don't just get tween.ratio because it may not have rendered yet.
        // possible future addition to allow an object with multiple values to update, like tween.resetTo({x: 100, y: 200}); At this point, it doesn't seem worth the added kb given the fact that most users will likely opt for the convenient gsap.quickTo() way of interacting with this method.
        // if (_isObject(property)) { // performance optimization
        // 	for (p in property) {
        // 		if (_updatePropTweens(this, p, property[p], value ? value[p] : null, start, ratio, time)) {
        // 			return this.resetTo(property, value, start, startIsRelative); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
        // 		}
        // 	}
        // } else {

        if (_updatePropTweens(this, property, value, start, startIsRelative, ratio, time, skipRecursion)) {
          return this.resetTo(property, value, start, startIsRelative, 1); // if a PropTween wasn't found for the property, it'll get forced with a re-initialization so we need to jump out and start over again.
        } //}


        _alignPlayhead(this, 0);

        this.parent || _addLinkedListItem(this._dp, this, "_first", "_last", this._dp._sort ? "_start" : 0);
        return this.render(0);
      };

      _proto3.kill = function kill(targets, vars) {
        if (vars === void 0) {
          vars = "all";
        }

        if (!targets && (!vars || vars === "all")) {
          this._lazy = this._pt = 0;
          this.parent ? _interrupt(this) : this.scrollTrigger && this.scrollTrigger.kill(!!_reverting$1);
          return this;
        }

        if (this.timeline) {
          var tDur = this.timeline.totalDuration();
          this.timeline.killTweensOf(targets, vars, _overwritingTween && _overwritingTween.vars.overwrite !== true)._first || _interrupt(this); // if nothing is left tweening, interrupt.

          this.parent && tDur !== this.timeline.totalDuration() && _setDuration(this, this._dur * this.timeline._tDur / tDur, 0, 1); // if a nested tween is killed that changes the duration, it should affect this tween's duration. We must use the ratio, though, because sometimes the internal timeline is stretched like for keyframes where they don't all add up to whatever the parent tween's duration was set to.

          return this;
        }

        var parsedTargets = this._targets,
            killingTargets = targets ? toArray(targets) : parsedTargets,
            propTweenLookup = this._ptLookup,
            firstPT = this._pt,
            overwrittenProps,
            curLookup,
            curOverwriteProps,
            props,
            p,
            pt,
            i;

        if ((!vars || vars === "all") && _arraysMatch(parsedTargets, killingTargets)) {
          vars === "all" && (this._pt = 0);
          return _interrupt(this);
        }

        overwrittenProps = this._op = this._op || [];

        if (vars !== "all") {
          //so people can pass in a comma-delimited list of property names
          if (_isString$1(vars)) {
            p = {};

            _forEachName(vars, function (name) {
              return p[name] = 1;
            });

            vars = p;
          }

          vars = _addAliasesToVars(parsedTargets, vars);
        }

        i = parsedTargets.length;

        while (i--) {
          if (~killingTargets.indexOf(parsedTargets[i])) {
            curLookup = propTweenLookup[i];

            if (vars === "all") {
              overwrittenProps[i] = vars;
              props = curLookup;
              curOverwriteProps = {};
            } else {
              curOverwriteProps = overwrittenProps[i] = overwrittenProps[i] || {};
              props = vars;
            }

            for (p in props) {
              pt = curLookup && curLookup[p];

              if (pt) {
                if (!("kill" in pt.d) || pt.d.kill(p) === true) {
                  _removeLinkedListItem(this, pt, "_pt");
                }

                delete curLookup[p];
              }

              if (curOverwriteProps !== "all") {
                curOverwriteProps[p] = 1;
              }
            }
          }
        }

        this._initted && !this._pt && firstPT && _interrupt(this); //if all tweening properties are killed, kill the tween. Without this line, if there's a tween with multiple targets and then you killTweensOf() each target individually, the tween would technically still remain active and fire its onComplete even though there aren't any more properties tweening.

        return this;
      };

      Tween.to = function to(targets, vars) {
        return new Tween(targets, vars, arguments[2]);
      };

      Tween.from = function from(targets, vars) {
        return _createTweenType(1, arguments);
      };

      Tween.delayedCall = function delayedCall(delay, callback, params, scope) {
        return new Tween(callback, 0, {
          immediateRender: false,
          lazy: false,
          overwrite: false,
          delay: delay,
          onComplete: callback,
          onReverseComplete: callback,
          onCompleteParams: params,
          onReverseCompleteParams: params,
          callbackScope: scope
        }); // we must use onReverseComplete too for things like timeline.add(() => {...}) which should be triggered in BOTH directions (forward and reverse)
      };

      Tween.fromTo = function fromTo(targets, fromVars, toVars) {
        return _createTweenType(2, arguments);
      };

      Tween.set = function set(targets, vars) {
        vars.duration = 0;
        vars.repeatDelay || (vars.repeat = 0);
        return new Tween(targets, vars);
      };

      Tween.killTweensOf = function killTweensOf(targets, props, onlyActive) {
        return _globalTimeline.killTweensOf(targets, props, onlyActive);
      };

      return Tween;
    }(Animation);

    _setDefaults$1(Tween.prototype, {
      _targets: [],
      _lazy: 0,
      _startAt: 0,
      _op: 0,
      _onInit: 0
    }); //add the pertinent timeline methods to Tween instances so that users can chain conveniently and create a timeline automatically. (removed due to concerns that it'd ultimately add to more confusion especially for beginners)
    // _forEachName("to,from,fromTo,set,call,add,addLabel,addPause", name => {
    // 	Tween.prototype[name] = function() {
    // 		let tl = new Timeline();
    // 		return _addToTimeline(tl, this)[name].apply(tl, toArray(arguments));
    // 	}
    // });
    //for backward compatibility. Leverage the timeline calls.


    _forEachName("staggerTo,staggerFrom,staggerFromTo", function (name) {
      Tween[name] = function () {
        var tl = new Timeline(),
            params = _slice.call(arguments, 0);

        params.splice(name === "staggerFromTo" ? 5 : 4, 0, 0);
        return tl[name].apply(tl, params);
      };
    });
    /*
     * --------------------------------------------------------------------------------------
     * PROPTWEEN
     * --------------------------------------------------------------------------------------
     */


    var _setterPlain = function _setterPlain(target, property, value) {
      return target[property] = value;
    },
        _setterFunc = function _setterFunc(target, property, value) {
      return target[property](value);
    },
        _setterFuncWithParam = function _setterFuncWithParam(target, property, value, data) {
      return target[property](data.fp, value);
    },
        _setterAttribute = function _setterAttribute(target, property, value) {
      return target.setAttribute(property, value);
    },
        _getSetter = function _getSetter(target, property) {
      return _isFunction$1(target[property]) ? _setterFunc : _isUndefined(target[property]) && target.setAttribute ? _setterAttribute : _setterPlain;
    },
        _renderPlain = function _renderPlain(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 1000000) / 1000000, data);
    },
        _renderBoolean = function _renderBoolean(ratio, data) {
      return data.set(data.t, data.p, !!(data.s + data.c * ratio), data);
    },
        _renderComplexString = function _renderComplexString(ratio, data) {
      var pt = data._pt,
          s = "";

      if (!ratio && data.b) {
        //b = beginning string
        s = data.b;
      } else if (ratio === 1 && data.e) {
        //e = ending string
        s = data.e;
      } else {
        while (pt) {
          s = pt.p + (pt.m ? pt.m(pt.s + pt.c * ratio) : Math.round((pt.s + pt.c * ratio) * 10000) / 10000) + s; //we use the "p" property for the text inbetween (like a suffix). And in the context of a complex string, the modifier (m) is typically just Math.round(), like for RGB colors.

          pt = pt._next;
        }

        s += data.c; //we use the "c" of the PropTween to store the final chunk of non-numeric text.
      }

      data.set(data.t, data.p, s, data);
    },
        _renderPropTweens = function _renderPropTweens(ratio, data) {
      var pt = data._pt;

      while (pt) {
        pt.r(ratio, pt.d);
        pt = pt._next;
      }
    },
        _addPluginModifier = function _addPluginModifier(modifier, tween, target, property) {
      var pt = this._pt,
          next;

      while (pt) {
        next = pt._next;
        pt.p === property && pt.modifier(modifier, tween, target);
        pt = next;
      }
    },
        _killPropTweensOf = function _killPropTweensOf(property) {
      var pt = this._pt,
          hasNonDependentRemaining,
          next;

      while (pt) {
        next = pt._next;

        if (pt.p === property && !pt.op || pt.op === property) {
          _removeLinkedListItem(this, pt, "_pt");
        } else if (!pt.dep) {
          hasNonDependentRemaining = 1;
        }

        pt = next;
      }

      return !hasNonDependentRemaining;
    },
        _setterWithModifier = function _setterWithModifier(target, property, value, data) {
      data.mSet(target, property, data.m.call(data.tween, value, data.mt), data);
    },
        _sortPropTweensByPriority = function _sortPropTweensByPriority(parent) {
      var pt = parent._pt,
          next,
          pt2,
          first,
          last; //sorts the PropTween linked list in order of priority because some plugins need to do their work after ALL of the PropTweens were created (like RoundPropsPlugin and ModifiersPlugin)

      while (pt) {
        next = pt._next;
        pt2 = first;

        while (pt2 && pt2.pr > pt.pr) {
          pt2 = pt2._next;
        }

        if (pt._prev = pt2 ? pt2._prev : last) {
          pt._prev._next = pt;
        } else {
          first = pt;
        }

        if (pt._next = pt2) {
          pt2._prev = pt;
        } else {
          last = pt;
        }

        pt = next;
      }

      parent._pt = first;
    }; //PropTween key: t = target, p = prop, r = renderer, d = data, s = start, c = change, op = overwriteProperty (ONLY populated when it's different than p), pr = priority, _next/_prev for the linked list siblings, set = setter, m = modifier, mSet = modifierSetter (the original setter, before a modifier was added)


    var PropTween = /*#__PURE__*/function () {
      function PropTween(next, target, prop, start, change, renderer, data, setter, priority) {
        this.t = target;
        this.s = start;
        this.c = change;
        this.p = prop;
        this.r = renderer || _renderPlain;
        this.d = data || this;
        this.set = setter || _setterPlain;
        this.pr = priority || 0;
        this._next = next;

        if (next) {
          next._prev = this;
        }
      }

      var _proto4 = PropTween.prototype;

      _proto4.modifier = function modifier(func, tween, target) {
        this.mSet = this.mSet || this.set; //in case it was already set (a PropTween can only have one modifier)

        this.set = _setterWithModifier;
        this.m = func;
        this.mt = target; //modifier target

        this.tween = tween;
      };

      return PropTween;
    }(); //Initialization tasks

    _forEachName(_callbackNames + "parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger", function (name) {
      return _reservedProps[name] = 1;
    });

    _globals.TweenMax = _globals.TweenLite = Tween;
    _globals.TimelineLite = _globals.TimelineMax = Timeline;
    _globalTimeline = new Timeline({
      sortChildren: false,
      defaults: _defaults$1,
      autoRemoveChildren: true,
      id: "root",
      smoothChildTiming: true
    });
    _config.stringFilter = _colorStringFilter;

    var _media = [],
        _listeners$1 = {},
        _emptyArray$1 = [],
        _lastMediaTime = 0,
        _contextID = 0,
        _dispatch$1 = function _dispatch(type) {
      return (_listeners$1[type] || _emptyArray$1).map(function (f) {
        return f();
      });
    },
        _onMediaChange = function _onMediaChange() {
      var time = Date.now(),
          matches = [];

      if (time - _lastMediaTime > 2) {
        _dispatch$1("matchMediaInit");

        _media.forEach(function (c) {
          var queries = c.queries,
              conditions = c.conditions,
              match,
              p,
              anyMatch,
              toggled;

          for (p in queries) {
            match = _win$3.matchMedia(queries[p]).matches; // Firefox doesn't update the "matches" property of the MediaQueryList object correctly - it only does so as it calls its change handler - so we must re-create a media query here to ensure it's accurate.

            match && (anyMatch = 1);

            if (match !== conditions[p]) {
              conditions[p] = match;
              toggled = 1;
            }
          }

          if (toggled) {
            c.revert();
            anyMatch && matches.push(c);
          }
        });

        _dispatch$1("matchMediaRevert");

        matches.forEach(function (c) {
          return c.onMatch(c, function (func) {
            return c.add(null, func);
          });
        });
        _lastMediaTime = time;

        _dispatch$1("matchMedia");
      }
    };

    var Context = /*#__PURE__*/function () {
      function Context(func, scope) {
        this.selector = scope && selector(scope);
        this.data = [];
        this._r = []; // returned/cleanup functions

        this.isReverted = false;
        this.id = _contextID++; // to work around issues that frameworks like Vue cause by making things into Proxies which make it impossible to do something like _media.indexOf(this) because "this" would no longer refer to the Context instance itself - it'd refer to a Proxy! We needed a way to identify the context uniquely

        func && this.add(func);
      }

      var _proto5 = Context.prototype;

      _proto5.add = function add(name, func, scope) {
        // possible future addition if we need the ability to add() an animation to a context and for whatever reason cannot create that animation inside of a context.add(() => {...}) function.
        // if (name && _isFunction(name.revert)) {
        // 	this.data.push(name);
        // 	return (name._ctx = this);
        // }
        if (_isFunction$1(name)) {
          scope = func;
          func = name;
          name = _isFunction$1;
        }

        var self = this,
            f = function f() {
          var prev = _context$2,
              prevSelector = self.selector,
              result;
          prev && prev !== self && prev.data.push(self);
          scope && (self.selector = selector(scope));
          _context$2 = self;
          result = func.apply(self, arguments);
          _isFunction$1(result) && self._r.push(result);
          _context$2 = prev;
          self.selector = prevSelector;
          self.isReverted = false;
          return result;
        };

        self.last = f;
        return name === _isFunction$1 ? f(self, function (func) {
          return self.add(null, func);
        }) : name ? self[name] = f : f;
      };

      _proto5.ignore = function ignore(func) {
        var prev = _context$2;
        _context$2 = null;
        func(this);
        _context$2 = prev;
      };

      _proto5.getTweens = function getTweens() {
        var a = [];
        this.data.forEach(function (e) {
          return e instanceof Context ? a.push.apply(a, e.getTweens()) : e instanceof Tween && !(e.parent && e.parent.data === "nested") && a.push(e);
        });
        return a;
      };

      _proto5.clear = function clear() {
        this._r.length = this.data.length = 0;
      };

      _proto5.kill = function kill(revert, matchMedia) {
        var _this4 = this;

        if (revert) {
          (function () {
            var tweens = _this4.getTweens(),
                i = _this4.data.length,
                t;

            while (i--) {
              // Flip plugin tweens are very different in that they should actually be pushed to their end. The plugin replaces the timeline's .revert() method to do exactly that. But we also need to remove any of those nested tweens inside the flip timeline so that they don't get individually reverted.
              t = _this4.data[i];

              if (t.data === "isFlip") {
                t.revert();
                t.getChildren(true, true, false).forEach(function (tween) {
                  return tweens.splice(tweens.indexOf(tween), 1);
                });
              }
            } // save as an object so that we can cache the globalTime for each tween to optimize performance during the sort


            tweens.map(function (t) {
              return {
                g: t._dur || t._delay || t._sat && !t._sat.vars.immediateRender ? t.globalTime(0) : -Infinity,
                t: t
              };
            }).sort(function (a, b) {
              return b.g - a.g || -Infinity;
            }).forEach(function (o) {
              return o.t.revert(revert);
            }); // note: all of the _startAt tweens should be reverted in reverse order that they were created, and they'll all have the same globalTime (-1) so the " || -1" in the sort keeps the order properly.

            i = _this4.data.length;

            while (i--) {
              // make sure we loop backwards so that, for example, SplitTexts that were created later on the same element get reverted first
              t = _this4.data[i];

              if (t instanceof Timeline) {
                if (t.data !== "nested") {
                  t.scrollTrigger && t.scrollTrigger.revert();
                  t.kill(); // don't revert() the timeline because that's duplicating efforts since we already reverted all the tweens
                }
              } else {
                !(t instanceof Tween) && t.revert && t.revert(revert);
              }
            }

            _this4._r.forEach(function (f) {
              return f(revert, _this4);
            });

            _this4.isReverted = true;
          })();
        } else {
          this.data.forEach(function (e) {
            return e.kill && e.kill();
          });
        }

        this.clear();

        if (matchMedia) {
          var i = _media.length;

          while (i--) {
            // previously, we checked _media.indexOf(this), but some frameworks like Vue enforce Proxy objects that make it impossible to get the proper result that way, so we must use a unique ID number instead.
            _media[i].id === this.id && _media.splice(i, 1);
          }
        }
      } // killWithCleanup() {
      // 	this.kill();
      // 	this._r.forEach(f => f(false, this));
      // }
      ;

      _proto5.revert = function revert(config) {
        this.kill(config || {});
      };

      return Context;
    }();

    var MatchMedia = /*#__PURE__*/function () {
      function MatchMedia(scope) {
        this.contexts = [];
        this.scope = scope;
        _context$2 && _context$2.data.push(this);
      }

      var _proto6 = MatchMedia.prototype;

      _proto6.add = function add(conditions, func, scope) {
        _isObject$1(conditions) || (conditions = {
          matches: conditions
        });
        var context = new Context(0, scope || this.scope),
            cond = context.conditions = {},
            mq,
            p,
            active;
        _context$2 && !context.selector && (context.selector = _context$2.selector); // in case a context is created inside a context. Like a gsap.matchMedia() that's inside a scoped gsap.context()

        this.contexts.push(context);
        func = context.add("onMatch", func);
        context.queries = conditions;

        for (p in conditions) {
          if (p === "all") {
            active = 1;
          } else {
            mq = _win$3.matchMedia(conditions[p]);

            if (mq) {
              _media.indexOf(context) < 0 && _media.push(context);
              (cond[p] = mq.matches) && (active = 1);
              mq.addListener ? mq.addListener(_onMediaChange) : mq.addEventListener("change", _onMediaChange);
            }
          }
        }

        active && func(context, function (f) {
          return context.add(null, f);
        });
        return this;
      } // refresh() {
      // 	let time = _lastMediaTime,
      // 		media = _media;
      // 	_lastMediaTime = -1;
      // 	_media = this.contexts;
      // 	_onMediaChange();
      // 	_lastMediaTime = time;
      // 	_media = media;
      // }
      ;

      _proto6.revert = function revert(config) {
        this.kill(config || {});
      };

      _proto6.kill = function kill(revert) {
        this.contexts.forEach(function (c) {
          return c.kill(revert, true);
        });
      };

      return MatchMedia;
    }();
    /*
     * --------------------------------------------------------------------------------------
     * GSAP
     * --------------------------------------------------------------------------------------
     */


    var _gsap = {
      registerPlugin: function registerPlugin() {
        for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
          args[_key2] = arguments[_key2];
        }

        args.forEach(function (config) {
          return _createPlugin(config);
        });
      },
      timeline: function timeline(vars) {
        return new Timeline(vars);
      },
      getTweensOf: function getTweensOf(targets, onlyActive) {
        return _globalTimeline.getTweensOf(targets, onlyActive);
      },
      getProperty: function getProperty(target, property, unit, uncache) {
        _isString$1(target) && (target = toArray(target)[0]); //in case selector text or an array is passed in

        var getter = _getCache(target || {}).get,
            format = unit ? _passThrough$1 : _numericIfPossible;

        unit === "native" && (unit = "");
        return !target ? target : !property ? function (property, unit, uncache) {
          return format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
        } : format((_plugins[property] && _plugins[property].get || getter)(target, property, unit, uncache));
      },
      quickSetter: function quickSetter(target, property, unit) {
        target = toArray(target);

        if (target.length > 1) {
          var setters = target.map(function (t) {
            return gsap$2.quickSetter(t, property, unit);
          }),
              l = setters.length;
          return function (value) {
            var i = l;

            while (i--) {
              setters[i](value);
            }
          };
        }

        target = target[0] || {};

        var Plugin = _plugins[property],
            cache = _getCache(target),
            p = cache.harness && (cache.harness.aliases || {})[property] || property,
            // in case it's an alias, like "rotate" for "rotation".
        setter = Plugin ? function (value) {
          var p = new Plugin();
          _quickTween._pt = 0;
          p.init(target, unit ? value + unit : value, _quickTween, 0, [target]);
          p.render(1, p);
          _quickTween._pt && _renderPropTweens(1, _quickTween);
        } : cache.set(target, p);

        return Plugin ? setter : function (value) {
          return setter(target, p, unit ? value + unit : value, cache, 1);
        };
      },
      quickTo: function quickTo(target, property, vars) {
        var _setDefaults2;

        var tween = gsap$2.to(target, _setDefaults$1((_setDefaults2 = {}, _setDefaults2[property] = "+=0.1", _setDefaults2.paused = true, _setDefaults2.stagger = 0, _setDefaults2), vars || {})),
            func = function func(value, start, startIsRelative) {
          return tween.resetTo(property, value, start, startIsRelative);
        };

        func.tween = tween;
        return func;
      },
      isTweening: function isTweening(targets) {
        return _globalTimeline.getTweensOf(targets, true).length > 0;
      },
      defaults: function defaults(value) {
        value && value.ease && (value.ease = _parseEase(value.ease, _defaults$1.ease));
        return _mergeDeep(_defaults$1, value || {});
      },
      config: function config(value) {
        return _mergeDeep(_config, value || {});
      },
      registerEffect: function registerEffect(_ref3) {
        var name = _ref3.name,
            effect = _ref3.effect,
            plugins = _ref3.plugins,
            defaults = _ref3.defaults,
            extendTimeline = _ref3.extendTimeline;
        (plugins || "").split(",").forEach(function (pluginName) {
          return pluginName && !_plugins[pluginName] && !_globals[pluginName] && _warn(name + " effect requires " + pluginName + " plugin.");
        });

        _effects[name] = function (targets, vars, tl) {
          return effect(toArray(targets), _setDefaults$1(vars || {}, defaults), tl);
        };

        if (extendTimeline) {
          Timeline.prototype[name] = function (targets, vars, position) {
            return this.add(_effects[name](targets, _isObject$1(vars) ? vars : (position = vars) && {}, this), position);
          };
        }
      },
      registerEase: function registerEase(name, ease) {
        _easeMap[name] = _parseEase(ease);
      },
      parseEase: function parseEase(ease, defaultEase) {
        return arguments.length ? _parseEase(ease, defaultEase) : _easeMap;
      },
      getById: function getById(id) {
        return _globalTimeline.getById(id);
      },
      exportRoot: function exportRoot(vars, includeDelayedCalls) {
        if (vars === void 0) {
          vars = {};
        }

        var tl = new Timeline(vars),
            child,
            next;
        tl.smoothChildTiming = _isNotFalse(vars.smoothChildTiming);

        _globalTimeline.remove(tl);

        tl._dp = 0; //otherwise it'll get re-activated when adding children and be re-introduced into _globalTimeline's linked list (then added to itself).

        tl._time = tl._tTime = _globalTimeline._time;
        child = _globalTimeline._first;

        while (child) {
          next = child._next;

          if (includeDelayedCalls || !(!child._dur && child instanceof Tween && child.vars.onComplete === child._targets[0])) {
            _addToTimeline(tl, child, child._start - child._delay);
          }

          child = next;
        }

        _addToTimeline(_globalTimeline, tl, 0);

        return tl;
      },
      context: function context(func, scope) {
        return func ? new Context(func, scope) : _context$2;
      },
      matchMedia: function matchMedia(scope) {
        return new MatchMedia(scope);
      },
      matchMediaRefresh: function matchMediaRefresh() {
        return _media.forEach(function (c) {
          var cond = c.conditions,
              found,
              p;

          for (p in cond) {
            if (cond[p]) {
              cond[p] = false;
              found = 1;
            }
          }

          found && c.revert();
        }) || _onMediaChange();
      },
      addEventListener: function addEventListener(type, callback) {
        var a = _listeners$1[type] || (_listeners$1[type] = []);
        ~a.indexOf(callback) || a.push(callback);
      },
      removeEventListener: function removeEventListener(type, callback) {
        var a = _listeners$1[type],
            i = a && a.indexOf(callback);
        i >= 0 && a.splice(i, 1);
      },
      utils: {
        wrap: wrap,
        wrapYoyo: wrapYoyo,
        distribute: distribute,
        random: random,
        snap: snap,
        normalize: normalize,
        getUnit: getUnit,
        clamp: clamp,
        splitColor: splitColor,
        toArray: toArray,
        selector: selector,
        mapRange: mapRange,
        pipe: pipe,
        unitize: unitize,
        interpolate: interpolate,
        shuffle: shuffle
      },
      install: _install,
      effects: _effects,
      ticker: _ticker,
      updateRoot: Timeline.updateRoot,
      plugins: _plugins,
      globalTimeline: _globalTimeline,
      core: {
        PropTween: PropTween,
        globals: _addGlobal,
        Tween: Tween,
        Timeline: Timeline,
        Animation: Animation,
        getCache: _getCache,
        _removeLinkedListItem: _removeLinkedListItem,
        reverting: function reverting() {
          return _reverting$1;
        },
        context: function context(toAdd) {
          if (toAdd && _context$2) {
            _context$2.data.push(toAdd);

            toAdd._ctx = _context$2;
          }

          return _context$2;
        },
        suppressOverwrites: function suppressOverwrites(value) {
          return _suppressOverwrites$1 = value;
        }
      }
    };

    _forEachName("to,from,fromTo,delayedCall,set,killTweensOf", function (name) {
      return _gsap[name] = Tween[name];
    });

    _ticker.add(Timeline.updateRoot);

    _quickTween = _gsap.to({}, {
      duration: 0
    }); // ---- EXTRA PLUGINS --------------------------------------------------------

    var _getPluginPropTween = function _getPluginPropTween(plugin, prop) {
      var pt = plugin._pt;

      while (pt && pt.p !== prop && pt.op !== prop && pt.fp !== prop) {
        pt = pt._next;
      }

      return pt;
    },
        _addModifiers = function _addModifiers(tween, modifiers) {
      var targets = tween._targets,
          p,
          i,
          pt;

      for (p in modifiers) {
        i = targets.length;

        while (i--) {
          pt = tween._ptLookup[i][p];

          if (pt && (pt = pt.d)) {
            if (pt._pt) {
              // is a plugin
              pt = _getPluginPropTween(pt, p);
            }

            pt && pt.modifier && pt.modifier(modifiers[p], tween, targets[i], p);
          }
        }
      }
    },
        _buildModifierPlugin = function _buildModifierPlugin(name, modifier) {
      return {
        name: name,
        rawVars: 1,
        //don't pre-process function-based values or "random()" strings.
        init: function init(target, vars, tween) {
          tween._onInit = function (tween) {
            var temp, p;

            if (_isString$1(vars)) {
              temp = {};

              _forEachName(vars, function (name) {
                return temp[name] = 1;
              }); //if the user passes in a comma-delimited list of property names to roundProps, like "x,y", we round to whole numbers.


              vars = temp;
            }

            if (modifier) {
              temp = {};

              for (p in vars) {
                temp[p] = modifier(vars[p]);
              }

              vars = temp;
            }

            _addModifiers(tween, vars);
          };
        }
      };
    }; //register core plugins


    var gsap$2 = _gsap.registerPlugin({
      name: "attr",
      init: function init(target, vars, tween, index, targets) {
        var p, pt, v;
        this.tween = tween;

        for (p in vars) {
          v = target.getAttribute(p) || "";
          pt = this.add(target, "setAttribute", (v || 0) + "", vars[p], index, targets, 0, 0, p);
          pt.op = p;
          pt.b = v; // record the beginning value so we can revert()

          this._props.push(p);
        }
      },
      render: function render(ratio, data) {
        var pt = data._pt;

        while (pt) {
          _reverting$1 ? pt.set(pt.t, pt.p, pt.b, pt) : pt.r(ratio, pt.d); // if reverting, go back to the original (pt.b)

          pt = pt._next;
        }
      }
    }, {
      name: "endArray",
      init: function init(target, value) {
        var i = value.length;

        while (i--) {
          this.add(target, i, target[i] || 0, value[i], 0, 0, 0, 0, 0, 1);
        }
      }
    }, _buildModifierPlugin("roundProps", _roundModifier), _buildModifierPlugin("modifiers"), _buildModifierPlugin("snap", snap)) || _gsap; //to prevent the core plugins from being dropped via aggressive tree shaking, we must include them in the variable declaration in this way.

    Tween.version = Timeline.version = gsap$2.version = "3.12.7";
    _coreReady = 1;
    _windowExists$2() && _wake();
    _easeMap.Power0;
        _easeMap.Power1;
        _easeMap.Power2;
        _easeMap.Power3;
        _easeMap.Power4;
        _easeMap.Linear;
        _easeMap.Quad;
        _easeMap.Cubic;
        _easeMap.Quart;
        _easeMap.Quint;
        _easeMap.Strong;
        _easeMap.Elastic;
        _easeMap.Back;
        _easeMap.SteppedEase;
        _easeMap.Bounce;
        _easeMap.Sine;
        _easeMap.Expo;
        _easeMap.Circ;

    /*!
     * CSSPlugin 3.12.7
     * https://gsap.com
     *
     * Copyright 2008-2025, GreenSock. All rights reserved.
     * Subject to the terms at https://gsap.com/standard-license or for
     * Club GSAP members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */


    var _win$2,
        _doc$2,
        _docElement,
        _pluginInitted,
        _tempDiv,
        _recentSetterPlugin,
        _reverting,
        _windowExists$1 = function _windowExists() {
      return typeof window !== "undefined";
    },
        _transformProps = {},
        _RAD2DEG = 180 / Math.PI,
        _DEG2RAD = Math.PI / 180,
        _atan2 = Math.atan2,
        _bigNum = 1e8,
        _capsExp$1 = /([A-Z])/g,
        _horizontalExp = /(left|right|width|margin|padding|x)/i,
        _complexExp = /[\s,\(]\S/,
        _propertyAliases = {
      autoAlpha: "opacity,visibility",
      scale: "scaleX,scaleY",
      alpha: "opacity"
    },
        _renderCSSProp = function _renderCSSProp(ratio, data) {
      return data.set(data.t, data.p, Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
    },
        _renderPropWithEnd = function _renderPropWithEnd(ratio, data) {
      return data.set(data.t, data.p, ratio === 1 ? data.e : Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u, data);
    },
        _renderCSSPropWithBeginning = function _renderCSSPropWithBeginning(ratio, data) {
      return data.set(data.t, data.p, ratio ? Math.round((data.s + data.c * ratio) * 10000) / 10000 + data.u : data.b, data);
    },
        //if units change, we need a way to render the original unit/value when the tween goes all the way back to the beginning (ratio:0)
    _renderRoundedCSSProp = function _renderRoundedCSSProp(ratio, data) {
      var value = data.s + data.c * ratio;
      data.set(data.t, data.p, ~~(value + (value < 0 ? -.5 : .5)) + data.u, data);
    },
        _renderNonTweeningValue = function _renderNonTweeningValue(ratio, data) {
      return data.set(data.t, data.p, ratio ? data.e : data.b, data);
    },
        _renderNonTweeningValueOnlyAtEnd = function _renderNonTweeningValueOnlyAtEnd(ratio, data) {
      return data.set(data.t, data.p, ratio !== 1 ? data.b : data.e, data);
    },
        _setterCSSStyle = function _setterCSSStyle(target, property, value) {
      return target.style[property] = value;
    },
        _setterCSSProp = function _setterCSSProp(target, property, value) {
      return target.style.setProperty(property, value);
    },
        _setterTransform = function _setterTransform(target, property, value) {
      return target._gsap[property] = value;
    },
        _setterScale = function _setterScale(target, property, value) {
      return target._gsap.scaleX = target._gsap.scaleY = value;
    },
        _setterScaleWithRender = function _setterScaleWithRender(target, property, value, data, ratio) {
      var cache = target._gsap;
      cache.scaleX = cache.scaleY = value;
      cache.renderTransform(ratio, cache);
    },
        _setterTransformWithRender = function _setterTransformWithRender(target, property, value, data, ratio) {
      var cache = target._gsap;
      cache[property] = value;
      cache.renderTransform(ratio, cache);
    },
        _transformProp$1 = "transform",
        _transformOriginProp = _transformProp$1 + "Origin",
        _saveStyle = function _saveStyle(property, isNotCSS) {
      var _this = this;

      var target = this.target,
          style = target.style,
          cache = target._gsap;

      if (property in _transformProps && style) {
        this.tfm = this.tfm || {};

        if (property !== "transform") {
          property = _propertyAliases[property] || property;
          ~property.indexOf(",") ? property.split(",").forEach(function (a) {
            return _this.tfm[a] = _get(target, a);
          }) : this.tfm[property] = cache.x ? cache[property] : _get(target, property); // note: scale would map to "scaleX,scaleY", thus we loop and apply them both.

          property === _transformOriginProp && (this.tfm.zOrigin = cache.zOrigin);
        } else {
          return _propertyAliases.transform.split(",").forEach(function (p) {
            return _saveStyle.call(_this, p, isNotCSS);
          });
        }

        if (this.props.indexOf(_transformProp$1) >= 0) {
          return;
        }

        if (cache.svg) {
          this.svgo = target.getAttribute("data-svg-origin");
          this.props.push(_transformOriginProp, isNotCSS, "");
        }

        property = _transformProp$1;
      }

      (style || isNotCSS) && this.props.push(property, isNotCSS, style[property]);
    },
        _removeIndependentTransforms = function _removeIndependentTransforms(style) {
      if (style.translate) {
        style.removeProperty("translate");
        style.removeProperty("scale");
        style.removeProperty("rotate");
      }
    },
        _revertStyle = function _revertStyle() {
      var props = this.props,
          target = this.target,
          style = target.style,
          cache = target._gsap,
          i,
          p;

      for (i = 0; i < props.length; i += 3) {
        // stored like this: property, isNotCSS, value
        if (!props[i + 1]) {
          props[i + 2] ? style[props[i]] = props[i + 2] : style.removeProperty(props[i].substr(0, 2) === "--" ? props[i] : props[i].replace(_capsExp$1, "-$1").toLowerCase());
        } else if (props[i + 1] === 2) {
          // non-CSS value (function-based)
          target[props[i]](props[i + 2]);
        } else {
          // non-CSS value (not function-based)
          target[props[i]] = props[i + 2];
        }
      }

      if (this.tfm) {
        for (p in this.tfm) {
          cache[p] = this.tfm[p];
        }

        if (cache.svg) {
          cache.renderTransform();
          target.setAttribute("data-svg-origin", this.svgo || "");
        }

        i = _reverting();

        if ((!i || !i.isStart) && !style[_transformProp$1]) {
          _removeIndependentTransforms(style);

          if (cache.zOrigin && style[_transformOriginProp]) {
            style[_transformOriginProp] += " " + cache.zOrigin + "px"; // since we're uncaching, we must put the zOrigin back into the transformOrigin so that we can pull it out accurately when we parse again. Otherwise, we'd lose the z portion of the origin since we extract it to protect from Safari bugs.

            cache.zOrigin = 0;
            cache.renderTransform();
          }

          cache.uncache = 1; // if it's a startAt that's being reverted in the _initTween() of the core, we don't need to uncache transforms. This is purely a performance optimization.
        }
      }
    },
        _getStyleSaver = function _getStyleSaver(target, properties) {
      var saver = {
        target: target,
        props: [],
        revert: _revertStyle,
        save: _saveStyle
      };
      target._gsap || gsap$2.core.getCache(target); // just make sure there's a _gsap cache defined because we read from it in _saveStyle() and it's more efficient to just check it here once.

      properties && target.style && target.nodeType && properties.split(",").forEach(function (p) {
        return saver.save(p);
      }); // make sure it's a DOM node too.

      return saver;
    },
        _supports3D,
        _createElement = function _createElement(type, ns) {
      var e = _doc$2.createElementNS ? _doc$2.createElementNS((ns || "http://www.w3.org/1999/xhtml").replace(/^https/, "http"), type) : _doc$2.createElement(type); //some servers swap in https for http in the namespace which can break things, making "style" inaccessible.

      return e && e.style ? e : _doc$2.createElement(type); //some environments won't allow access to the element's style when created with a namespace in which case we default to the standard createElement() to work around the issue. Also note that when GSAP is embedded directly inside an SVG file, createElement() won't allow access to the style object in Firefox (see https://gsap.com/forums/topic/20215-problem-using-tweenmax-in-standalone-self-containing-svg-file-err-cannot-set-property-csstext-of-undefined/).
    },
        _getComputedProperty = function _getComputedProperty(target, property, skipPrefixFallback) {
      var cs = getComputedStyle(target);
      return cs[property] || cs.getPropertyValue(property.replace(_capsExp$1, "-$1").toLowerCase()) || cs.getPropertyValue(property) || !skipPrefixFallback && _getComputedProperty(target, _checkPropPrefix(property) || property, 1) || ""; //css variables may not need caps swapped out for dashes and lowercase.
    },
        _prefixes = "O,Moz,ms,Ms,Webkit".split(","),
        _checkPropPrefix = function _checkPropPrefix(property, element, preferPrefix) {
      var e = element || _tempDiv,
          s = e.style,
          i = 5;

      if (property in s && !preferPrefix) {
        return property;
      }

      property = property.charAt(0).toUpperCase() + property.substr(1);

      while (i-- && !(_prefixes[i] + property in s)) {}

      return i < 0 ? null : (i === 3 ? "ms" : i >= 0 ? _prefixes[i] : "") + property;
    },
        _initCore$1 = function _initCore() {
      if (_windowExists$1() && window.document) {
        _win$2 = window;
        _doc$2 = _win$2.document;
        _docElement = _doc$2.documentElement;
        _tempDiv = _createElement("div") || {
          style: {}
        };
        _createElement("div");
        _transformProp$1 = _checkPropPrefix(_transformProp$1);
        _transformOriginProp = _transformProp$1 + "Origin";
        _tempDiv.style.cssText = "border-width:0;line-height:0;position:absolute;padding:0"; //make sure to override certain properties that may contaminate measurements, in case the user has overreaching style sheets.

        _supports3D = !!_checkPropPrefix("perspective");
        _reverting = gsap$2.core.reverting;
        _pluginInitted = 1;
      }
    },
        _getReparentedCloneBBox = function _getReparentedCloneBBox(target) {
      //works around issues in some browsers (like Firefox) that don't correctly report getBBox() on SVG elements inside a <defs> element and/or <mask>. We try creating an SVG, adding it to the documentElement and toss the element in there so that it's definitely part of the rendering tree, then grab the bbox and if it works, we actually swap out the original getBBox() method for our own that does these extra steps whenever getBBox is needed. This helps ensure that performance is optimal (only do all these extra steps when absolutely necessary...most elements don't need it).
      var owner = target.ownerSVGElement,
          svg = _createElement("svg", owner && owner.getAttribute("xmlns") || "http://www.w3.org/2000/svg"),
          clone = target.cloneNode(true),
          bbox;

      clone.style.display = "block";
      svg.appendChild(clone);

      _docElement.appendChild(svg);

      try {
        bbox = clone.getBBox();
      } catch (e) {}

      svg.removeChild(clone);

      _docElement.removeChild(svg);

      return bbox;
    },
        _getAttributeFallbacks = function _getAttributeFallbacks(target, attributesArray) {
      var i = attributesArray.length;

      while (i--) {
        if (target.hasAttribute(attributesArray[i])) {
          return target.getAttribute(attributesArray[i]);
        }
      }
    },
        _getBBox = function _getBBox(target) {
      var bounds, cloned;

      try {
        bounds = target.getBBox(); //Firefox throws errors if you try calling getBBox() on an SVG element that's not rendered (like in a <symbol> or <defs>). https://bugzilla.mozilla.org/show_bug.cgi?id=612118
      } catch (error) {
        bounds = _getReparentedCloneBBox(target);
        cloned = 1;
      }

      bounds && (bounds.width || bounds.height) || cloned || (bounds = _getReparentedCloneBBox(target)); //some browsers (like Firefox) misreport the bounds if the element has zero width and height (it just assumes it's at x:0, y:0), thus we need to manually grab the position in that case.

      return bounds && !bounds.width && !bounds.x && !bounds.y ? {
        x: +_getAttributeFallbacks(target, ["x", "cx", "x1"]) || 0,
        y: +_getAttributeFallbacks(target, ["y", "cy", "y1"]) || 0,
        width: 0,
        height: 0
      } : bounds;
    },
        _isSVG = function _isSVG(e) {
      return !!(e.getCTM && (!e.parentNode || e.ownerSVGElement) && _getBBox(e));
    },
        //reports if the element is an SVG on which getBBox() actually works
    _removeProperty = function _removeProperty(target, property) {
      if (property) {
        var style = target.style,
            first2Chars;

        if (property in _transformProps && property !== _transformOriginProp) {
          property = _transformProp$1;
        }

        if (style.removeProperty) {
          first2Chars = property.substr(0, 2);

          if (first2Chars === "ms" || property.substr(0, 6) === "webkit") {
            //Microsoft and some Webkit browsers don't conform to the standard of capitalizing the first prefix character, so we adjust so that when we prefix the caps with a dash, it's correct (otherwise it'd be "ms-transform" instead of "-ms-transform" for IE9, for example)
            property = "-" + property;
          }

          style.removeProperty(first2Chars === "--" ? property : property.replace(_capsExp$1, "-$1").toLowerCase());
        } else {
          //note: old versions of IE use "removeAttribute()" instead of "removeProperty()"
          style.removeAttribute(property);
        }
      }
    },
        _addNonTweeningPT = function _addNonTweeningPT(plugin, target, property, beginning, end, onlySetAtEnd) {
      var pt = new PropTween(plugin._pt, target, property, 0, 1, onlySetAtEnd ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue);
      plugin._pt = pt;
      pt.b = beginning;
      pt.e = end;

      plugin._props.push(property);

      return pt;
    },
        _nonConvertibleUnits = {
      deg: 1,
      rad: 1,
      turn: 1
    },
        _nonStandardLayouts = {
      grid: 1,
      flex: 1
    },
        //takes a single value like 20px and converts it to the unit specified, like "%", returning only the numeric amount.
    _convertToUnit = function _convertToUnit(target, property, value, unit) {
      var curValue = parseFloat(value) || 0,
          curUnit = (value + "").trim().substr((curValue + "").length) || "px",
          // some browsers leave extra whitespace at the beginning of CSS variables, hence the need to trim()
      style = _tempDiv.style,
          horizontal = _horizontalExp.test(property),
          isRootSVG = target.tagName.toLowerCase() === "svg",
          measureProperty = (isRootSVG ? "client" : "offset") + (horizontal ? "Width" : "Height"),
          amount = 100,
          toPixels = unit === "px",
          toPercent = unit === "%",
          px,
          parent,
          cache,
          isSVG;

      if (unit === curUnit || !curValue || _nonConvertibleUnits[unit] || _nonConvertibleUnits[curUnit]) {
        return curValue;
      }

      curUnit !== "px" && !toPixels && (curValue = _convertToUnit(target, property, value, "px"));
      isSVG = target.getCTM && _isSVG(target);

      if ((toPercent || curUnit === "%") && (_transformProps[property] || ~property.indexOf("adius"))) {
        px = isSVG ? target.getBBox()[horizontal ? "width" : "height"] : target[measureProperty];
        return _round$1(toPercent ? curValue / px * amount : curValue / 100 * px);
      }

      style[horizontal ? "width" : "height"] = amount + (toPixels ? curUnit : unit);
      parent = unit !== "rem" && ~property.indexOf("adius") || unit === "em" && target.appendChild && !isRootSVG ? target : target.parentNode;

      if (isSVG) {
        parent = (target.ownerSVGElement || {}).parentNode;
      }

      if (!parent || parent === _doc$2 || !parent.appendChild) {
        parent = _doc$2.body;
      }

      cache = parent._gsap;

      if (cache && toPercent && cache.width && horizontal && cache.time === _ticker.time && !cache.uncache) {
        return _round$1(curValue / cache.width * amount);
      } else {
        if (toPercent && (property === "height" || property === "width")) {
          // if we're dealing with width/height that's inside a container with padding and/or it's a flexbox/grid container, we must apply it to the target itself rather than the _tempDiv in order to ensure complete accuracy, factoring in the parent's padding.
          var v = target.style[property];
          target.style[property] = amount + unit;
          px = target[measureProperty];
          v ? target.style[property] = v : _removeProperty(target, property);
        } else {
          (toPercent || curUnit === "%") && !_nonStandardLayouts[_getComputedProperty(parent, "display")] && (style.position = _getComputedProperty(target, "position"));
          parent === target && (style.position = "static"); // like for borderRadius, if it's a % we must have it relative to the target itself but that may not have position: relative or position: absolute in which case it'd go up the chain until it finds its offsetParent (bad). position: static protects against that.

          parent.appendChild(_tempDiv);
          px = _tempDiv[measureProperty];
          parent.removeChild(_tempDiv);
          style.position = "absolute";
        }

        if (horizontal && toPercent) {
          cache = _getCache(parent);
          cache.time = _ticker.time;
          cache.width = parent[measureProperty];
        }
      }

      return _round$1(toPixels ? px * curValue / amount : px && curValue ? amount / px * curValue : 0);
    },
        _get = function _get(target, property, unit, uncache) {
      var value;
      _pluginInitted || _initCore$1();

      if (property in _propertyAliases && property !== "transform") {
        property = _propertyAliases[property];

        if (~property.indexOf(",")) {
          property = property.split(",")[0];
        }
      }

      if (_transformProps[property] && property !== "transform") {
        value = _parseTransform(target, uncache);
        value = property !== "transformOrigin" ? value[property] : value.svg ? value.origin : _firstTwoOnly(_getComputedProperty(target, _transformOriginProp)) + " " + value.zOrigin + "px";
      } else {
        value = target.style[property];

        if (!value || value === "auto" || uncache || ~(value + "").indexOf("calc(")) {
          value = _specialProps[property] && _specialProps[property](target, property, unit) || _getComputedProperty(target, property) || _getProperty(target, property) || (property === "opacity" ? 1 : 0); // note: some browsers, like Firefox, don't report borderRadius correctly! Instead, it only reports every corner like  borderTopLeftRadius
        }
      }

      return unit && !~(value + "").trim().indexOf(" ") ? _convertToUnit(target, property, value, unit) + unit : value;
    },
        _tweenComplexCSSString = function _tweenComplexCSSString(target, prop, start, end) {
      // note: we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within a plugin too, thus "this" would refer to the plugin.
      if (!start || start === "none") {
        // some browsers like Safari actually PREFER the prefixed property and mis-report the unprefixed value like clipPath (BUG). In other words, even though clipPath exists in the style ("clipPath" in target.style) and it's set in the CSS properly (along with -webkit-clip-path), Safari reports clipPath as "none" whereas WebkitClipPath reports accurately like "ellipse(100% 0% at 50% 0%)", so in this case we must SWITCH to using the prefixed property instead. See https://gsap.com/forums/topic/18310-clippath-doesnt-work-on-ios/
        var p = _checkPropPrefix(prop, target, 1),
            s = p && _getComputedProperty(target, p, 1);

        if (s && s !== start) {
          prop = p;
          start = s;
        } else if (prop === "borderColor") {
          start = _getComputedProperty(target, "borderTopColor"); // Firefox bug: always reports "borderColor" as "", so we must fall back to borderTopColor. See https://gsap.com/forums/topic/24583-how-to-return-colors-that-i-had-after-reverse/
        }
      }

      var pt = new PropTween(this._pt, target.style, prop, 0, 1, _renderComplexString),
          index = 0,
          matchIndex = 0,
          a,
          result,
          startValues,
          startNum,
          color,
          startValue,
          endValue,
          endNum,
          chunk,
          endUnit,
          startUnit,
          endValues;
      pt.b = start;
      pt.e = end;
      start += ""; // ensure values are strings

      end += "";

      if (end === "auto") {
        startValue = target.style[prop];
        target.style[prop] = end;
        end = _getComputedProperty(target, prop) || end;
        startValue ? target.style[prop] = startValue : _removeProperty(target, prop);
      }

      a = [start, end];

      _colorStringFilter(a); // pass an array with the starting and ending values and let the filter do whatever it needs to the values. If colors are found, it returns true and then we must match where the color shows up order-wise because for things like boxShadow, sometimes the browser provides the computed values with the color FIRST, but the user provides it with the color LAST, so flip them if necessary. Same for drop-shadow().


      start = a[0];
      end = a[1];
      startValues = start.match(_numWithUnitExp) || [];
      endValues = end.match(_numWithUnitExp) || [];

      if (endValues.length) {
        while (result = _numWithUnitExp.exec(end)) {
          endValue = result[0];
          chunk = end.substring(index, result.index);

          if (color) {
            color = (color + 1) % 5;
          } else if (chunk.substr(-5) === "rgba(" || chunk.substr(-5) === "hsla(") {
            color = 1;
          }

          if (endValue !== (startValue = startValues[matchIndex++] || "")) {
            startNum = parseFloat(startValue) || 0;
            startUnit = startValue.substr((startNum + "").length);
            endValue.charAt(1) === "=" && (endValue = _parseRelative(startNum, endValue) + startUnit);
            endNum = parseFloat(endValue);
            endUnit = endValue.substr((endNum + "").length);
            index = _numWithUnitExp.lastIndex - endUnit.length;

            if (!endUnit) {
              //if something like "perspective:300" is passed in and we must add a unit to the end
              endUnit = endUnit || _config.units[prop] || startUnit;

              if (index === end.length) {
                end += endUnit;
                pt.e += endUnit;
              }
            }

            if (startUnit !== endUnit) {
              startNum = _convertToUnit(target, prop, startValue, endUnit) || 0;
            } // these nested PropTweens are handled in a special way - we'll never actually call a render or setter method on them. We'll just loop through them in the parent complex string PropTween's render method.


            pt._pt = {
              _next: pt._pt,
              p: chunk || matchIndex === 1 ? chunk : ",",
              //note: SVG spec allows omission of comma/space when a negative sign is wedged between two numbers, like 2.5-5.3 instead of 2.5,-5.3 but when tweening, the negative value may switch to positive, so we insert the comma just in case.
              s: startNum,
              c: endNum - startNum,
              m: color && color < 4 || prop === "zIndex" ? Math.round : 0
            };
          }
        }

        pt.c = index < end.length ? end.substring(index, end.length) : ""; //we use the "c" of the PropTween to store the final part of the string (after the last number)
      } else {
        pt.r = prop === "display" && end === "none" ? _renderNonTweeningValueOnlyAtEnd : _renderNonTweeningValue;
      }

      _relExp.test(end) && (pt.e = 0); //if the end string contains relative values or dynamic random(...) values, delete the end it so that on the final render we don't actually set it to the string with += or -= characters (forces it to use the calculated value).

      this._pt = pt; //start the linked list with this new PropTween. Remember, we call _tweenComplexCSSString.call(pluginInstance...) to ensure that it's scoped properly. We may call it from within another plugin too, thus "this" would refer to the plugin.

      return pt;
    },
        _keywordToPercent = {
      top: "0%",
      bottom: "100%",
      left: "0%",
      right: "100%",
      center: "50%"
    },
        _convertKeywordsToPercentages = function _convertKeywordsToPercentages(value) {
      var split = value.split(" "),
          x = split[0],
          y = split[1] || "50%";

      if (x === "top" || x === "bottom" || y === "left" || y === "right") {
        //the user provided them in the wrong order, so flip them
        value = x;
        x = y;
        y = value;
      }

      split[0] = _keywordToPercent[x] || x;
      split[1] = _keywordToPercent[y] || y;
      return split.join(" ");
    },
        _renderClearProps = function _renderClearProps(ratio, data) {
      if (data.tween && data.tween._time === data.tween._dur) {
        var target = data.t,
            style = target.style,
            props = data.u,
            cache = target._gsap,
            prop,
            clearTransforms,
            i;

        if (props === "all" || props === true) {
          style.cssText = "";
          clearTransforms = 1;
        } else {
          props = props.split(",");
          i = props.length;

          while (--i > -1) {
            prop = props[i];

            if (_transformProps[prop]) {
              clearTransforms = 1;
              prop = prop === "transformOrigin" ? _transformOriginProp : _transformProp$1;
            }

            _removeProperty(target, prop);
          }
        }

        if (clearTransforms) {
          _removeProperty(target, _transformProp$1);

          if (cache) {
            cache.svg && target.removeAttribute("transform");
            style.scale = style.rotate = style.translate = "none";

            _parseTransform(target, 1); // force all the cached values back to "normal"/identity, otherwise if there's another tween that's already set to render transforms on this element, it could display the wrong values.


            cache.uncache = 1;

            _removeIndependentTransforms(style);
          }
        }
      }
    },
        // note: specialProps should return 1 if (and only if) they have a non-zero priority. It indicates we need to sort the linked list.
    _specialProps = {
      clearProps: function clearProps(plugin, target, property, endValue, tween) {
        if (tween.data !== "isFromStart") {
          var pt = plugin._pt = new PropTween(plugin._pt, target, property, 0, 0, _renderClearProps);
          pt.u = endValue;
          pt.pr = -10;
          pt.tween = tween;

          plugin._props.push(property);

          return 1;
        }
      }
      /* className feature (about 0.4kb gzipped).
      , className(plugin, target, property, endValue, tween) {
      	let _renderClassName = (ratio, data) => {
      			data.css.render(ratio, data.css);
      			if (!ratio || ratio === 1) {
      				let inline = data.rmv,
      					target = data.t,
      					p;
      				target.setAttribute("class", ratio ? data.e : data.b);
      				for (p in inline) {
      					_removeProperty(target, p);
      				}
      			}
      		},
      		_getAllStyles = (target) => {
      			let styles = {},
      				computed = getComputedStyle(target),
      				p;
      			for (p in computed) {
      				if (isNaN(p) && p !== "cssText" && p !== "length") {
      					styles[p] = computed[p];
      				}
      			}
      			_setDefaults(styles, _parseTransform(target, 1));
      			return styles;
      		},
      		startClassList = target.getAttribute("class"),
      		style = target.style,
      		cssText = style.cssText,
      		cache = target._gsap,
      		classPT = cache.classPT,
      		inlineToRemoveAtEnd = {},
      		data = {t:target, plugin:plugin, rmv:inlineToRemoveAtEnd, b:startClassList, e:(endValue.charAt(1) !== "=") ? endValue : startClassList.replace(new RegExp("(?:\\s|^)" + endValue.substr(2) + "(?![\\w-])"), "") + ((endValue.charAt(0) === "+") ? " " + endValue.substr(2) : "")},
      		changingVars = {},
      		startVars = _getAllStyles(target),
      		transformRelated = /(transform|perspective)/i,
      		endVars, p;
      	if (classPT) {
      		classPT.r(1, classPT.d);
      		_removeLinkedListItem(classPT.d.plugin, classPT, "_pt");
      	}
      	target.setAttribute("class", data.e);
      	endVars = _getAllStyles(target, true);
      	target.setAttribute("class", startClassList);
      	for (p in endVars) {
      		if (endVars[p] !== startVars[p] && !transformRelated.test(p)) {
      			changingVars[p] = endVars[p];
      			if (!style[p] && style[p] !== "0") {
      				inlineToRemoveAtEnd[p] = 1;
      			}
      		}
      	}
      	cache.classPT = plugin._pt = new PropTween(plugin._pt, target, "className", 0, 0, _renderClassName, data, 0, -11);
      	if (style.cssText !== cssText) { //only apply if things change. Otherwise, in cases like a background-image that's pulled dynamically, it could cause a refresh. See https://gsap.com/forums/topic/20368-possible-gsap-bug-switching-classnames-in-chrome/.
      		style.cssText = cssText; //we recorded cssText before we swapped classes and ran _getAllStyles() because in cases when a className tween is overwritten, we remove all the related tweening properties from that class change (otherwise class-specific stuff can't override properties we've directly set on the target's style object due to specificity).
      	}
      	_parseTransform(target, true); //to clear the caching of transforms
      	data.css = new gsap.plugins.css();
      	data.css.init(target, changingVars, tween);
      	plugin._props.push(...data.css._props);
      	return 1;
      }
      */

    },

    /*
     * --------------------------------------------------------------------------------------
     * TRANSFORMS
     * --------------------------------------------------------------------------------------
     */
    _identity2DMatrix = [1, 0, 0, 1, 0, 0],
        _rotationalProperties = {},
        _isNullTransform = function _isNullTransform(value) {
      return value === "matrix(1, 0, 0, 1, 0, 0)" || value === "none" || !value;
    },
        _getComputedTransformMatrixAsArray = function _getComputedTransformMatrixAsArray(target) {
      var matrixString = _getComputedProperty(target, _transformProp$1);

      return _isNullTransform(matrixString) ? _identity2DMatrix : matrixString.substr(7).match(_numExp).map(_round$1);
    },
        _getMatrix = function _getMatrix(target, force2D) {
      var cache = target._gsap || _getCache(target),
          style = target.style,
          matrix = _getComputedTransformMatrixAsArray(target),
          parent,
          nextSibling,
          temp,
          addedToDOM;

      if (cache.svg && target.getAttribute("transform")) {
        temp = target.transform.baseVal.consolidate().matrix; //ensures that even complex values like "translate(50,60) rotate(135,0,0)" are parsed because it mashes it into a matrix.

        matrix = [temp.a, temp.b, temp.c, temp.d, temp.e, temp.f];
        return matrix.join(",") === "1,0,0,1,0,0" ? _identity2DMatrix : matrix;
      } else if (matrix === _identity2DMatrix && !target.offsetParent && target !== _docElement && !cache.svg) {
        //note: if offsetParent is null, that means the element isn't in the normal document flow, like if it has display:none or one of its ancestors has display:none). Firefox returns null for getComputedStyle() if the element is in an iframe that has display:none. https://bugzilla.mozilla.org/show_bug.cgi?id=548397
        //browsers don't report transforms accurately unless the element is in the DOM and has a display value that's not "none". Firefox and Microsoft browsers have a partial bug where they'll report transforms even if display:none BUT not any percentage-based values like translate(-50%, 8px) will be reported as if it's translate(0, 8px).
        temp = style.display;
        style.display = "block";
        parent = target.parentNode;

        if (!parent || !target.offsetParent && !target.getBoundingClientRect().width) {
          // note: in 3.3.0 we switched target.offsetParent to _doc.body.contains(target) to avoid [sometimes unnecessary] MutationObserver calls but that wasn't adequate because there are edge cases where nested position: fixed elements need to get reparented to accurately sense transforms. See https://github.com/greensock/GSAP/issues/388 and https://github.com/greensock/GSAP/issues/375. Note: position: fixed elements report a null offsetParent but they could also be invisible because they're in an ancestor with display: none, so we check getBoundingClientRect(). We only want to alter the DOM if we absolutely have to because it can cause iframe content to reload, like a Vimeo video.
          addedToDOM = 1; //flag

          nextSibling = target.nextElementSibling;

          _docElement.appendChild(target); //we must add it to the DOM in order to get values properly

        }

        matrix = _getComputedTransformMatrixAsArray(target);
        temp ? style.display = temp : _removeProperty(target, "display");

        if (addedToDOM) {
          nextSibling ? parent.insertBefore(target, nextSibling) : parent ? parent.appendChild(target) : _docElement.removeChild(target);
        }
      }

      return force2D && matrix.length > 6 ? [matrix[0], matrix[1], matrix[4], matrix[5], matrix[12], matrix[13]] : matrix;
    },
        _applySVGOrigin = function _applySVGOrigin(target, origin, originIsAbsolute, smooth, matrixArray, pluginToAddPropTweensTo) {
      var cache = target._gsap,
          matrix = matrixArray || _getMatrix(target, true),
          xOriginOld = cache.xOrigin || 0,
          yOriginOld = cache.yOrigin || 0,
          xOffsetOld = cache.xOffset || 0,
          yOffsetOld = cache.yOffset || 0,
          a = matrix[0],
          b = matrix[1],
          c = matrix[2],
          d = matrix[3],
          tx = matrix[4],
          ty = matrix[5],
          originSplit = origin.split(" "),
          xOrigin = parseFloat(originSplit[0]) || 0,
          yOrigin = parseFloat(originSplit[1]) || 0,
          bounds,
          determinant,
          x,
          y;

      if (!originIsAbsolute) {
        bounds = _getBBox(target);
        xOrigin = bounds.x + (~originSplit[0].indexOf("%") ? xOrigin / 100 * bounds.width : xOrigin);
        yOrigin = bounds.y + (~(originSplit[1] || originSplit[0]).indexOf("%") ? yOrigin / 100 * bounds.height : yOrigin); // if (!("xOrigin" in cache) && (xOrigin || yOrigin)) { // added in 3.12.3, reverted in 3.12.4; requires more exploration
        // 	xOrigin -= bounds.x;
        // 	yOrigin -= bounds.y;
        // }
      } else if (matrix !== _identity2DMatrix && (determinant = a * d - b * c)) {
        //if it's zero (like if scaleX and scaleY are zero), skip it to avoid errors with dividing by zero.
        x = xOrigin * (d / determinant) + yOrigin * (-c / determinant) + (c * ty - d * tx) / determinant;
        y = xOrigin * (-b / determinant) + yOrigin * (a / determinant) - (a * ty - b * tx) / determinant;
        xOrigin = x;
        yOrigin = y; // theory: we only had to do this for smoothing and it assumes that the previous one was not originIsAbsolute.
      }

      if (smooth || smooth !== false && cache.smooth) {
        tx = xOrigin - xOriginOld;
        ty = yOrigin - yOriginOld;
        cache.xOffset = xOffsetOld + (tx * a + ty * c) - tx;
        cache.yOffset = yOffsetOld + (tx * b + ty * d) - ty;
      } else {
        cache.xOffset = cache.yOffset = 0;
      }

      cache.xOrigin = xOrigin;
      cache.yOrigin = yOrigin;
      cache.smooth = !!smooth;
      cache.origin = origin;
      cache.originIsAbsolute = !!originIsAbsolute;
      target.style[_transformOriginProp] = "0px 0px"; //otherwise, if someone sets  an origin via CSS, it will likely interfere with the SVG transform attribute ones (because remember, we're baking the origin into the matrix() value).

      if (pluginToAddPropTweensTo) {
        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOrigin", xOriginOld, xOrigin);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOrigin", yOriginOld, yOrigin);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "xOffset", xOffsetOld, cache.xOffset);

        _addNonTweeningPT(pluginToAddPropTweensTo, cache, "yOffset", yOffsetOld, cache.yOffset);
      }

      target.setAttribute("data-svg-origin", xOrigin + " " + yOrigin);
    },
        _parseTransform = function _parseTransform(target, uncache) {
      var cache = target._gsap || new GSCache(target);

      if ("x" in cache && !uncache && !cache.uncache) {
        return cache;
      }

      var style = target.style,
          invertedScaleX = cache.scaleX < 0,
          px = "px",
          deg = "deg",
          cs = getComputedStyle(target),
          origin = _getComputedProperty(target, _transformOriginProp) || "0",
          x,
          y,
          z,
          scaleX,
          scaleY,
          rotation,
          rotationX,
          rotationY,
          skewX,
          skewY,
          perspective,
          xOrigin,
          yOrigin,
          matrix,
          angle,
          cos,
          sin,
          a,
          b,
          c,
          d,
          a12,
          a22,
          t1,
          t2,
          t3,
          a13,
          a23,
          a33,
          a42,
          a43,
          a32;
      x = y = z = rotation = rotationX = rotationY = skewX = skewY = perspective = 0;
      scaleX = scaleY = 1;
      cache.svg = !!(target.getCTM && _isSVG(target));

      if (cs.translate) {
        // accommodate independent transforms by combining them into normal ones.
        if (cs.translate !== "none" || cs.scale !== "none" || cs.rotate !== "none") {
          style[_transformProp$1] = (cs.translate !== "none" ? "translate3d(" + (cs.translate + " 0 0").split(" ").slice(0, 3).join(", ") + ") " : "") + (cs.rotate !== "none" ? "rotate(" + cs.rotate + ") " : "") + (cs.scale !== "none" ? "scale(" + cs.scale.split(" ").join(",") + ") " : "") + (cs[_transformProp$1] !== "none" ? cs[_transformProp$1] : "");
        }

        style.scale = style.rotate = style.translate = "none";
      }

      matrix = _getMatrix(target, cache.svg);

      if (cache.svg) {
        if (cache.uncache) {
          // if cache.uncache is true (and maybe if origin is 0,0), we need to set element.style.transformOrigin = (cache.xOrigin - bbox.x) + "px " + (cache.yOrigin - bbox.y) + "px". Previously we let the data-svg-origin stay instead, but when introducing revert(), it complicated things.
          t2 = target.getBBox();
          origin = cache.xOrigin - t2.x + "px " + (cache.yOrigin - t2.y) + "px";
          t1 = "";
        } else {
          t1 = !uncache && target.getAttribute("data-svg-origin"); //  Remember, to work around browser inconsistencies we always force SVG elements' transformOrigin to 0,0 and offset the translation accordingly.
        }

        _applySVGOrigin(target, t1 || origin, !!t1 || cache.originIsAbsolute, cache.smooth !== false, matrix);
      }

      xOrigin = cache.xOrigin || 0;
      yOrigin = cache.yOrigin || 0;

      if (matrix !== _identity2DMatrix) {
        a = matrix[0]; //a11

        b = matrix[1]; //a21

        c = matrix[2]; //a31

        d = matrix[3]; //a41

        x = a12 = matrix[4];
        y = a22 = matrix[5]; //2D matrix

        if (matrix.length === 6) {
          scaleX = Math.sqrt(a * a + b * b);
          scaleY = Math.sqrt(d * d + c * c);
          rotation = a || b ? _atan2(b, a) * _RAD2DEG : 0; //note: if scaleX is 0, we cannot accurately measure rotation. Same for skewX with a scaleY of 0. Therefore, we default to the previously recorded value (or zero if that doesn't exist).

          skewX = c || d ? _atan2(c, d) * _RAD2DEG + rotation : 0;
          skewX && (scaleY *= Math.abs(Math.cos(skewX * _DEG2RAD)));

          if (cache.svg) {
            x -= xOrigin - (xOrigin * a + yOrigin * c);
            y -= yOrigin - (xOrigin * b + yOrigin * d);
          } //3D matrix

        } else {
          a32 = matrix[6];
          a42 = matrix[7];
          a13 = matrix[8];
          a23 = matrix[9];
          a33 = matrix[10];
          a43 = matrix[11];
          x = matrix[12];
          y = matrix[13];
          z = matrix[14];
          angle = _atan2(a32, a33);
          rotationX = angle * _RAD2DEG; //rotationX

          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a12 * cos + a13 * sin;
            t2 = a22 * cos + a23 * sin;
            t3 = a32 * cos + a33 * sin;
            a13 = a12 * -sin + a13 * cos;
            a23 = a22 * -sin + a23 * cos;
            a33 = a32 * -sin + a33 * cos;
            a43 = a42 * -sin + a43 * cos;
            a12 = t1;
            a22 = t2;
            a32 = t3;
          } //rotationY


          angle = _atan2(-c, a33);
          rotationY = angle * _RAD2DEG;

          if (angle) {
            cos = Math.cos(-angle);
            sin = Math.sin(-angle);
            t1 = a * cos - a13 * sin;
            t2 = b * cos - a23 * sin;
            t3 = c * cos - a33 * sin;
            a43 = d * sin + a43 * cos;
            a = t1;
            b = t2;
            c = t3;
          } //rotationZ


          angle = _atan2(b, a);
          rotation = angle * _RAD2DEG;

          if (angle) {
            cos = Math.cos(angle);
            sin = Math.sin(angle);
            t1 = a * cos + b * sin;
            t2 = a12 * cos + a22 * sin;
            b = b * cos - a * sin;
            a22 = a22 * cos - a12 * sin;
            a = t1;
            a12 = t2;
          }

          if (rotationX && Math.abs(rotationX) + Math.abs(rotation) > 359.9) {
            //when rotationY is set, it will often be parsed as 180 degrees different than it should be, and rotationX and rotation both being 180 (it looks the same), so we adjust for that here.
            rotationX = rotation = 0;
            rotationY = 180 - rotationY;
          }

          scaleX = _round$1(Math.sqrt(a * a + b * b + c * c));
          scaleY = _round$1(Math.sqrt(a22 * a22 + a32 * a32));
          angle = _atan2(a12, a22);
          skewX = Math.abs(angle) > 0.0002 ? angle * _RAD2DEG : 0;
          perspective = a43 ? 1 / (a43 < 0 ? -a43 : a43) : 0;
        }

        if (cache.svg) {
          //sense if there are CSS transforms applied on an SVG element in which case we must overwrite them when rendering. The transform attribute is more reliable cross-browser, but we can't just remove the CSS ones because they may be applied in a CSS rule somewhere (not just inline).
          t1 = target.getAttribute("transform");
          cache.forceCSS = target.setAttribute("transform", "") || !_isNullTransform(_getComputedProperty(target, _transformProp$1));
          t1 && target.setAttribute("transform", t1);
        }
      }

      if (Math.abs(skewX) > 90 && Math.abs(skewX) < 270) {
        if (invertedScaleX) {
          scaleX *= -1;
          skewX += rotation <= 0 ? 180 : -180;
          rotation += rotation <= 0 ? 180 : -180;
        } else {
          scaleY *= -1;
          skewX += skewX <= 0 ? 180 : -180;
        }
      }

      uncache = uncache || cache.uncache;
      cache.x = x - ((cache.xPercent = x && (!uncache && cache.xPercent || (Math.round(target.offsetWidth / 2) === Math.round(-x) ? -50 : 0))) ? target.offsetWidth * cache.xPercent / 100 : 0) + px;
      cache.y = y - ((cache.yPercent = y && (!uncache && cache.yPercent || (Math.round(target.offsetHeight / 2) === Math.round(-y) ? -50 : 0))) ? target.offsetHeight * cache.yPercent / 100 : 0) + px;
      cache.z = z + px;
      cache.scaleX = _round$1(scaleX);
      cache.scaleY = _round$1(scaleY);
      cache.rotation = _round$1(rotation) + deg;
      cache.rotationX = _round$1(rotationX) + deg;
      cache.rotationY = _round$1(rotationY) + deg;
      cache.skewX = skewX + deg;
      cache.skewY = skewY + deg;
      cache.transformPerspective = perspective + px;

      if (cache.zOrigin = parseFloat(origin.split(" ")[2]) || !uncache && cache.zOrigin || 0) {
        style[_transformOriginProp] = _firstTwoOnly(origin);
      }

      cache.xOffset = cache.yOffset = 0;
      cache.force3D = _config.force3D;
      cache.renderTransform = cache.svg ? _renderSVGTransforms : _supports3D ? _renderCSSTransforms : _renderNon3DTransforms;
      cache.uncache = 0;
      return cache;
    },
        _firstTwoOnly = function _firstTwoOnly(value) {
      return (value = value.split(" "))[0] + " " + value[1];
    },
        //for handling transformOrigin values, stripping out the 3rd dimension
    _addPxTranslate = function _addPxTranslate(target, start, value) {
      var unit = getUnit(start);
      return _round$1(parseFloat(start) + parseFloat(_convertToUnit(target, "x", value + "px", unit))) + unit;
    },
        _renderNon3DTransforms = function _renderNon3DTransforms(ratio, cache) {
      cache.z = "0px";
      cache.rotationY = cache.rotationX = "0deg";
      cache.force3D = 0;

      _renderCSSTransforms(ratio, cache);
    },
        _zeroDeg = "0deg",
        _zeroPx = "0px",
        _endParenthesis = ") ",
        _renderCSSTransforms = function _renderCSSTransforms(ratio, cache) {
      var _ref = cache || this,
          xPercent = _ref.xPercent,
          yPercent = _ref.yPercent,
          x = _ref.x,
          y = _ref.y,
          z = _ref.z,
          rotation = _ref.rotation,
          rotationY = _ref.rotationY,
          rotationX = _ref.rotationX,
          skewX = _ref.skewX,
          skewY = _ref.skewY,
          scaleX = _ref.scaleX,
          scaleY = _ref.scaleY,
          transformPerspective = _ref.transformPerspective,
          force3D = _ref.force3D,
          target = _ref.target,
          zOrigin = _ref.zOrigin,
          transforms = "",
          use3D = force3D === "auto" && ratio && ratio !== 1 || force3D === true; // Safari has a bug that causes it not to render 3D transform-origin values properly, so we force the z origin to 0, record it in the cache, and then do the math here to offset the translate values accordingly (basically do the 3D transform-origin part manually)


      if (zOrigin && (rotationX !== _zeroDeg || rotationY !== _zeroDeg)) {
        var angle = parseFloat(rotationY) * _DEG2RAD,
            a13 = Math.sin(angle),
            a33 = Math.cos(angle),
            cos;

        angle = parseFloat(rotationX) * _DEG2RAD;
        cos = Math.cos(angle);
        x = _addPxTranslate(target, x, a13 * cos * -zOrigin);
        y = _addPxTranslate(target, y, -Math.sin(angle) * -zOrigin);
        z = _addPxTranslate(target, z, a33 * cos * -zOrigin + zOrigin);
      }

      if (transformPerspective !== _zeroPx) {
        transforms += "perspective(" + transformPerspective + _endParenthesis;
      }

      if (xPercent || yPercent) {
        transforms += "translate(" + xPercent + "%, " + yPercent + "%) ";
      }

      if (use3D || x !== _zeroPx || y !== _zeroPx || z !== _zeroPx) {
        transforms += z !== _zeroPx || use3D ? "translate3d(" + x + ", " + y + ", " + z + ") " : "translate(" + x + ", " + y + _endParenthesis;
      }

      if (rotation !== _zeroDeg) {
        transforms += "rotate(" + rotation + _endParenthesis;
      }

      if (rotationY !== _zeroDeg) {
        transforms += "rotateY(" + rotationY + _endParenthesis;
      }

      if (rotationX !== _zeroDeg) {
        transforms += "rotateX(" + rotationX + _endParenthesis;
      }

      if (skewX !== _zeroDeg || skewY !== _zeroDeg) {
        transforms += "skew(" + skewX + ", " + skewY + _endParenthesis;
      }

      if (scaleX !== 1 || scaleY !== 1) {
        transforms += "scale(" + scaleX + ", " + scaleY + _endParenthesis;
      }

      target.style[_transformProp$1] = transforms || "translate(0, 0)";
    },
        _renderSVGTransforms = function _renderSVGTransforms(ratio, cache) {
      var _ref2 = cache || this,
          xPercent = _ref2.xPercent,
          yPercent = _ref2.yPercent,
          x = _ref2.x,
          y = _ref2.y,
          rotation = _ref2.rotation,
          skewX = _ref2.skewX,
          skewY = _ref2.skewY,
          scaleX = _ref2.scaleX,
          scaleY = _ref2.scaleY,
          target = _ref2.target,
          xOrigin = _ref2.xOrigin,
          yOrigin = _ref2.yOrigin,
          xOffset = _ref2.xOffset,
          yOffset = _ref2.yOffset,
          forceCSS = _ref2.forceCSS,
          tx = parseFloat(x),
          ty = parseFloat(y),
          a11,
          a21,
          a12,
          a22,
          temp;

      rotation = parseFloat(rotation);
      skewX = parseFloat(skewX);
      skewY = parseFloat(skewY);

      if (skewY) {
        //for performance reasons, we combine all skewing into the skewX and rotation values. Remember, a skewY of 10 degrees looks the same as a rotation of 10 degrees plus a skewX of 10 degrees.
        skewY = parseFloat(skewY);
        skewX += skewY;
        rotation += skewY;
      }

      if (rotation || skewX) {
        rotation *= _DEG2RAD;
        skewX *= _DEG2RAD;
        a11 = Math.cos(rotation) * scaleX;
        a21 = Math.sin(rotation) * scaleX;
        a12 = Math.sin(rotation - skewX) * -scaleY;
        a22 = Math.cos(rotation - skewX) * scaleY;

        if (skewX) {
          skewY *= _DEG2RAD;
          temp = Math.tan(skewX - skewY);
          temp = Math.sqrt(1 + temp * temp);
          a12 *= temp;
          a22 *= temp;

          if (skewY) {
            temp = Math.tan(skewY);
            temp = Math.sqrt(1 + temp * temp);
            a11 *= temp;
            a21 *= temp;
          }
        }

        a11 = _round$1(a11);
        a21 = _round$1(a21);
        a12 = _round$1(a12);
        a22 = _round$1(a22);
      } else {
        a11 = scaleX;
        a22 = scaleY;
        a21 = a12 = 0;
      }

      if (tx && !~(x + "").indexOf("px") || ty && !~(y + "").indexOf("px")) {
        tx = _convertToUnit(target, "x", x, "px");
        ty = _convertToUnit(target, "y", y, "px");
      }

      if (xOrigin || yOrigin || xOffset || yOffset) {
        tx = _round$1(tx + xOrigin - (xOrigin * a11 + yOrigin * a12) + xOffset);
        ty = _round$1(ty + yOrigin - (xOrigin * a21 + yOrigin * a22) + yOffset);
      }

      if (xPercent || yPercent) {
        //The SVG spec doesn't support percentage-based translation in the "transform" attribute, so we merge it into the translation to simulate it.
        temp = target.getBBox();
        tx = _round$1(tx + xPercent / 100 * temp.width);
        ty = _round$1(ty + yPercent / 100 * temp.height);
      }

      temp = "matrix(" + a11 + "," + a21 + "," + a12 + "," + a22 + "," + tx + "," + ty + ")";
      target.setAttribute("transform", temp);
      forceCSS && (target.style[_transformProp$1] = temp); //some browsers prioritize CSS transforms over the transform attribute. When we sense that the user has CSS transforms applied, we must overwrite them this way (otherwise some browser simply won't render the transform attribute changes!)
    },
        _addRotationalPropTween = function _addRotationalPropTween(plugin, target, property, startNum, endValue) {
      var cap = 360,
          isString = _isString$1(endValue),
          endNum = parseFloat(endValue) * (isString && ~endValue.indexOf("rad") ? _RAD2DEG : 1),
          change = endNum - startNum,
          finalValue = startNum + change + "deg",
          direction,
          pt;

      if (isString) {
        direction = endValue.split("_")[1];

        if (direction === "short") {
          change %= cap;

          if (change !== change % (cap / 2)) {
            change += change < 0 ? cap : -cap;
          }
        }

        if (direction === "cw" && change < 0) {
          change = (change + cap * _bigNum) % cap - ~~(change / cap) * cap;
        } else if (direction === "ccw" && change > 0) {
          change = (change - cap * _bigNum) % cap - ~~(change / cap) * cap;
        }
      }

      plugin._pt = pt = new PropTween(plugin._pt, target, property, startNum, change, _renderPropWithEnd);
      pt.e = finalValue;
      pt.u = "deg";

      plugin._props.push(property);

      return pt;
    },
        _assign = function _assign(target, source) {
      // Internet Explorer doesn't have Object.assign(), so we recreate it here.
      for (var p in source) {
        target[p] = source[p];
      }

      return target;
    },
        _addRawTransformPTs = function _addRawTransformPTs(plugin, transforms, target) {
      //for handling cases where someone passes in a whole transform string, like transform: "scale(2, 3) rotate(20deg) translateY(30em)"
      var startCache = _assign({}, target._gsap),
          exclude = "perspective,force3D,transformOrigin,svgOrigin",
          style = target.style,
          endCache,
          p,
          startValue,
          endValue,
          startNum,
          endNum,
          startUnit,
          endUnit;

      if (startCache.svg) {
        startValue = target.getAttribute("transform");
        target.setAttribute("transform", "");
        style[_transformProp$1] = transforms;
        endCache = _parseTransform(target, 1);

        _removeProperty(target, _transformProp$1);

        target.setAttribute("transform", startValue);
      } else {
        startValue = getComputedStyle(target)[_transformProp$1];
        style[_transformProp$1] = transforms;
        endCache = _parseTransform(target, 1);
        style[_transformProp$1] = startValue;
      }

      for (p in _transformProps) {
        startValue = startCache[p];
        endValue = endCache[p];

        if (startValue !== endValue && exclude.indexOf(p) < 0) {
          //tweening to no perspective gives very unintuitive results - just keep the same perspective in that case.
          startUnit = getUnit(startValue);
          endUnit = getUnit(endValue);
          startNum = startUnit !== endUnit ? _convertToUnit(target, p, startValue, endUnit) : parseFloat(startValue);
          endNum = parseFloat(endValue);
          plugin._pt = new PropTween(plugin._pt, endCache, p, startNum, endNum - startNum, _renderCSSProp);
          plugin._pt.u = endUnit || 0;

          plugin._props.push(p);
        }
      }

      _assign(endCache, startCache);
    }; // handle splitting apart padding, margin, borderWidth, and borderRadius into their 4 components. Firefox, for example, won't report borderRadius correctly - it will only do borderTopLeftRadius and the other corners. We also want to handle paddingTop, marginLeft, borderRightWidth, etc.


    _forEachName("padding,margin,Width,Radius", function (name, index) {
      var t = "Top",
          r = "Right",
          b = "Bottom",
          l = "Left",
          props = (index < 3 ? [t, r, b, l] : [t + l, t + r, b + r, b + l]).map(function (side) {
        return index < 2 ? name + side : "border" + side + name;
      });

      _specialProps[index > 1 ? "border" + name : name] = function (plugin, target, property, endValue, tween) {
        var a, vars;

        if (arguments.length < 4) {
          // getter, passed target, property, and unit (from _get())
          a = props.map(function (prop) {
            return _get(plugin, prop, property);
          });
          vars = a.join(" ");
          return vars.split(a[0]).length === 5 ? a[0] : vars;
        }

        a = (endValue + "").split(" ");
        vars = {};
        props.forEach(function (prop, i) {
          return vars[prop] = a[i] = a[i] || a[(i - 1) / 2 | 0];
        });
        plugin.init(target, vars, tween);
      };
    });

    var CSSPlugin = {
      name: "css",
      register: _initCore$1,
      targetTest: function targetTest(target) {
        return target.style && target.nodeType;
      },
      init: function init(target, vars, tween, index, targets) {
        var props = this._props,
            style = target.style,
            startAt = tween.vars.startAt,
            startValue,
            endValue,
            endNum,
            startNum,
            type,
            specialProp,
            p,
            startUnit,
            endUnit,
            relative,
            isTransformRelated,
            transformPropTween,
            cache,
            smooth,
            hasPriority,
            inlineProps;
        _pluginInitted || _initCore$1(); // we may call init() multiple times on the same plugin instance, like when adding special properties, so make sure we don't overwrite the revert data or inlineProps

        this.styles = this.styles || _getStyleSaver(target);
        inlineProps = this.styles.props;
        this.tween = tween;

        for (p in vars) {
          if (p === "autoRound") {
            continue;
          }

          endValue = vars[p];

          if (_plugins[p] && _checkPlugin(p, vars, tween, index, target, targets)) {
            // plugins
            continue;
          }

          type = typeof endValue;
          specialProp = _specialProps[p];

          if (type === "function") {
            endValue = endValue.call(tween, index, target, targets);
            type = typeof endValue;
          }

          if (type === "string" && ~endValue.indexOf("random(")) {
            endValue = _replaceRandom(endValue);
          }

          if (specialProp) {
            specialProp(this, target, p, endValue, tween) && (hasPriority = 1);
          } else if (p.substr(0, 2) === "--") {
            //CSS variable
            startValue = (getComputedStyle(target).getPropertyValue(p) + "").trim();
            endValue += "";
            _colorExp.lastIndex = 0;

            if (!_colorExp.test(startValue)) {
              // colors don't have units
              startUnit = getUnit(startValue);
              endUnit = getUnit(endValue);
            }

            endUnit ? startUnit !== endUnit && (startValue = _convertToUnit(target, p, startValue, endUnit) + endUnit) : startUnit && (endValue += startUnit);
            this.add(style, "setProperty", startValue, endValue, index, targets, 0, 0, p);
            props.push(p);
            inlineProps.push(p, 0, style[p]);
          } else if (type !== "undefined") {
            if (startAt && p in startAt) {
              // in case someone hard-codes a complex value as the start, like top: "calc(2vh / 2)". Without this, it'd use the computed value (always in px)
              startValue = typeof startAt[p] === "function" ? startAt[p].call(tween, index, target, targets) : startAt[p];
              _isString$1(startValue) && ~startValue.indexOf("random(") && (startValue = _replaceRandom(startValue));
              getUnit(startValue + "") || startValue === "auto" || (startValue += _config.units[p] || getUnit(_get(target, p)) || ""); // for cases when someone passes in a unitless value like {x: 100}; if we try setting translate(100, 0px) it won't work.

              (startValue + "").charAt(1) === "=" && (startValue = _get(target, p)); // can't work with relative values
            } else {
              startValue = _get(target, p);
            }

            startNum = parseFloat(startValue);
            relative = type === "string" && endValue.charAt(1) === "=" && endValue.substr(0, 2);
            relative && (endValue = endValue.substr(2));
            endNum = parseFloat(endValue);

            if (p in _propertyAliases) {
              if (p === "autoAlpha") {
                //special case where we control the visibility along with opacity. We still allow the opacity value to pass through and get tweened.
                if (startNum === 1 && _get(target, "visibility") === "hidden" && endNum) {
                  //if visibility is initially set to "hidden", we should interpret that as intent to make opacity 0 (a convenience)
                  startNum = 0;
                }

                inlineProps.push("visibility", 0, style.visibility);

                _addNonTweeningPT(this, style, "visibility", startNum ? "inherit" : "hidden", endNum ? "inherit" : "hidden", !endNum);
              }

              if (p !== "scale" && p !== "transform") {
                p = _propertyAliases[p];
                ~p.indexOf(",") && (p = p.split(",")[0]);
              }
            }

            isTransformRelated = p in _transformProps; //--- TRANSFORM-RELATED ---

            if (isTransformRelated) {
              this.styles.save(p);

              if (!transformPropTween) {
                cache = target._gsap;
                cache.renderTransform && !vars.parseTransform || _parseTransform(target, vars.parseTransform); // if, for example, gsap.set(... {transform:"translateX(50vw)"}), the _get() call doesn't parse the transform, thus cache.renderTransform won't be set yet so force the parsing of the transform here.

                smooth = vars.smoothOrigin !== false && cache.smooth;
                transformPropTween = this._pt = new PropTween(this._pt, style, _transformProp$1, 0, 1, cache.renderTransform, cache, 0, -1); //the first time through, create the rendering PropTween so that it runs LAST (in the linked list, we keep adding to the beginning)

                transformPropTween.dep = 1; //flag it as dependent so that if things get killed/overwritten and this is the only PropTween left, we can safely kill the whole tween.
              }

              if (p === "scale") {
                this._pt = new PropTween(this._pt, cache, "scaleY", cache.scaleY, (relative ? _parseRelative(cache.scaleY, relative + endNum) : endNum) - cache.scaleY || 0, _renderCSSProp);
                this._pt.u = 0;
                props.push("scaleY", p);
                p += "X";
              } else if (p === "transformOrigin") {
                inlineProps.push(_transformOriginProp, 0, style[_transformOriginProp]);
                endValue = _convertKeywordsToPercentages(endValue); //in case something like "left top" or "bottom right" is passed in. Convert to percentages.

                if (cache.svg) {
                  _applySVGOrigin(target, endValue, 0, smooth, 0, this);
                } else {
                  endUnit = parseFloat(endValue.split(" ")[2]) || 0; //handle the zOrigin separately!

                  endUnit !== cache.zOrigin && _addNonTweeningPT(this, cache, "zOrigin", cache.zOrigin, endUnit);

                  _addNonTweeningPT(this, style, p, _firstTwoOnly(startValue), _firstTwoOnly(endValue));
                }

                continue;
              } else if (p === "svgOrigin") {
                _applySVGOrigin(target, endValue, 1, smooth, 0, this);

                continue;
              } else if (p in _rotationalProperties) {
                _addRotationalPropTween(this, cache, p, startNum, relative ? _parseRelative(startNum, relative + endValue) : endValue);

                continue;
              } else if (p === "smoothOrigin") {
                _addNonTweeningPT(this, cache, "smooth", cache.smooth, endValue);

                continue;
              } else if (p === "force3D") {
                cache[p] = endValue;
                continue;
              } else if (p === "transform") {
                _addRawTransformPTs(this, endValue, target);

                continue;
              }
            } else if (!(p in style)) {
              p = _checkPropPrefix(p) || p;
            }

            if (isTransformRelated || (endNum || endNum === 0) && (startNum || startNum === 0) && !_complexExp.test(endValue) && p in style) {
              startUnit = (startValue + "").substr((startNum + "").length);
              endNum || (endNum = 0); // protect against NaN

              endUnit = getUnit(endValue) || (p in _config.units ? _config.units[p] : startUnit);
              startUnit !== endUnit && (startNum = _convertToUnit(target, p, startValue, endUnit));
              this._pt = new PropTween(this._pt, isTransformRelated ? cache : style, p, startNum, (relative ? _parseRelative(startNum, relative + endNum) : endNum) - startNum, !isTransformRelated && (endUnit === "px" || p === "zIndex") && vars.autoRound !== false ? _renderRoundedCSSProp : _renderCSSProp);
              this._pt.u = endUnit || 0;

              if (startUnit !== endUnit && endUnit !== "%") {
                //when the tween goes all the way back to the beginning, we need to revert it to the OLD/ORIGINAL value (with those units). We record that as a "b" (beginning) property and point to a render method that handles that. (performance optimization)
                this._pt.b = startValue;
                this._pt.r = _renderCSSPropWithBeginning;
              }
            } else if (!(p in style)) {
              if (p in target) {
                //maybe it's not a style - it could be a property added directly to an element in which case we'll try to animate that.
                this.add(target, p, startValue || target[p], relative ? relative + endValue : endValue, index, targets);
              } else if (p !== "parseTransform") {
                _missingPlugin(p, endValue);

                continue;
              }
            } else {
              _tweenComplexCSSString.call(this, target, p, startValue, relative ? relative + endValue : endValue);
            }

            isTransformRelated || (p in style ? inlineProps.push(p, 0, style[p]) : typeof target[p] === "function" ? inlineProps.push(p, 2, target[p]()) : inlineProps.push(p, 1, startValue || target[p]));
            props.push(p);
          }
        }

        hasPriority && _sortPropTweensByPriority(this);
      },
      render: function render(ratio, data) {
        if (data.tween._time || !_reverting()) {
          var pt = data._pt;

          while (pt) {
            pt.r(ratio, pt.d);
            pt = pt._next;
          }
        } else {
          data.styles.revert();
        }
      },
      get: _get,
      aliases: _propertyAliases,
      getSetter: function getSetter(target, property, plugin) {
        //returns a setter function that accepts target, property, value and applies it accordingly. Remember, properties like "x" aren't as simple as target.style.property = value because they've got to be applied to a proxy object and then merged into a transform string in a renderer.
        var p = _propertyAliases[property];
        p && p.indexOf(",") < 0 && (property = p);
        return property in _transformProps && property !== _transformOriginProp && (target._gsap.x || _get(target, "x")) ? plugin && _recentSetterPlugin === plugin ? property === "scale" ? _setterScale : _setterTransform : (_recentSetterPlugin = plugin || {}) && (property === "scale" ? _setterScaleWithRender : _setterTransformWithRender) : target.style && !_isUndefined(target.style[property]) ? _setterCSSStyle : ~property.indexOf("-") ? _setterCSSProp : _getSetter(target, property);
      },
      core: {
        _removeProperty: _removeProperty,
        _getMatrix: _getMatrix
      }
    };
    gsap$2.utils.checkPrefix = _checkPropPrefix;
    gsap$2.core.getStyleSaver = _getStyleSaver;

    (function (positionAndScale, rotation, others, aliases) {
      var all = _forEachName(positionAndScale + "," + rotation + "," + others, function (name) {
        _transformProps[name] = 1;
      });

      _forEachName(rotation, function (name) {
        _config.units[name] = "deg";
        _rotationalProperties[name] = 1;
      });

      _propertyAliases[all[13]] = positionAndScale + "," + rotation;

      _forEachName(aliases, function (name) {
        var split = name.split(":");
        _propertyAliases[split[1]] = all[split[0]];
      });
    })("x,y,z,scale,scaleX,scaleY,xPercent,yPercent", "rotation,rotationX,rotationY,skewX,skewY", "transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective", "0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY");

    _forEachName("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective", function (name) {
      _config.units[name] = "px";
    });

    gsap$2.registerPlugin(CSSPlugin);

    var gsapWithCSS = gsap$2.registerPlugin(CSSPlugin) || gsap$2;
        // to protect from tree shaking
    gsapWithCSS.core.Tween;

    function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

    function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

    /*!
     * Observer 3.12.7
     * https://gsap.com
     *
     * @license Copyright 2008-2025, GreenSock. All rights reserved.
     * Subject to the terms at https://gsap.com/standard-license or for
     * Club GSAP members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */

    /* eslint-disable */
    var gsap$1,
        _coreInitted$1,
        _win$1,
        _doc$1,
        _docEl$1,
        _body$1,
        _isTouch,
        _pointerType,
        ScrollTrigger$1,
        _root$1,
        _normalizer$1,
        _eventTypes,
        _context$1,
        _getGSAP$1 = function _getGSAP() {
      return gsap$1 || typeof window !== "undefined" && (gsap$1 = window.gsap) && gsap$1.registerPlugin && gsap$1;
    },
        _startup$1 = 1,
        _observers = [],
        _scrollers = [],
        _proxies = [],
        _getTime$1 = Date.now,
        _bridge = function _bridge(name, value) {
      return value;
    },
        _integrate = function _integrate() {
      var core = ScrollTrigger$1.core,
          data = core.bridge || {},
          scrollers = core._scrollers,
          proxies = core._proxies;
      scrollers.push.apply(scrollers, _scrollers);
      proxies.push.apply(proxies, _proxies);
      _scrollers = scrollers;
      _proxies = proxies;

      _bridge = function _bridge(name, value) {
        return data[name](value);
      };
    },
        _getProxyProp = function _getProxyProp(element, property) {
      return ~_proxies.indexOf(element) && _proxies[_proxies.indexOf(element) + 1][property];
    },
        _isViewport$1 = function _isViewport(el) {
      return !!~_root$1.indexOf(el);
    },
        _addListener$1 = function _addListener(element, type, func, passive, capture) {
      return element.addEventListener(type, func, {
        passive: passive !== false,
        capture: !!capture
      });
    },
        _removeListener$1 = function _removeListener(element, type, func, capture) {
      return element.removeEventListener(type, func, !!capture);
    },
        _scrollLeft = "scrollLeft",
        _scrollTop = "scrollTop",
        _onScroll$1 = function _onScroll() {
      return _normalizer$1 && _normalizer$1.isPressed || _scrollers.cache++;
    },
        _scrollCacheFunc = function _scrollCacheFunc(f, doNotCache) {
      var cachingFunc = function cachingFunc(value) {
        // since reading the scrollTop/scrollLeft/pageOffsetY/pageOffsetX can trigger a layout, this function allows us to cache the value so it only gets read fresh after a "scroll" event fires (or while we're refreshing because that can lengthen the page and alter the scroll position). when "soft" is true, that means don't actually set the scroll, but cache the new value instead (useful in ScrollSmoother)
        if (value || value === 0) {
          _startup$1 && (_win$1.history.scrollRestoration = "manual"); // otherwise the new position will get overwritten by the browser onload.

          var isNormalizing = _normalizer$1 && _normalizer$1.isPressed;
          value = cachingFunc.v = Math.round(value) || (_normalizer$1 && _normalizer$1.iOS ? 1 : 0); //TODO: iOS Bug: if you allow it to go to 0, Safari can start to report super strange (wildly inaccurate) touch positions!

          f(value);
          cachingFunc.cacheID = _scrollers.cache;
          isNormalizing && _bridge("ss", value); // set scroll (notify ScrollTrigger so it can dispatch a "scrollStart" event if necessary
        } else if (doNotCache || _scrollers.cache !== cachingFunc.cacheID || _bridge("ref")) {
          cachingFunc.cacheID = _scrollers.cache;
          cachingFunc.v = f();
        }

        return cachingFunc.v + cachingFunc.offset;
      };

      cachingFunc.offset = 0;
      return f && cachingFunc;
    },
        _horizontal = {
      s: _scrollLeft,
      p: "left",
      p2: "Left",
      os: "right",
      os2: "Right",
      d: "width",
      d2: "Width",
      a: "x",
      sc: _scrollCacheFunc(function (value) {
        return arguments.length ? _win$1.scrollTo(value, _vertical.sc()) : _win$1.pageXOffset || _doc$1[_scrollLeft] || _docEl$1[_scrollLeft] || _body$1[_scrollLeft] || 0;
      })
    },
        _vertical = {
      s: _scrollTop,
      p: "top",
      p2: "Top",
      os: "bottom",
      os2: "Bottom",
      d: "height",
      d2: "Height",
      a: "y",
      op: _horizontal,
      sc: _scrollCacheFunc(function (value) {
        return arguments.length ? _win$1.scrollTo(_horizontal.sc(), value) : _win$1.pageYOffset || _doc$1[_scrollTop] || _docEl$1[_scrollTop] || _body$1[_scrollTop] || 0;
      })
    },
        _getTarget = function _getTarget(t, self) {
      return (self && self._ctx && self._ctx.selector || gsap$1.utils.toArray)(t)[0] || (typeof t === "string" && gsap$1.config().nullTargetWarn !== false ? console.warn("Element not found:", t) : null);
    },
        _getScrollFunc = function _getScrollFunc(element, _ref) {
      var s = _ref.s,
          sc = _ref.sc;
      // we store the scroller functions in an alternating sequenced Array like [element, verticalScrollFunc, horizontalScrollFunc, ...] so that we can minimize memory, maximize performance, and we also record the last position as a ".rec" property in order to revert to that after refreshing to ensure things don't shift around.
      _isViewport$1(element) && (element = _doc$1.scrollingElement || _docEl$1);

      var i = _scrollers.indexOf(element),
          offset = sc === _vertical.sc ? 1 : 2;

      !~i && (i = _scrollers.push(element) - 1);
      _scrollers[i + offset] || _addListener$1(element, "scroll", _onScroll$1); // clear the cache when a scroll occurs

      var prev = _scrollers[i + offset],
          func = prev || (_scrollers[i + offset] = _scrollCacheFunc(_getProxyProp(element, s), true) || (_isViewport$1(element) ? sc : _scrollCacheFunc(function (value) {
        return arguments.length ? element[s] = value : element[s];
      })));
      func.target = element;
      prev || (func.smooth = gsap$1.getProperty(element, "scrollBehavior") === "smooth"); // only set it the first time (don't reset every time a scrollFunc is requested because perhaps it happens during a refresh() when it's disabled in ScrollTrigger.

      return func;
    },
        _getVelocityProp = function _getVelocityProp(value, minTimeRefresh, useDelta) {
      var v1 = value,
          v2 = value,
          t1 = _getTime$1(),
          t2 = t1,
          min = minTimeRefresh || 50,
          dropToZeroTime = Math.max(500, min * 3),
          update = function update(value, force) {
        var t = _getTime$1();

        if (force || t - t1 > min) {
          v2 = v1;
          v1 = value;
          t2 = t1;
          t1 = t;
        } else if (useDelta) {
          v1 += value;
        } else {
          // not totally necessary, but makes it a bit more accurate by adjusting the v1 value according to the new slope. This way we're not just ignoring the incoming data. Removing for now because it doesn't seem to make much practical difference and it's probably not worth the kb.
          v1 = v2 + (value - v2) / (t - t2) * (t1 - t2);
        }
      },
          reset = function reset() {
        v2 = v1 = useDelta ? 0 : v1;
        t2 = t1 = 0;
      },
          getVelocity = function getVelocity(latestValue) {
        var tOld = t2,
            vOld = v2,
            t = _getTime$1();

        (latestValue || latestValue === 0) && latestValue !== v1 && update(latestValue);
        return t1 === t2 || t - t2 > dropToZeroTime ? 0 : (v1 + (useDelta ? vOld : -vOld)) / ((useDelta ? t : t1) - tOld) * 1000;
      };

      return {
        update: update,
        reset: reset,
        getVelocity: getVelocity
      };
    },
        _getEvent = function _getEvent(e, preventDefault) {
      preventDefault && !e._gsapAllow && e.preventDefault();
      return e.changedTouches ? e.changedTouches[0] : e;
    },
        _getAbsoluteMax = function _getAbsoluteMax(a) {
      var max = Math.max.apply(Math, a),
          min = Math.min.apply(Math, a);
      return Math.abs(max) >= Math.abs(min) ? max : min;
    },
        _setScrollTrigger = function _setScrollTrigger() {
      ScrollTrigger$1 = gsap$1.core.globals().ScrollTrigger;
      ScrollTrigger$1 && ScrollTrigger$1.core && _integrate();
    },
        _initCore = function _initCore(core) {
      gsap$1 = core || _getGSAP$1();

      if (!_coreInitted$1 && gsap$1 && typeof document !== "undefined" && document.body) {
        _win$1 = window;
        _doc$1 = document;
        _docEl$1 = _doc$1.documentElement;
        _body$1 = _doc$1.body;
        _root$1 = [_win$1, _doc$1, _docEl$1, _body$1];
        gsap$1.utils.clamp;

        _context$1 = gsap$1.core.context || function () {};

        _pointerType = "onpointerenter" in _body$1 ? "pointer" : "mouse"; // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

        _isTouch = Observer.isTouch = _win$1.matchMedia && _win$1.matchMedia("(hover: none), (pointer: coarse)").matches ? 1 : "ontouchstart" in _win$1 || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0 ? 2 : 0;
        _eventTypes = Observer.eventTypes = ("ontouchstart" in _docEl$1 ? "touchstart,touchmove,touchcancel,touchend" : !("onpointerdown" in _docEl$1) ? "mousedown,mousemove,mouseup,mouseup" : "pointerdown,pointermove,pointercancel,pointerup").split(",");
        setTimeout(function () {
          return _startup$1 = 0;
        }, 500);

        _setScrollTrigger();

        _coreInitted$1 = 1;
      }

      return _coreInitted$1;
    };

    _horizontal.op = _vertical;
    _scrollers.cache = 0;
    var Observer = /*#__PURE__*/function () {
      function Observer(vars) {
        this.init(vars);
      }

      var _proto = Observer.prototype;

      _proto.init = function init(vars) {
        _coreInitted$1 || _initCore(gsap$1) || console.warn("Please gsap.registerPlugin(Observer)");
        ScrollTrigger$1 || _setScrollTrigger();
        var tolerance = vars.tolerance,
            dragMinimum = vars.dragMinimum,
            type = vars.type,
            target = vars.target,
            lineHeight = vars.lineHeight,
            debounce = vars.debounce,
            preventDefault = vars.preventDefault,
            onStop = vars.onStop,
            onStopDelay = vars.onStopDelay,
            ignore = vars.ignore,
            wheelSpeed = vars.wheelSpeed,
            event = vars.event,
            onDragStart = vars.onDragStart,
            onDragEnd = vars.onDragEnd,
            onDrag = vars.onDrag,
            onPress = vars.onPress,
            onRelease = vars.onRelease,
            onRight = vars.onRight,
            onLeft = vars.onLeft,
            onUp = vars.onUp,
            onDown = vars.onDown,
            onChangeX = vars.onChangeX,
            onChangeY = vars.onChangeY,
            onChange = vars.onChange,
            onToggleX = vars.onToggleX,
            onToggleY = vars.onToggleY,
            onHover = vars.onHover,
            onHoverEnd = vars.onHoverEnd,
            onMove = vars.onMove,
            ignoreCheck = vars.ignoreCheck,
            isNormalizer = vars.isNormalizer,
            onGestureStart = vars.onGestureStart,
            onGestureEnd = vars.onGestureEnd,
            onWheel = vars.onWheel,
            onEnable = vars.onEnable,
            onDisable = vars.onDisable,
            onClick = vars.onClick,
            scrollSpeed = vars.scrollSpeed,
            capture = vars.capture,
            allowClicks = vars.allowClicks,
            lockAxis = vars.lockAxis,
            onLockAxis = vars.onLockAxis;
        this.target = target = _getTarget(target) || _docEl$1;
        this.vars = vars;
        ignore && (ignore = gsap$1.utils.toArray(ignore));
        tolerance = tolerance || 1e-9;
        dragMinimum = dragMinimum || 0;
        wheelSpeed = wheelSpeed || 1;
        scrollSpeed = scrollSpeed || 1;
        type = type || "wheel,touch,pointer";
        debounce = debounce !== false;
        lineHeight || (lineHeight = parseFloat(_win$1.getComputedStyle(_body$1).lineHeight) || 22); // note: browser may report "normal", so default to 22.

        var id,
            onStopDelayedCall,
            dragged,
            moved,
            wheeled,
            locked,
            axis,
            self = this,
            prevDeltaX = 0,
            prevDeltaY = 0,
            passive = vars.passive || !preventDefault && vars.passive !== false,
            scrollFuncX = _getScrollFunc(target, _horizontal),
            scrollFuncY = _getScrollFunc(target, _vertical),
            scrollX = scrollFuncX(),
            scrollY = scrollFuncY(),
            limitToTouch = ~type.indexOf("touch") && !~type.indexOf("pointer") && _eventTypes[0] === "pointerdown",
            // for devices that accommodate mouse events and touch events, we need to distinguish.
        isViewport = _isViewport$1(target),
            ownerDoc = target.ownerDocument || _doc$1,
            deltaX = [0, 0, 0],
            // wheel, scroll, pointer/touch
        deltaY = [0, 0, 0],
            onClickTime = 0,
            clickCapture = function clickCapture() {
          return onClickTime = _getTime$1();
        },
            _ignoreCheck = function _ignoreCheck(e, isPointerOrTouch) {
          return (self.event = e) && ignore && ~ignore.indexOf(e.target) || isPointerOrTouch && limitToTouch && e.pointerType !== "touch" || ignoreCheck && ignoreCheck(e, isPointerOrTouch);
        },
            onStopFunc = function onStopFunc() {
          self._vx.reset();

          self._vy.reset();

          onStopDelayedCall.pause();
          onStop && onStop(self);
        },
            update = function update() {
          var dx = self.deltaX = _getAbsoluteMax(deltaX),
              dy = self.deltaY = _getAbsoluteMax(deltaY),
              changedX = Math.abs(dx) >= tolerance,
              changedY = Math.abs(dy) >= tolerance;

          onChange && (changedX || changedY) && onChange(self, dx, dy, deltaX, deltaY); // in ScrollTrigger.normalizeScroll(), we need to know if it was touch/pointer so we need access to the deltaX/deltaY Arrays before we clear them out.

          if (changedX) {
            onRight && self.deltaX > 0 && onRight(self);
            onLeft && self.deltaX < 0 && onLeft(self);
            onChangeX && onChangeX(self);
            onToggleX && self.deltaX < 0 !== prevDeltaX < 0 && onToggleX(self);
            prevDeltaX = self.deltaX;
            deltaX[0] = deltaX[1] = deltaX[2] = 0;
          }

          if (changedY) {
            onDown && self.deltaY > 0 && onDown(self);
            onUp && self.deltaY < 0 && onUp(self);
            onChangeY && onChangeY(self);
            onToggleY && self.deltaY < 0 !== prevDeltaY < 0 && onToggleY(self);
            prevDeltaY = self.deltaY;
            deltaY[0] = deltaY[1] = deltaY[2] = 0;
          }

          if (moved || dragged) {
            onMove && onMove(self);

            if (dragged) {
              onDragStart && dragged === 1 && onDragStart(self);
              onDrag && onDrag(self);
              dragged = 0;
            }

            moved = false;
          }

          locked && !(locked = false) && onLockAxis && onLockAxis(self);

          if (wheeled) {
            onWheel(self);
            wheeled = false;
          }

          id = 0;
        },
            onDelta = function onDelta(x, y, index) {
          deltaX[index] += x;
          deltaY[index] += y;

          self._vx.update(x);

          self._vy.update(y);

          debounce ? id || (id = requestAnimationFrame(update)) : update();
        },
            onTouchOrPointerDelta = function onTouchOrPointerDelta(x, y) {
          if (lockAxis && !axis) {
            self.axis = axis = Math.abs(x) > Math.abs(y) ? "x" : "y";
            locked = true;
          }

          if (axis !== "y") {
            deltaX[2] += x;

            self._vx.update(x, true); // update the velocity as frequently as possible instead of in the debounced function so that very quick touch-scrolls (flicks) feel natural. If it's the mouse/touch/pointer, force it so that we get snappy/accurate momentum scroll.

          }

          if (axis !== "x") {
            deltaY[2] += y;

            self._vy.update(y, true);
          }

          debounce ? id || (id = requestAnimationFrame(update)) : update();
        },
            _onDrag = function _onDrag(e) {
          if (_ignoreCheck(e, 1)) {
            return;
          }

          e = _getEvent(e, preventDefault);
          var x = e.clientX,
              y = e.clientY,
              dx = x - self.x,
              dy = y - self.y,
              isDragging = self.isDragging;
          self.x = x;
          self.y = y;

          if (isDragging || (dx || dy) && (Math.abs(self.startX - x) >= dragMinimum || Math.abs(self.startY - y) >= dragMinimum)) {
            dragged = isDragging ? 2 : 1; // dragged: 0 = not dragging, 1 = first drag, 2 = normal drag

            isDragging || (self.isDragging = true);
            onTouchOrPointerDelta(dx, dy);
          }
        },
            _onPress = self.onPress = function (e) {
          if (_ignoreCheck(e, 1) || e && e.button) {
            return;
          }

          self.axis = axis = null;
          onStopDelayedCall.pause();
          self.isPressed = true;
          e = _getEvent(e); // note: may need to preventDefault(?) Won't side-scroll on iOS Safari if we do, though.

          prevDeltaX = prevDeltaY = 0;
          self.startX = self.x = e.clientX;
          self.startY = self.y = e.clientY;

          self._vx.reset(); // otherwise the t2 may be stale if the user touches and flicks super fast and releases in less than 2 requestAnimationFrame ticks, causing velocity to be 0.


          self._vy.reset();

          _addListener$1(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, passive, true);

          self.deltaX = self.deltaY = 0;
          onPress && onPress(self);
        },
            _onRelease = self.onRelease = function (e) {
          if (_ignoreCheck(e, 1)) {
            return;
          }

          _removeListener$1(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);

          var isTrackingDrag = !isNaN(self.y - self.startY),
              wasDragging = self.isDragging,
              isDragNotClick = wasDragging && (Math.abs(self.x - self.startX) > 3 || Math.abs(self.y - self.startY) > 3),
              // some touch devices need some wiggle room in terms of sensing clicks - the finger may move a few pixels.
          eventData = _getEvent(e);

          if (!isDragNotClick && isTrackingDrag) {
            self._vx.reset();

            self._vy.reset(); //if (preventDefault && allowClicks && self.isPressed) { // check isPressed because in a rare edge case, the inputObserver in ScrollTrigger may stopPropagation() on the press/drag, so the onRelease may get fired without the onPress/onDrag ever getting called, thus it could trigger a click to occur on a link after scroll-dragging it.


            if (preventDefault && allowClicks) {
              gsap$1.delayedCall(0.08, function () {
                // some browsers (like Firefox) won't trust script-generated clicks, so if the user tries to click on a video to play it, for example, it simply won't work. Since a regular "click" event will most likely be generated anyway (one that has its isTrusted flag set to true), we must slightly delay our script-generated click so that the "real"/trusted one is prioritized. Remember, when there are duplicate events in quick succession, we suppress all but the first one. Some browsers don't even trigger the "real" one at all, so our synthetic one is a safety valve that ensures that no matter what, a click event does get dispatched.
                if (_getTime$1() - onClickTime > 300 && !e.defaultPrevented) {
                  if (e.target.click) {
                    //some browsers (like mobile Safari) don't properly trigger the click event
                    e.target.click();
                  } else if (ownerDoc.createEvent) {
                    var syntheticEvent = ownerDoc.createEvent("MouseEvents");
                    syntheticEvent.initMouseEvent("click", true, true, _win$1, 1, eventData.screenX, eventData.screenY, eventData.clientX, eventData.clientY, false, false, false, false, 0, null);
                    e.target.dispatchEvent(syntheticEvent);
                  }
                }
              });
            }
          }

          self.isDragging = self.isGesturing = self.isPressed = false;
          onStop && wasDragging && !isNormalizer && onStopDelayedCall.restart(true);
          dragged && update(); // in case debouncing, we don't want onDrag to fire AFTER onDragEnd().

          onDragEnd && wasDragging && onDragEnd(self);
          onRelease && onRelease(self, isDragNotClick);
        },
            _onGestureStart = function _onGestureStart(e) {
          return e.touches && e.touches.length > 1 && (self.isGesturing = true) && onGestureStart(e, self.isDragging);
        },
            _onGestureEnd = function _onGestureEnd() {
          return (self.isGesturing = false) || onGestureEnd(self);
        },
            onScroll = function onScroll(e) {
          if (_ignoreCheck(e)) {
            return;
          }

          var x = scrollFuncX(),
              y = scrollFuncY();
          onDelta((x - scrollX) * scrollSpeed, (y - scrollY) * scrollSpeed, 1);
          scrollX = x;
          scrollY = y;
          onStop && onStopDelayedCall.restart(true);
        },
            _onWheel = function _onWheel(e) {
          if (_ignoreCheck(e)) {
            return;
          }

          e = _getEvent(e, preventDefault);
          onWheel && (wheeled = true);
          var multiplier = (e.deltaMode === 1 ? lineHeight : e.deltaMode === 2 ? _win$1.innerHeight : 1) * wheelSpeed;
          onDelta(e.deltaX * multiplier, e.deltaY * multiplier, 0);
          onStop && !isNormalizer && onStopDelayedCall.restart(true);
        },
            _onMove = function _onMove(e) {
          if (_ignoreCheck(e)) {
            return;
          }

          var x = e.clientX,
              y = e.clientY,
              dx = x - self.x,
              dy = y - self.y;
          self.x = x;
          self.y = y;
          moved = true;
          onStop && onStopDelayedCall.restart(true);
          (dx || dy) && onTouchOrPointerDelta(dx, dy);
        },
            _onHover = function _onHover(e) {
          self.event = e;
          onHover(self);
        },
            _onHoverEnd = function _onHoverEnd(e) {
          self.event = e;
          onHoverEnd(self);
        },
            _onClick = function _onClick(e) {
          return _ignoreCheck(e) || _getEvent(e, preventDefault) && onClick(self);
        };

        onStopDelayedCall = self._dc = gsap$1.delayedCall(onStopDelay || 0.25, onStopFunc).pause();
        self.deltaX = self.deltaY = 0;
        self._vx = _getVelocityProp(0, 50, true);
        self._vy = _getVelocityProp(0, 50, true);
        self.scrollX = scrollFuncX;
        self.scrollY = scrollFuncY;
        self.isDragging = self.isGesturing = self.isPressed = false;

        _context$1(this);

        self.enable = function (e) {
          if (!self.isEnabled) {
            _addListener$1(isViewport ? ownerDoc : target, "scroll", _onScroll$1);

            type.indexOf("scroll") >= 0 && _addListener$1(isViewport ? ownerDoc : target, "scroll", onScroll, passive, capture);
            type.indexOf("wheel") >= 0 && _addListener$1(target, "wheel", _onWheel, passive, capture);

            if (type.indexOf("touch") >= 0 && _isTouch || type.indexOf("pointer") >= 0) {
              _addListener$1(target, _eventTypes[0], _onPress, passive, capture);

              _addListener$1(ownerDoc, _eventTypes[2], _onRelease);

              _addListener$1(ownerDoc, _eventTypes[3], _onRelease);

              allowClicks && _addListener$1(target, "click", clickCapture, true, true);
              onClick && _addListener$1(target, "click", _onClick);
              onGestureStart && _addListener$1(ownerDoc, "gesturestart", _onGestureStart);
              onGestureEnd && _addListener$1(ownerDoc, "gestureend", _onGestureEnd);
              onHover && _addListener$1(target, _pointerType + "enter", _onHover);
              onHoverEnd && _addListener$1(target, _pointerType + "leave", _onHoverEnd);
              onMove && _addListener$1(target, _pointerType + "move", _onMove);
            }

            self.isEnabled = true;
            self.isDragging = self.isGesturing = self.isPressed = moved = dragged = false;

            self._vx.reset();

            self._vy.reset();

            scrollX = scrollFuncX();
            scrollY = scrollFuncY();
            e && e.type && _onPress(e);
            onEnable && onEnable(self);
          }

          return self;
        };

        self.disable = function () {
          if (self.isEnabled) {
            // only remove the _onScroll listener if there aren't any others that rely on the functionality.
            _observers.filter(function (o) {
              return o !== self && _isViewport$1(o.target);
            }).length || _removeListener$1(isViewport ? ownerDoc : target, "scroll", _onScroll$1);

            if (self.isPressed) {
              self._vx.reset();

              self._vy.reset();

              _removeListener$1(isNormalizer ? target : ownerDoc, _eventTypes[1], _onDrag, true);
            }

            _removeListener$1(isViewport ? ownerDoc : target, "scroll", onScroll, capture);

            _removeListener$1(target, "wheel", _onWheel, capture);

            _removeListener$1(target, _eventTypes[0], _onPress, capture);

            _removeListener$1(ownerDoc, _eventTypes[2], _onRelease);

            _removeListener$1(ownerDoc, _eventTypes[3], _onRelease);

            _removeListener$1(target, "click", clickCapture, true);

            _removeListener$1(target, "click", _onClick);

            _removeListener$1(ownerDoc, "gesturestart", _onGestureStart);

            _removeListener$1(ownerDoc, "gestureend", _onGestureEnd);

            _removeListener$1(target, _pointerType + "enter", _onHover);

            _removeListener$1(target, _pointerType + "leave", _onHoverEnd);

            _removeListener$1(target, _pointerType + "move", _onMove);

            self.isEnabled = self.isPressed = self.isDragging = false;
            onDisable && onDisable(self);
          }
        };

        self.kill = self.revert = function () {
          self.disable();

          var i = _observers.indexOf(self);

          i >= 0 && _observers.splice(i, 1);
          _normalizer$1 === self && (_normalizer$1 = 0);
        };

        _observers.push(self);

        isNormalizer && _isViewport$1(target) && (_normalizer$1 = self);
        self.enable(event);
      };

      _createClass(Observer, [{
        key: "velocityX",
        get: function get() {
          return this._vx.getVelocity();
        }
      }, {
        key: "velocityY",
        get: function get() {
          return this._vy.getVelocity();
        }
      }]);

      return Observer;
    }();
    Observer.version = "3.12.7";

    Observer.create = function (vars) {
      return new Observer(vars);
    };

    Observer.register = _initCore;

    Observer.getAll = function () {
      return _observers.slice();
    };

    Observer.getById = function (id) {
      return _observers.filter(function (o) {
        return o.vars.id === id;
      })[0];
    };

    _getGSAP$1() && gsap$1.registerPlugin(Observer);

    /*!
     * ScrollTrigger 3.12.7
     * https://gsap.com
     *
     * @license Copyright 2008-2025, GreenSock. All rights reserved.
     * Subject to the terms at https://gsap.com/standard-license or for
     * Club GSAP members, the agreement issued with that membership.
     * @author: Jack Doyle, jack@greensock.com
    */


    var gsap,
        _coreInitted,
        _win,
        _doc,
        _docEl,
        _body,
        _root,
        _resizeDelay,
        _toArray,
        _clamp,
        _time2,
        _syncInterval,
        _refreshing,
        _pointerIsDown,
        _transformProp,
        _i,
        _prevWidth,
        _prevHeight,
        _autoRefresh,
        _sort,
        _suppressOverwrites,
        _ignoreResize,
        _normalizer,
        _ignoreMobileResize,
        _baseScreenHeight,
        _baseScreenWidth,
        _fixIOSBug,
        _context,
        _scrollRestoration,
        _div100vh,
        _100vh,
        _isReverted,
        _clampingMax,
        _limitCallbacks,
        // if true, we'll only trigger callbacks if the active state toggles, so if you scroll immediately past both the start and end positions of a ScrollTrigger (thus inactive to inactive), neither its onEnter nor onLeave will be called. This is useful during startup.
    _startup = 1,
        _getTime = Date.now,
        _time1 = _getTime(),
        _lastScrollTime = 0,
        _enabled = 0,
        _parseClamp = function _parseClamp(value, type, self) {
      var clamp = _isString(value) && (value.substr(0, 6) === "clamp(" || value.indexOf("max") > -1);
      self["_" + type + "Clamp"] = clamp;
      return clamp ? value.substr(6, value.length - 7) : value;
    },
        _keepClamp = function _keepClamp(value, clamp) {
      return clamp && (!_isString(value) || value.substr(0, 6) !== "clamp(") ? "clamp(" + value + ")" : value;
    },
        _rafBugFix = function _rafBugFix() {
      return _enabled && requestAnimationFrame(_rafBugFix);
    },
        // in some browsers (like Firefox), screen repaints weren't consistent unless we had SOMETHING queued up in requestAnimationFrame()! So this just creates a super simple loop to keep it alive and smooth out repaints.
    _pointerDownHandler = function _pointerDownHandler() {
      return _pointerIsDown = 1;
    },
        _pointerUpHandler = function _pointerUpHandler() {
      return _pointerIsDown = 0;
    },
        _passThrough = function _passThrough(v) {
      return v;
    },
        _round = function _round(value) {
      return Math.round(value * 100000) / 100000 || 0;
    },
        _windowExists = function _windowExists() {
      return typeof window !== "undefined";
    },
        _getGSAP = function _getGSAP() {
      return gsap || _windowExists() && (gsap = window.gsap) && gsap.registerPlugin && gsap;
    },
        _isViewport = function _isViewport(e) {
      return !!~_root.indexOf(e);
    },
        _getViewportDimension = function _getViewportDimension(dimensionProperty) {
      return (dimensionProperty === "Height" ? _100vh : _win["inner" + dimensionProperty]) || _docEl["client" + dimensionProperty] || _body["client" + dimensionProperty];
    },
        _getBoundsFunc = function _getBoundsFunc(element) {
      return _getProxyProp(element, "getBoundingClientRect") || (_isViewport(element) ? function () {
        _winOffsets.width = _win.innerWidth;
        _winOffsets.height = _100vh;
        return _winOffsets;
      } : function () {
        return _getBounds(element);
      });
    },
        _getSizeFunc = function _getSizeFunc(scroller, isViewport, _ref) {
      var d = _ref.d,
          d2 = _ref.d2,
          a = _ref.a;
      return (a = _getProxyProp(scroller, "getBoundingClientRect")) ? function () {
        return a()[d];
      } : function () {
        return (isViewport ? _getViewportDimension(d2) : scroller["client" + d2]) || 0;
      };
    },
        _getOffsetsFunc = function _getOffsetsFunc(element, isViewport) {
      return !isViewport || ~_proxies.indexOf(element) ? _getBoundsFunc(element) : function () {
        return _winOffsets;
      };
    },
        _maxScroll = function _maxScroll(element, _ref2) {
      var s = _ref2.s,
          d2 = _ref2.d2,
          d = _ref2.d,
          a = _ref2.a;
      return Math.max(0, (s = "scroll" + d2) && (a = _getProxyProp(element, s)) ? a() - _getBoundsFunc(element)()[d] : _isViewport(element) ? (_docEl[s] || _body[s]) - _getViewportDimension(d2) : element[s] - element["offset" + d2]);
    },
        _iterateAutoRefresh = function _iterateAutoRefresh(func, events) {
      for (var i = 0; i < _autoRefresh.length; i += 3) {
        (!events || ~events.indexOf(_autoRefresh[i + 1])) && func(_autoRefresh[i], _autoRefresh[i + 1], _autoRefresh[i + 2]);
      }
    },
        _isString = function _isString(value) {
      return typeof value === "string";
    },
        _isFunction = function _isFunction(value) {
      return typeof value === "function";
    },
        _isNumber = function _isNumber(value) {
      return typeof value === "number";
    },
        _isObject = function _isObject(value) {
      return typeof value === "object";
    },
        _endAnimation = function _endAnimation(animation, reversed, pause) {
      return animation && animation.progress(reversed ? 0 : 1) && pause && animation.pause();
    },
        _callback = function _callback(self, func) {
      if (self.enabled) {
        var result = self._ctx ? self._ctx.add(function () {
          return func(self);
        }) : func(self);
        result && result.totalTime && (self.callbackAnimation = result);
      }
    },
        _abs = Math.abs,
        _left = "left",
        _top = "top",
        _right = "right",
        _bottom = "bottom",
        _width = "width",
        _height = "height",
        _Right = "Right",
        _Left = "Left",
        _Top = "Top",
        _Bottom = "Bottom",
        _padding = "padding",
        _margin = "margin",
        _Width = "Width",
        _Height = "Height",
        _px = "px",
        _getComputedStyle = function _getComputedStyle(element) {
      return _win.getComputedStyle(element);
    },
        _makePositionable = function _makePositionable(element) {
      // if the element already has position: absolute or fixed, leave that, otherwise make it position: relative
      var position = _getComputedStyle(element).position;

      element.style.position = position === "absolute" || position === "fixed" ? position : "relative";
    },
        _setDefaults = function _setDefaults(obj, defaults) {
      for (var p in defaults) {
        p in obj || (obj[p] = defaults[p]);
      }

      return obj;
    },
        _getBounds = function _getBounds(element, withoutTransforms) {
      var tween = withoutTransforms && _getComputedStyle(element)[_transformProp] !== "matrix(1, 0, 0, 1, 0, 0)" && gsap.to(element, {
        x: 0,
        y: 0,
        xPercent: 0,
        yPercent: 0,
        rotation: 0,
        rotationX: 0,
        rotationY: 0,
        scale: 1,
        skewX: 0,
        skewY: 0
      }).progress(1),
          bounds = element.getBoundingClientRect();
      tween && tween.progress(0).kill();
      return bounds;
    },
        _getSize = function _getSize(element, _ref3) {
      var d2 = _ref3.d2;
      return element["offset" + d2] || element["client" + d2] || 0;
    },
        _getLabelRatioArray = function _getLabelRatioArray(timeline) {
      var a = [],
          labels = timeline.labels,
          duration = timeline.duration(),
          p;

      for (p in labels) {
        a.push(labels[p] / duration);
      }

      return a;
    },
        _getClosestLabel = function _getClosestLabel(animation) {
      return function (value) {
        return gsap.utils.snap(_getLabelRatioArray(animation), value);
      };
    },
        _snapDirectional = function _snapDirectional(snapIncrementOrArray) {
      var snap = gsap.utils.snap(snapIncrementOrArray),
          a = Array.isArray(snapIncrementOrArray) && snapIncrementOrArray.slice(0).sort(function (a, b) {
        return a - b;
      });
      return a ? function (value, direction, threshold) {
        if (threshold === void 0) {
          threshold = 1e-3;
        }

        var i;

        if (!direction) {
          return snap(value);
        }

        if (direction > 0) {
          value -= threshold; // to avoid rounding errors. If we're too strict, it might snap forward, then immediately again, and again.

          for (i = 0; i < a.length; i++) {
            if (a[i] >= value) {
              return a[i];
            }
          }

          return a[i - 1];
        } else {
          i = a.length;
          value += threshold;

          while (i--) {
            if (a[i] <= value) {
              return a[i];
            }
          }
        }

        return a[0];
      } : function (value, direction, threshold) {
        if (threshold === void 0) {
          threshold = 1e-3;
        }

        var snapped = snap(value);
        return !direction || Math.abs(snapped - value) < threshold || snapped - value < 0 === direction < 0 ? snapped : snap(direction < 0 ? value - snapIncrementOrArray : value + snapIncrementOrArray);
      };
    },
        _getLabelAtDirection = function _getLabelAtDirection(timeline) {
      return function (value, st) {
        return _snapDirectional(_getLabelRatioArray(timeline))(value, st.direction);
      };
    },
        _multiListener = function _multiListener(func, element, types, callback) {
      return types.split(",").forEach(function (type) {
        return func(element, type, callback);
      });
    },
        _addListener = function _addListener(element, type, func, nonPassive, capture) {
      return element.addEventListener(type, func, {
        passive: !nonPassive,
        capture: !!capture
      });
    },
        _removeListener = function _removeListener(element, type, func, capture) {
      return element.removeEventListener(type, func, !!capture);
    },
        _wheelListener = function _wheelListener(func, el, scrollFunc) {
      scrollFunc = scrollFunc && scrollFunc.wheelHandler;

      if (scrollFunc) {
        func(el, "wheel", scrollFunc);
        func(el, "touchmove", scrollFunc);
      }
    },
        _markerDefaults = {
      startColor: "green",
      endColor: "red",
      indent: 0,
      fontSize: "16px",
      fontWeight: "normal"
    },
        _defaults = {
      toggleActions: "play",
      anticipatePin: 0
    },
        _keywords = {
      top: 0,
      left: 0,
      center: 0.5,
      bottom: 1,
      right: 1
    },
        _offsetToPx = function _offsetToPx(value, size) {
      if (_isString(value)) {
        var eqIndex = value.indexOf("="),
            relative = ~eqIndex ? +(value.charAt(eqIndex - 1) + 1) * parseFloat(value.substr(eqIndex + 1)) : 0;

        if (~eqIndex) {
          value.indexOf("%") > eqIndex && (relative *= size / 100);
          value = value.substr(0, eqIndex - 1);
        }

        value = relative + (value in _keywords ? _keywords[value] * size : ~value.indexOf("%") ? parseFloat(value) * size / 100 : parseFloat(value) || 0);
      }

      return value;
    },
        _createMarker = function _createMarker(type, name, container, direction, _ref4, offset, matchWidthEl, containerAnimation) {
      var startColor = _ref4.startColor,
          endColor = _ref4.endColor,
          fontSize = _ref4.fontSize,
          indent = _ref4.indent,
          fontWeight = _ref4.fontWeight;

      var e = _doc.createElement("div"),
          useFixedPosition = _isViewport(container) || _getProxyProp(container, "pinType") === "fixed",
          isScroller = type.indexOf("scroller") !== -1,
          parent = useFixedPosition ? _body : container,
          isStart = type.indexOf("start") !== -1,
          color = isStart ? startColor : endColor,
          css = "border-color:" + color + ";font-size:" + fontSize + ";color:" + color + ";font-weight:" + fontWeight + ";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";

      css += "position:" + ((isScroller || containerAnimation) && useFixedPosition ? "fixed;" : "absolute;");
      (isScroller || containerAnimation || !useFixedPosition) && (css += (direction === _vertical ? _right : _bottom) + ":" + (offset + parseFloat(indent)) + "px;");
      matchWidthEl && (css += "box-sizing:border-box;text-align:left;width:" + matchWidthEl.offsetWidth + "px;");
      e._isStart = isStart;
      e.setAttribute("class", "gsap-marker-" + type + (name ? " marker-" + name : ""));
      e.style.cssText = css;
      e.innerText = name || name === 0 ? type + "-" + name : type;
      parent.children[0] ? parent.insertBefore(e, parent.children[0]) : parent.appendChild(e);
      e._offset = e["offset" + direction.op.d2];

      _positionMarker(e, 0, direction, isStart);

      return e;
    },
        _positionMarker = function _positionMarker(marker, start, direction, flipped) {
      var vars = {
        display: "block"
      },
          side = direction[flipped ? "os2" : "p2"],
          oppositeSide = direction[flipped ? "p2" : "os2"];
      marker._isFlipped = flipped;
      vars[direction.a + "Percent"] = flipped ? -100 : 0;
      vars[direction.a] = flipped ? "1px" : 0;
      vars["border" + side + _Width] = 1;
      vars["border" + oppositeSide + _Width] = 0;
      vars[direction.p] = start + "px";
      gsap.set(marker, vars);
    },
        _triggers = [],
        _ids = {},
        _rafID,
        _sync = function _sync() {
      return _getTime() - _lastScrollTime > 34 && (_rafID || (_rafID = requestAnimationFrame(_updateAll)));
    },
        _onScroll = function _onScroll() {
      // previously, we tried to optimize performance by batching/deferring to the next requestAnimationFrame(), but discovered that Safari has a few bugs that make this unworkable (especially on iOS). See https://codepen.io/GreenSock/pen/16c435b12ef09c38125204818e7b45fc?editors=0010 and https://codepen.io/GreenSock/pen/JjOxYpQ/3dd65ccec5a60f1d862c355d84d14562?editors=0010 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503?editors=0010
      if (!_normalizer || !_normalizer.isPressed || _normalizer.startX > _body.clientWidth) {
        // if the user is dragging the scrollbar, allow it.
        _scrollers.cache++;

        if (_normalizer) {
          _rafID || (_rafID = requestAnimationFrame(_updateAll));
        } else {
          _updateAll(); // Safari in particular (on desktop) NEEDS the immediate update rather than waiting for a requestAnimationFrame() whereas iOS seems to benefit from waiting for the requestAnimationFrame() tick, at least when normalizing. See https://codepen.io/GreenSock/pen/qBYozqO?editors=0110

        }

        _lastScrollTime || _dispatch("scrollStart");
        _lastScrollTime = _getTime();
      }
    },
        _setBaseDimensions = function _setBaseDimensions() {
      _baseScreenWidth = _win.innerWidth;
      _baseScreenHeight = _win.innerHeight;
    },
        _onResize = function _onResize(force) {
      _scrollers.cache++;
      (force === true || !_refreshing && !_ignoreResize && !_doc.fullscreenElement && !_doc.webkitFullscreenElement && (!_ignoreMobileResize || _baseScreenWidth !== _win.innerWidth || Math.abs(_win.innerHeight - _baseScreenHeight) > _win.innerHeight * 0.25)) && _resizeDelay.restart(true);
    },
        // ignore resizes triggered by refresh()
    _listeners = {},
        _emptyArray = [],
        _softRefresh = function _softRefresh() {
      return _removeListener(ScrollTrigger, "scrollEnd", _softRefresh) || _refreshAll(true);
    },
        _dispatch = function _dispatch(type) {
      return _listeners[type] && _listeners[type].map(function (f) {
        return f();
      }) || _emptyArray;
    },
        _savedStyles = [],
        // when ScrollTrigger.saveStyles() is called, the inline styles are recorded in this Array in a sequential format like [element, cssText, gsCache, media]. This keeps it very memory-efficient and fast to iterate through.
    _revertRecorded = function _revertRecorded(media) {
      for (var i = 0; i < _savedStyles.length; i += 5) {
        if (!media || _savedStyles[i + 4] && _savedStyles[i + 4].query === media) {
          _savedStyles[i].style.cssText = _savedStyles[i + 1];
          _savedStyles[i].getBBox && _savedStyles[i].setAttribute("transform", _savedStyles[i + 2] || "");
          _savedStyles[i + 3].uncache = 1;
        }
      }
    },
        _revertAll = function _revertAll(kill, media) {
      var trigger;

      for (_i = 0; _i < _triggers.length; _i++) {
        trigger = _triggers[_i];

        if (trigger && (!media || trigger._ctx === media)) {
          if (kill) {
            trigger.kill(1);
          } else {
            trigger.revert(true, true);
          }
        }
      }

      _isReverted = true;
      media && _revertRecorded(media);
      media || _dispatch("revert");
    },
        _clearScrollMemory = function _clearScrollMemory(scrollRestoration, force) {
      // zero-out all the recorded scroll positions. Don't use _triggers because if, for example, .matchMedia() is used to create some ScrollTriggers and then the user resizes and it removes ALL ScrollTriggers, and then go back to a size where there are ScrollTriggers, it would have kept the position(s) saved from the initial state.
      _scrollers.cache++;
      (force || !_refreshingAll) && _scrollers.forEach(function (obj) {
        return _isFunction(obj) && obj.cacheID++ && (obj.rec = 0);
      });
      _isString(scrollRestoration) && (_win.history.scrollRestoration = _scrollRestoration = scrollRestoration);
    },
        _refreshingAll,
        _refreshID = 0,
        _queueRefreshID,
        _queueRefreshAll = function _queueRefreshAll() {
      // we don't want to call _refreshAll() every time we create a new ScrollTrigger (for performance reasons) - it's better to batch them. Some frameworks dynamically load content and we can't rely on the window's "load" or "DOMContentLoaded" events to trigger it.
      if (_queueRefreshID !== _refreshID) {
        var id = _queueRefreshID = _refreshID;
        requestAnimationFrame(function () {
          return id === _refreshID && _refreshAll(true);
        });
      }
    },
        _refresh100vh = function _refresh100vh() {
      _body.appendChild(_div100vh);

      _100vh = !_normalizer && _div100vh.offsetHeight || _win.innerHeight;

      _body.removeChild(_div100vh);
    },
        _hideAllMarkers = function _hideAllMarkers(hide) {
      return _toArray(".gsap-marker-start, .gsap-marker-end, .gsap-marker-scroller-start, .gsap-marker-scroller-end").forEach(function (el) {
        return el.style.display = hide ? "none" : "block";
      });
    },
        _refreshAll = function _refreshAll(force, skipRevert) {
      _docEl = _doc.documentElement; // some frameworks like Astro may cache the <body> and replace it during routing, so we'll just re-record the _docEl and _body for safety (otherwise, the markers may not get added properly).

      _body = _doc.body;
      _root = [_win, _doc, _docEl, _body];

      if (_lastScrollTime && !force && !_isReverted) {
        _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

        return;
      }

      _refresh100vh();

      _refreshingAll = ScrollTrigger.isRefreshing = true;

      _scrollers.forEach(function (obj) {
        return _isFunction(obj) && ++obj.cacheID && (obj.rec = obj());
      }); // force the clearing of the cache because some browsers take a little while to dispatch the "scroll" event and the user may have changed the scroll position and then called ScrollTrigger.refresh() right away


      var refreshInits = _dispatch("refreshInit");

      _sort && ScrollTrigger.sort();
      skipRevert || _revertAll();

      _scrollers.forEach(function (obj) {
        if (_isFunction(obj)) {
          obj.smooth && (obj.target.style.scrollBehavior = "auto"); // smooth scrolling interferes

          obj(0);
        }
      });

      _triggers.slice(0).forEach(function (t) {
        return t.refresh();
      }); // don't loop with _i because during a refresh() someone could call ScrollTrigger.update() which would iterate through _i resulting in a skip.


      _isReverted = false;

      _triggers.forEach(function (t) {
        // nested pins (pinnedContainer) with pinSpacing may expand the container, so we must accommodate that here.
        if (t._subPinOffset && t.pin) {
          var prop = t.vars.horizontal ? "offsetWidth" : "offsetHeight",
              original = t.pin[prop];
          t.revert(true, 1);
          t.adjustPinSpacing(t.pin[prop] - original);
          t.refresh();
        }
      });

      _clampingMax = 1; // pinSpacing might be propping a page open, thus when we .setPositions() to clamp a ScrollTrigger's end we should leave the pinSpacing alone. That's what this flag is for.

      _hideAllMarkers(true);

      _triggers.forEach(function (t) {
        // the scroller's max scroll position may change after all the ScrollTriggers refreshed (like pinning could push it down), so we need to loop back and correct any with end: "max". Same for anything with a clamped end
        var max = _maxScroll(t.scroller, t._dir),
            endClamp = t.vars.end === "max" || t._endClamp && t.end > max,
            startClamp = t._startClamp && t.start >= max;

        (endClamp || startClamp) && t.setPositions(startClamp ? max - 1 : t.start, endClamp ? Math.max(startClamp ? max : t.start + 1, max) : t.end, true);
      });

      _hideAllMarkers(false);

      _clampingMax = 0;
      refreshInits.forEach(function (result) {
        return result && result.render && result.render(-1);
      }); // if the onRefreshInit() returns an animation (typically a gsap.set()), revert it. This makes it easy to put things in a certain spot before refreshing for measurement purposes, and then put things back.

      _scrollers.forEach(function (obj) {
        if (_isFunction(obj)) {
          obj.smooth && requestAnimationFrame(function () {
            return obj.target.style.scrollBehavior = "smooth";
          });
          obj.rec && obj(obj.rec);
        }
      });

      _clearScrollMemory(_scrollRestoration, 1);

      _resizeDelay.pause();

      _refreshID++;
      _refreshingAll = 2;

      _updateAll(2);

      _triggers.forEach(function (t) {
        return _isFunction(t.vars.onRefresh) && t.vars.onRefresh(t);
      });

      _refreshingAll = ScrollTrigger.isRefreshing = false;

      _dispatch("refresh");
    },
        _lastScroll = 0,
        _direction = 1,
        _primary,
        _updateAll = function _updateAll(force) {
      if (force === 2 || !_refreshingAll && !_isReverted) {
        // _isReverted could be true if, for example, a matchMedia() is in the process of executing. We don't want to update during the time everything is reverted.
        ScrollTrigger.isUpdating = true;
        _primary && _primary.update(0); // ScrollSmoother uses refreshPriority -9999 to become the primary that gets updated before all others because it affects the scroll position.

        var l = _triggers.length,
            time = _getTime(),
            recordVelocity = time - _time1 >= 50,
            scroll = l && _triggers[0].scroll();

        _direction = _lastScroll > scroll ? -1 : 1;
        _refreshingAll || (_lastScroll = scroll);

        if (recordVelocity) {
          if (_lastScrollTime && !_pointerIsDown && time - _lastScrollTime > 200) {
            _lastScrollTime = 0;

            _dispatch("scrollEnd");
          }

          _time2 = _time1;
          _time1 = time;
        }

        if (_direction < 0) {
          _i = l;

          while (_i-- > 0) {
            _triggers[_i] && _triggers[_i].update(0, recordVelocity);
          }

          _direction = 1;
        } else {
          for (_i = 0; _i < l; _i++) {
            _triggers[_i] && _triggers[_i].update(0, recordVelocity);
          }
        }

        ScrollTrigger.isUpdating = false;
      }

      _rafID = 0;
    },
        _propNamesToCopy = [_left, _top, _bottom, _right, _margin + _Bottom, _margin + _Right, _margin + _Top, _margin + _Left, "display", "flexShrink", "float", "zIndex", "gridColumnStart", "gridColumnEnd", "gridRowStart", "gridRowEnd", "gridArea", "justifySelf", "alignSelf", "placeSelf", "order"],
        _stateProps = _propNamesToCopy.concat([_width, _height, "boxSizing", "max" + _Width, "max" + _Height, "position", _margin, _padding, _padding + _Top, _padding + _Right, _padding + _Bottom, _padding + _Left]),
        _swapPinOut = function _swapPinOut(pin, spacer, state) {
      _setState(state);

      var cache = pin._gsap;

      if (cache.spacerIsNative) {
        _setState(cache.spacerState);
      } else if (pin._gsap.swappedIn) {
        var parent = spacer.parentNode;

        if (parent) {
          parent.insertBefore(pin, spacer);
          parent.removeChild(spacer);
        }
      }

      pin._gsap.swappedIn = false;
    },
        _swapPinIn = function _swapPinIn(pin, spacer, cs, spacerState) {
      if (!pin._gsap.swappedIn) {
        var i = _propNamesToCopy.length,
            spacerStyle = spacer.style,
            pinStyle = pin.style,
            p;

        while (i--) {
          p = _propNamesToCopy[i];
          spacerStyle[p] = cs[p];
        }

        spacerStyle.position = cs.position === "absolute" ? "absolute" : "relative";
        cs.display === "inline" && (spacerStyle.display = "inline-block");
        pinStyle[_bottom] = pinStyle[_right] = "auto";
        spacerStyle.flexBasis = cs.flexBasis || "auto";
        spacerStyle.overflow = "visible";
        spacerStyle.boxSizing = "border-box";
        spacerStyle[_width] = _getSize(pin, _horizontal) + _px;
        spacerStyle[_height] = _getSize(pin, _vertical) + _px;
        spacerStyle[_padding] = pinStyle[_margin] = pinStyle[_top] = pinStyle[_left] = "0";

        _setState(spacerState);

        pinStyle[_width] = pinStyle["max" + _Width] = cs[_width];
        pinStyle[_height] = pinStyle["max" + _Height] = cs[_height];
        pinStyle[_padding] = cs[_padding];

        if (pin.parentNode !== spacer) {
          pin.parentNode.insertBefore(spacer, pin);
          spacer.appendChild(pin);
        }

        pin._gsap.swappedIn = true;
      }
    },
        _capsExp = /([A-Z])/g,
        _setState = function _setState(state) {
      if (state) {
        var style = state.t.style,
            l = state.length,
            i = 0,
            p,
            value;
        (state.t._gsap || gsap.core.getCache(state.t)).uncache = 1; // otherwise transforms may be off

        for (; i < l; i += 2) {
          value = state[i + 1];
          p = state[i];

          if (value) {
            style[p] = value;
          } else if (style[p]) {
            style.removeProperty(p.replace(_capsExp, "-$1").toLowerCase());
          }
        }
      }
    },
        _getState = function _getState(element) {
      // returns an Array with alternating values like [property, value, property, value] and a "t" property pointing to the target (element). Makes it fast and cheap.
      var l = _stateProps.length,
          style = element.style,
          state = [],
          i = 0;

      for (; i < l; i++) {
        state.push(_stateProps[i], style[_stateProps[i]]);
      }

      state.t = element;
      return state;
    },
        _copyState = function _copyState(state, override, omitOffsets) {
      var result = [],
          l = state.length,
          i = omitOffsets ? 8 : 0,
          // skip top, left, right, bottom if omitOffsets is true
      p;

      for (; i < l; i += 2) {
        p = state[i];
        result.push(p, p in override ? override[p] : state[i + 1]);
      }

      result.t = state.t;
      return result;
    },
        _winOffsets = {
      left: 0,
      top: 0
    },
        // // potential future feature (?) Allow users to calculate where a trigger hits (scroll position) like getScrollPosition("#id", "top bottom")
    // _getScrollPosition = (trigger, position, {scroller, containerAnimation, horizontal}) => {
    // 	scroller = _getTarget(scroller || _win);
    // 	let direction = horizontal ? _horizontal : _vertical,
    // 		isViewport = _isViewport(scroller);
    // 	_getSizeFunc(scroller, isViewport, direction);
    // 	return _parsePosition(position, _getTarget(trigger), _getSizeFunc(scroller, isViewport, direction)(), direction, _getScrollFunc(scroller, direction)(), 0, 0, 0, _getOffsetsFunc(scroller, isViewport)(), isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0, 0, containerAnimation ? containerAnimation.duration() : _maxScroll(scroller), containerAnimation);
    // },
    _parsePosition = function _parsePosition(value, trigger, scrollerSize, direction, scroll, marker, markerScroller, self, scrollerBounds, borderWidth, useFixedPosition, scrollerMax, containerAnimation, clampZeroProp) {
      _isFunction(value) && (value = value(self));

      if (_isString(value) && value.substr(0, 3) === "max") {
        value = scrollerMax + (value.charAt(4) === "=" ? _offsetToPx("0" + value.substr(3), scrollerSize) : 0);
      }

      var time = containerAnimation ? containerAnimation.time() : 0,
          p1,
          p2,
          element;
      containerAnimation && containerAnimation.seek(0);
      isNaN(value) || (value = +value); // convert a string number like "45" to an actual number

      if (!_isNumber(value)) {
        _isFunction(trigger) && (trigger = trigger(self));
        var offsets = (value || "0").split(" "),
            bounds,
            localOffset,
            globalOffset,
            display;
        element = _getTarget(trigger, self) || _body;
        bounds = _getBounds(element) || {};

        if ((!bounds || !bounds.left && !bounds.top) && _getComputedStyle(element).display === "none") {
          // if display is "none", it won't report getBoundingClientRect() properly
          display = element.style.display;
          element.style.display = "block";
          bounds = _getBounds(element);
          display ? element.style.display = display : element.style.removeProperty("display");
        }

        localOffset = _offsetToPx(offsets[0], bounds[direction.d]);
        globalOffset = _offsetToPx(offsets[1] || "0", scrollerSize);
        value = bounds[direction.p] - scrollerBounds[direction.p] - borderWidth + localOffset + scroll - globalOffset;
        markerScroller && _positionMarker(markerScroller, globalOffset, direction, scrollerSize - globalOffset < 20 || markerScroller._isStart && globalOffset > 20);
        scrollerSize -= scrollerSize - globalOffset; // adjust for the marker
      } else {
        containerAnimation && (value = gsap.utils.mapRange(containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, 0, scrollerMax, value));
        markerScroller && _positionMarker(markerScroller, scrollerSize, direction, true);
      }

      if (clampZeroProp) {
        self[clampZeroProp] = value || -0.001;
        value < 0 && (value = 0);
      }

      if (marker) {
        var position = value + scrollerSize,
            isStart = marker._isStart;
        p1 = "scroll" + direction.d2;

        _positionMarker(marker, position, direction, isStart && position > 20 || !isStart && (useFixedPosition ? Math.max(_body[p1], _docEl[p1]) : marker.parentNode[p1]) <= position + 1);

        if (useFixedPosition) {
          scrollerBounds = _getBounds(markerScroller);
          useFixedPosition && (marker.style[direction.op.p] = scrollerBounds[direction.op.p] - direction.op.m - marker._offset + _px);
        }
      }

      if (containerAnimation && element) {
        p1 = _getBounds(element);
        containerAnimation.seek(scrollerMax);
        p2 = _getBounds(element);
        containerAnimation._caScrollDist = p1[direction.p] - p2[direction.p];
        value = value / containerAnimation._caScrollDist * scrollerMax;
      }

      containerAnimation && containerAnimation.seek(time);
      return containerAnimation ? value : Math.round(value);
    },
        _prefixExp = /(webkit|moz|length|cssText|inset)/i,
        _reparent = function _reparent(element, parent, top, left) {
      if (element.parentNode !== parent) {
        var style = element.style,
            p,
            cs;

        if (parent === _body) {
          element._stOrig = style.cssText; // record original inline styles so we can revert them later

          cs = _getComputedStyle(element);

          for (p in cs) {
            // must copy all relevant styles to ensure that nothing changes visually when we reparent to the <body>. Skip the vendor prefixed ones.
            if (!+p && !_prefixExp.test(p) && cs[p] && typeof style[p] === "string" && p !== "0") {
              style[p] = cs[p];
            }
          }

          style.top = top;
          style.left = left;
        } else {
          style.cssText = element._stOrig;
        }

        gsap.core.getCache(element).uncache = 1;
        parent.appendChild(element);
      }
    },
        _interruptionTracker = function _interruptionTracker(getValueFunc, initialValue, onInterrupt) {
      var last1 = initialValue,
          last2 = last1;
      return function (value) {
        var current = Math.round(getValueFunc()); // round because in some [very uncommon] Windows environments, scroll can get reported with decimals even though it was set without.

        if (current !== last1 && current !== last2 && Math.abs(current - last1) > 3 && Math.abs(current - last2) > 3) {
          // if the user scrolls, kill the tween. iOS Safari intermittently misreports the scroll position, it may be the most recently-set one or the one before that! When Safari is zoomed (CMD-+), it often misreports as 1 pixel off too! So if we set the scroll position to 125, for example, it'll actually report it as 124.
          value = current;
          onInterrupt && onInterrupt();
        }

        last2 = last1;
        last1 = Math.round(value);
        return last1;
      };
    },
        _shiftMarker = function _shiftMarker(marker, direction, value) {
      var vars = {};
      vars[direction.p] = "+=" + value;
      gsap.set(marker, vars);
    },
        // _mergeAnimations = animations => {
    // 	let tl = gsap.timeline({smoothChildTiming: true}).startTime(Math.min(...animations.map(a => a.globalTime(0))));
    // 	animations.forEach(a => {let time = a.totalTime(); tl.add(a); a.totalTime(time); });
    // 	tl.smoothChildTiming = false;
    // 	return tl;
    // },
    // returns a function that can be used to tween the scroll position in the direction provided, and when doing so it'll add a .tween property to the FUNCTION itself, and remove it when the tween completes or gets killed. This gives us a way to have multiple ScrollTriggers use a central function for any given scroller and see if there's a scroll tween running (which would affect if/how things get updated)
    _getTweenCreator = function _getTweenCreator(scroller, direction) {
      var getScroll = _getScrollFunc(scroller, direction),
          prop = "_scroll" + direction.p2,
          // add a tweenable property to the scroller that's a getter/setter function, like _scrollTop or _scrollLeft. This way, if someone does gsap.killTweensOf(scroller) it'll kill the scroll tween.
      getTween = function getTween(scrollTo, vars, initialValue, change1, change2) {
        var tween = getTween.tween,
            onComplete = vars.onComplete,
            modifiers = {};
        initialValue = initialValue || getScroll();

        var checkForInterruption = _interruptionTracker(getScroll, initialValue, function () {
          tween.kill();
          getTween.tween = 0;
        });

        change2 = change1 && change2 || 0; // if change1 is 0, we set that to the difference and ignore change2. Otherwise, there would be a compound effect.

        change1 = change1 || scrollTo - initialValue;
        tween && tween.kill();
        vars[prop] = scrollTo;
        vars.inherit = false;
        vars.modifiers = modifiers;

        modifiers[prop] = function () {
          return checkForInterruption(initialValue + change1 * tween.ratio + change2 * tween.ratio * tween.ratio);
        };

        vars.onUpdate = function () {
          _scrollers.cache++;
          getTween.tween && _updateAll(); // if it was interrupted/killed, like in a context.revert(), don't force an updateAll()
        };

        vars.onComplete = function () {
          getTween.tween = 0;
          onComplete && onComplete.call(tween);
        };

        tween = getTween.tween = gsap.to(scroller, vars);
        return tween;
      };

      scroller[prop] = getScroll;

      getScroll.wheelHandler = function () {
        return getTween.tween && getTween.tween.kill() && (getTween.tween = 0);
      };

      _addListener(scroller, "wheel", getScroll.wheelHandler); // Windows machines handle mousewheel scrolling in chunks (like "3 lines per scroll") meaning the typical strategy for cancelling the scroll isn't as sensitive. It's much more likely to match one of the previous 2 scroll event positions. So we kill any snapping as soon as there's a wheel event.


      ScrollTrigger.isTouch && _addListener(scroller, "touchmove", getScroll.wheelHandler);
      return getTween;
    };

    var ScrollTrigger = /*#__PURE__*/function () {
      function ScrollTrigger(vars, animation) {
        _coreInitted || ScrollTrigger.register(gsap) || console.warn("Please gsap.registerPlugin(ScrollTrigger)");

        _context(this);

        this.init(vars, animation);
      }

      var _proto = ScrollTrigger.prototype;

      _proto.init = function init(vars, animation) {
        this.progress = this.start = 0;
        this.vars && this.kill(true, true); // in case it's being initted again

        if (!_enabled) {
          this.update = this.refresh = this.kill = _passThrough;
          return;
        }

        vars = _setDefaults(_isString(vars) || _isNumber(vars) || vars.nodeType ? {
          trigger: vars
        } : vars, _defaults);

        var _vars = vars,
            onUpdate = _vars.onUpdate,
            toggleClass = _vars.toggleClass,
            id = _vars.id,
            onToggle = _vars.onToggle,
            onRefresh = _vars.onRefresh,
            scrub = _vars.scrub,
            trigger = _vars.trigger,
            pin = _vars.pin,
            pinSpacing = _vars.pinSpacing,
            invalidateOnRefresh = _vars.invalidateOnRefresh,
            anticipatePin = _vars.anticipatePin,
            onScrubComplete = _vars.onScrubComplete,
            onSnapComplete = _vars.onSnapComplete,
            once = _vars.once,
            snap = _vars.snap,
            pinReparent = _vars.pinReparent,
            pinSpacer = _vars.pinSpacer,
            containerAnimation = _vars.containerAnimation,
            fastScrollEnd = _vars.fastScrollEnd,
            preventOverlaps = _vars.preventOverlaps,
            direction = vars.horizontal || vars.containerAnimation && vars.horizontal !== false ? _horizontal : _vertical,
            isToggle = !scrub && scrub !== 0,
            scroller = _getTarget(vars.scroller || _win),
            scrollerCache = gsap.core.getCache(scroller),
            isViewport = _isViewport(scroller),
            useFixedPosition = ("pinType" in vars ? vars.pinType : _getProxyProp(scroller, "pinType") || isViewport && "fixed") === "fixed",
            callbacks = [vars.onEnter, vars.onLeave, vars.onEnterBack, vars.onLeaveBack],
            toggleActions = isToggle && vars.toggleActions.split(" "),
            markers = "markers" in vars ? vars.markers : _defaults.markers,
            borderWidth = isViewport ? 0 : parseFloat(_getComputedStyle(scroller)["border" + direction.p2 + _Width]) || 0,
            self = this,
            onRefreshInit = vars.onRefreshInit && function () {
          return vars.onRefreshInit(self);
        },
            getScrollerSize = _getSizeFunc(scroller, isViewport, direction),
            getScrollerOffsets = _getOffsetsFunc(scroller, isViewport),
            lastSnap = 0,
            lastRefresh = 0,
            prevProgress = 0,
            scrollFunc = _getScrollFunc(scroller, direction),
            tweenTo,
            pinCache,
            snapFunc,
            scroll1,
            scroll2,
            start,
            end,
            markerStart,
            markerEnd,
            markerStartTrigger,
            markerEndTrigger,
            markerVars,
            executingOnRefresh,
            change,
            pinOriginalState,
            pinActiveState,
            pinState,
            spacer,
            offset,
            pinGetter,
            pinSetter,
            pinStart,
            pinChange,
            spacingStart,
            spacerState,
            markerStartSetter,
            pinMoves,
            markerEndSetter,
            cs,
            snap1,
            snap2,
            scrubTween,
            scrubSmooth,
            snapDurClamp,
            snapDelayedCall,
            prevScroll,
            prevAnimProgress,
            caMarkerSetter,
            customRevertReturn; // for the sake of efficiency, _startClamp/_endClamp serve like a truthy value indicating that clamping was enabled on the start/end, and ALSO store the actual pre-clamped numeric value. We tap into that in ScrollSmoother for speed effects. So for example, if start="clamp(top bottom)" results in a start of -100 naturally, it would get clamped to 0 but -100 would be stored in _startClamp.


        self._startClamp = self._endClamp = false;
        self._dir = direction;
        anticipatePin *= 45;
        self.scroller = scroller;
        self.scroll = containerAnimation ? containerAnimation.time.bind(containerAnimation) : scrollFunc;
        scroll1 = scrollFunc();
        self.vars = vars;
        animation = animation || vars.animation;

        if ("refreshPriority" in vars) {
          _sort = 1;
          vars.refreshPriority === -9999 && (_primary = self); // used by ScrollSmoother
        }

        scrollerCache.tweenScroll = scrollerCache.tweenScroll || {
          top: _getTweenCreator(scroller, _vertical),
          left: _getTweenCreator(scroller, _horizontal)
        };
        self.tweenTo = tweenTo = scrollerCache.tweenScroll[direction.p];

        self.scrubDuration = function (value) {
          scrubSmooth = _isNumber(value) && value;

          if (!scrubSmooth) {
            scrubTween && scrubTween.progress(1).kill();
            scrubTween = 0;
          } else {
            scrubTween ? scrubTween.duration(value) : scrubTween = gsap.to(animation, {
              ease: "expo",
              totalProgress: "+=0",
              inherit: false,
              duration: scrubSmooth,
              paused: true,
              onComplete: function onComplete() {
                return onScrubComplete && onScrubComplete(self);
              }
            });
          }
        };

        if (animation) {
          animation.vars.lazy = false;
          animation._initted && !self.isReverted || animation.vars.immediateRender !== false && vars.immediateRender !== false && animation.duration() && animation.render(0, true, true); // special case: if this ScrollTrigger gets re-initted, a from() tween with a stagger could get initted initially and then reverted on the re-init which means it'll need to get rendered again here to properly display things. Otherwise, See https://gsap.com/forums/topic/36777-scrollsmoother-splittext-nextjs/ and https://codepen.io/GreenSock/pen/eYPyPpd?editors=0010

          self.animation = animation.pause();
          animation.scrollTrigger = self;
          self.scrubDuration(scrub);
          snap1 = 0;
          id || (id = animation.vars.id);
        }

        if (snap) {
          // TODO: potential idea: use legitimate CSS scroll snapping by pushing invisible elements into the DOM that serve as snap positions, and toggle the document.scrollingElement.style.scrollSnapType onToggle. See https://codepen.io/GreenSock/pen/JjLrgWM for a quick proof of concept.
          if (!_isObject(snap) || snap.push) {
            snap = {
              snapTo: snap
            };
          }

          "scrollBehavior" in _body.style && gsap.set(isViewport ? [_body, _docEl] : scroller, {
            scrollBehavior: "auto"
          }); // smooth scrolling doesn't work with snap.

          _scrollers.forEach(function (o) {
            return _isFunction(o) && o.target === (isViewport ? _doc.scrollingElement || _docEl : scroller) && (o.smooth = false);
          }); // note: set smooth to false on both the vertical and horizontal scroll getters/setters


          snapFunc = _isFunction(snap.snapTo) ? snap.snapTo : snap.snapTo === "labels" ? _getClosestLabel(animation) : snap.snapTo === "labelsDirectional" ? _getLabelAtDirection(animation) : snap.directional !== false ? function (value, st) {
            return _snapDirectional(snap.snapTo)(value, _getTime() - lastRefresh < 500 ? 0 : st.direction);
          } : gsap.utils.snap(snap.snapTo);
          snapDurClamp = snap.duration || {
            min: 0.1,
            max: 2
          };
          snapDurClamp = _isObject(snapDurClamp) ? _clamp(snapDurClamp.min, snapDurClamp.max) : _clamp(snapDurClamp, snapDurClamp);
          snapDelayedCall = gsap.delayedCall(snap.delay || scrubSmooth / 2 || 0.1, function () {
            var scroll = scrollFunc(),
                refreshedRecently = _getTime() - lastRefresh < 500,
                tween = tweenTo.tween;

            if ((refreshedRecently || Math.abs(self.getVelocity()) < 10) && !tween && !_pointerIsDown && lastSnap !== scroll) {
              var progress = (scroll - start) / change,
                  totalProgress = animation && !isToggle ? animation.totalProgress() : progress,
                  velocity = refreshedRecently ? 0 : (totalProgress - snap2) / (_getTime() - _time2) * 1000 || 0,
                  change1 = gsap.utils.clamp(-progress, 1 - progress, _abs(velocity / 2) * velocity / 0.185),
                  naturalEnd = progress + (snap.inertia === false ? 0 : change1),
                  endValue,
                  endScroll,
                  _snap = snap,
                  onStart = _snap.onStart,
                  _onInterrupt = _snap.onInterrupt,
                  _onComplete = _snap.onComplete;
              endValue = snapFunc(naturalEnd, self);
              _isNumber(endValue) || (endValue = naturalEnd); // in case the function didn't return a number, fall back to using the naturalEnd

              endScroll = Math.max(0, Math.round(start + endValue * change));

              if (scroll <= end && scroll >= start && endScroll !== scroll) {
                if (tween && !tween._initted && tween.data <= _abs(endScroll - scroll)) {
                  // there's an overlapping snap! So we must figure out which one is closer and let that tween live.
                  return;
                }

                if (snap.inertia === false) {
                  change1 = endValue - progress;
                }

                tweenTo(endScroll, {
                  duration: snapDurClamp(_abs(Math.max(_abs(naturalEnd - totalProgress), _abs(endValue - totalProgress)) * 0.185 / velocity / 0.05 || 0)),
                  ease: snap.ease || "power3",
                  data: _abs(endScroll - scroll),
                  // record the distance so that if another snap tween occurs (conflict) we can prioritize the closest snap.
                  onInterrupt: function onInterrupt() {
                    return snapDelayedCall.restart(true) && _onInterrupt && _onInterrupt(self);
                  },
                  onComplete: function onComplete() {
                    self.update();
                    lastSnap = scrollFunc();

                    if (animation && !isToggle) {
                      // the resolution of the scrollbar is limited, so we should correct the scrubbed animation's playhead at the end to match EXACTLY where it was supposed to snap
                      scrubTween ? scrubTween.resetTo("totalProgress", endValue, animation._tTime / animation._tDur) : animation.progress(endValue);
                    }

                    snap1 = snap2 = animation && !isToggle ? animation.totalProgress() : self.progress;
                    onSnapComplete && onSnapComplete(self);
                    _onComplete && _onComplete(self);
                  }
                }, scroll, change1 * change, endScroll - scroll - change1 * change);
                onStart && onStart(self, tweenTo.tween);
              }
            } else if (self.isActive && lastSnap !== scroll) {
              snapDelayedCall.restart(true);
            }
          }).pause();
        }

        id && (_ids[id] = self);
        trigger = self.trigger = _getTarget(trigger || pin !== true && pin); // if a trigger has some kind of scroll-related effect applied that could contaminate the "y" or "x" position (like a ScrollSmoother effect), we needed a way to temporarily revert it, so we use the stRevert property of the gsCache. It can return another function that we'll call at the end so it can return to its normal state.

        customRevertReturn = trigger && trigger._gsap && trigger._gsap.stRevert;
        customRevertReturn && (customRevertReturn = customRevertReturn(self));
        pin = pin === true ? trigger : _getTarget(pin);
        _isString(toggleClass) && (toggleClass = {
          targets: trigger,
          className: toggleClass
        });

        if (pin) {
          pinSpacing === false || pinSpacing === _margin || (pinSpacing = !pinSpacing && pin.parentNode && pin.parentNode.style && _getComputedStyle(pin.parentNode).display === "flex" ? false : _padding); // if the parent is display: flex, don't apply pinSpacing by default. We should check that pin.parentNode is an element (not shadow dom window)

          self.pin = pin;
          pinCache = gsap.core.getCache(pin);

          if (!pinCache.spacer) {
            // record the spacer and pinOriginalState on the cache in case someone tries pinning the same element with MULTIPLE ScrollTriggers - we don't want to have multiple spacers or record the "original" pin state after it has already been affected by another ScrollTrigger.
            if (pinSpacer) {
              pinSpacer = _getTarget(pinSpacer);
              pinSpacer && !pinSpacer.nodeType && (pinSpacer = pinSpacer.current || pinSpacer.nativeElement); // for React & Angular

              pinCache.spacerIsNative = !!pinSpacer;
              pinSpacer && (pinCache.spacerState = _getState(pinSpacer));
            }

            pinCache.spacer = spacer = pinSpacer || _doc.createElement("div");
            spacer.classList.add("pin-spacer");
            id && spacer.classList.add("pin-spacer-" + id);
            pinCache.pinState = pinOriginalState = _getState(pin);
          } else {
            pinOriginalState = pinCache.pinState;
          }

          vars.force3D !== false && gsap.set(pin, {
            force3D: true
          });
          self.spacer = spacer = pinCache.spacer;
          cs = _getComputedStyle(pin);
          spacingStart = cs[pinSpacing + direction.os2];
          pinGetter = gsap.getProperty(pin);
          pinSetter = gsap.quickSetter(pin, direction.a, _px); // pin.firstChild && !_maxScroll(pin, direction) && (pin.style.overflow = "hidden"); // protects from collapsing margins, but can have unintended consequences as demonstrated here: https://codepen.io/GreenSock/pen/1e42c7a73bfa409d2cf1e184e7a4248d so it was removed in favor of just telling people to set up their CSS to avoid the collapsing margins (overflow: hidden | auto is just one option. Another is border-top: 1px solid transparent).

          _swapPinIn(pin, spacer, cs);

          pinState = _getState(pin);
        }

        if (markers) {
          markerVars = _isObject(markers) ? _setDefaults(markers, _markerDefaults) : _markerDefaults;
          markerStartTrigger = _createMarker("scroller-start", id, scroller, direction, markerVars, 0);
          markerEndTrigger = _createMarker("scroller-end", id, scroller, direction, markerVars, 0, markerStartTrigger);
          offset = markerStartTrigger["offset" + direction.op.d2];

          var content = _getTarget(_getProxyProp(scroller, "content") || scroller);

          markerStart = this.markerStart = _createMarker("start", id, content, direction, markerVars, offset, 0, containerAnimation);
          markerEnd = this.markerEnd = _createMarker("end", id, content, direction, markerVars, offset, 0, containerAnimation);
          containerAnimation && (caMarkerSetter = gsap.quickSetter([markerStart, markerEnd], direction.a, _px));

          if (!useFixedPosition && !(_proxies.length && _getProxyProp(scroller, "fixedMarkers") === true)) {
            _makePositionable(isViewport ? _body : scroller);

            gsap.set([markerStartTrigger, markerEndTrigger], {
              force3D: true
            });
            markerStartSetter = gsap.quickSetter(markerStartTrigger, direction.a, _px);
            markerEndSetter = gsap.quickSetter(markerEndTrigger, direction.a, _px);
          }
        }

        if (containerAnimation) {
          var oldOnUpdate = containerAnimation.vars.onUpdate,
              oldParams = containerAnimation.vars.onUpdateParams;
          containerAnimation.eventCallback("onUpdate", function () {
            self.update(0, 0, 1);
            oldOnUpdate && oldOnUpdate.apply(containerAnimation, oldParams || []);
          });
        }

        self.previous = function () {
          return _triggers[_triggers.indexOf(self) - 1];
        };

        self.next = function () {
          return _triggers[_triggers.indexOf(self) + 1];
        };

        self.revert = function (revert, temp) {
          if (!temp) {
            return self.kill(true);
          } // for compatibility with gsap.context() and gsap.matchMedia() which call revert()


          var r = revert !== false || !self.enabled,
              prevRefreshing = _refreshing;

          if (r !== self.isReverted) {
            if (r) {
              prevScroll = Math.max(scrollFunc(), self.scroll.rec || 0); // record the scroll so we can revert later (repositioning/pinning things can affect scroll position). In the static refresh() method, we first record all the scroll positions as a reference.

              prevProgress = self.progress;
              prevAnimProgress = animation && animation.progress();
            }

            markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
              return m.style.display = r ? "none" : "block";
            });

            if (r) {
              _refreshing = self;
              self.update(r); // make sure the pin is back in its original position so that all the measurements are correct. do this BEFORE swapping the pin out
            }

            if (pin && (!pinReparent || !self.isActive)) {
              if (r) {
                _swapPinOut(pin, spacer, pinOriginalState);
              } else {
                _swapPinIn(pin, spacer, _getComputedStyle(pin), spacerState);
              }
            }

            r || self.update(r); // when we're restoring, the update should run AFTER swapping the pin into its pin-spacer.

            _refreshing = prevRefreshing; // restore. We set it to true during the update() so that things fire properly in there.

            self.isReverted = r;
          }
        };

        self.refresh = function (soft, force, position, pinOffset) {
          // position is typically only defined if it's coming from setPositions() - it's a way to skip the normal parsing. pinOffset is also only from setPositions() and is mostly related to fancy stuff we need to do in ScrollSmoother with effects
          if ((_refreshing || !self.enabled) && !force) {
            return;
          }

          if (pin && soft && _lastScrollTime) {
            _addListener(ScrollTrigger, "scrollEnd", _softRefresh);

            return;
          }

          !_refreshingAll && onRefreshInit && onRefreshInit(self);
          _refreshing = self;

          if (tweenTo.tween && !position) {
            // we skip this if a position is passed in because typically that's from .setPositions() and it's best to allow in-progress snapping to continue.
            tweenTo.tween.kill();
            tweenTo.tween = 0;
          }

          scrubTween && scrubTween.pause();
          invalidateOnRefresh && animation && animation.revert({
            kill: false
          }).invalidate();
          self.isReverted || self.revert(true, true);
          self._subPinOffset = false; // we'll set this to true in the sub-pins if we find any

          var size = getScrollerSize(),
              scrollerBounds = getScrollerOffsets(),
              max = containerAnimation ? containerAnimation.duration() : _maxScroll(scroller, direction),
              isFirstRefresh = change <= 0.01,
              offset = 0,
              otherPinOffset = pinOffset || 0,
              parsedEnd = _isObject(position) ? position.end : vars.end,
              parsedEndTrigger = vars.endTrigger || trigger,
              parsedStart = _isObject(position) ? position.start : vars.start || (vars.start === 0 || !trigger ? 0 : pin ? "0 0" : "0 100%"),
              pinnedContainer = self.pinnedContainer = vars.pinnedContainer && _getTarget(vars.pinnedContainer, self),
              triggerIndex = trigger && Math.max(0, _triggers.indexOf(self)) || 0,
              i = triggerIndex,
              cs,
              bounds,
              scroll,
              isVertical,
              override,
              curTrigger,
              curPin,
              oppositeScroll,
              initted,
              revertedPins,
              forcedOverflow,
              markerStartOffset,
              markerEndOffset;

          if (markers && _isObject(position)) {
            // if we alter the start/end positions with .setPositions(), it generally feeds in absolute NUMBERS which don't convey information about where to line up the markers, so to keep it intuitive, we record how far the trigger positions shift after applying the new numbers and then offset by that much in the opposite direction. We do the same to the associated trigger markers too of course.
            markerStartOffset = gsap.getProperty(markerStartTrigger, direction.p);
            markerEndOffset = gsap.getProperty(markerEndTrigger, direction.p);
          }

          while (i-- > 0) {
            // user might try to pin the same element more than once, so we must find any prior triggers with the same pin, revert them, and determine how long they're pinning so that we can offset things appropriately. Make sure we revert from last to first so that things "rewind" properly.
            curTrigger = _triggers[i];
            curTrigger.end || curTrigger.refresh(0, 1) || (_refreshing = self); // if it's a timeline-based trigger that hasn't been fully initialized yet because it's waiting for 1 tick, just force the refresh() here, otherwise if it contains a pin that's supposed to affect other ScrollTriggers further down the page, they won't be adjusted properly.

            curPin = curTrigger.pin;

            if (curPin && (curPin === trigger || curPin === pin || curPin === pinnedContainer) && !curTrigger.isReverted) {
              revertedPins || (revertedPins = []);
              revertedPins.unshift(curTrigger); // we'll revert from first to last to make sure things reach their end state properly

              curTrigger.revert(true, true);
            }

            if (curTrigger !== _triggers[i]) {
              // in case it got removed.
              triggerIndex--;
              i--;
            }
          }

          _isFunction(parsedStart) && (parsedStart = parsedStart(self));
          parsedStart = _parseClamp(parsedStart, "start", self);
          start = _parsePosition(parsedStart, trigger, size, direction, scrollFunc(), markerStart, markerStartTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._startClamp && "_startClamp") || (pin ? -0.001 : 0);
          _isFunction(parsedEnd) && (parsedEnd = parsedEnd(self));

          if (_isString(parsedEnd) && !parsedEnd.indexOf("+=")) {
            if (~parsedEnd.indexOf(" ")) {
              parsedEnd = (_isString(parsedStart) ? parsedStart.split(" ")[0] : "") + parsedEnd;
            } else {
              offset = _offsetToPx(parsedEnd.substr(2), size);
              parsedEnd = _isString(parsedStart) ? parsedStart : (containerAnimation ? gsap.utils.mapRange(0, containerAnimation.duration(), containerAnimation.scrollTrigger.start, containerAnimation.scrollTrigger.end, start) : start) + offset; // _parsePosition won't factor in the offset if the start is a number, so do it here.

              parsedEndTrigger = trigger;
            }
          }

          parsedEnd = _parseClamp(parsedEnd, "end", self);
          end = Math.max(start, _parsePosition(parsedEnd || (parsedEndTrigger ? "100% 0" : max), parsedEndTrigger, size, direction, scrollFunc() + offset, markerEnd, markerEndTrigger, self, scrollerBounds, borderWidth, useFixedPosition, max, containerAnimation, self._endClamp && "_endClamp")) || -0.001;
          offset = 0;
          i = triggerIndex;

          while (i--) {
            curTrigger = _triggers[i];
            curPin = curTrigger.pin;

            if (curPin && curTrigger.start - curTrigger._pinPush <= start && !containerAnimation && curTrigger.end > 0) {
              cs = curTrigger.end - (self._startClamp ? Math.max(0, curTrigger.start) : curTrigger.start);

              if ((curPin === trigger && curTrigger.start - curTrigger._pinPush < start || curPin === pinnedContainer) && isNaN(parsedStart)) {
                // numeric start values shouldn't be offset at all - treat them as absolute
                offset += cs * (1 - curTrigger.progress);
              }

              curPin === pin && (otherPinOffset += cs);
            }
          }

          start += offset;
          end += offset;
          self._startClamp && (self._startClamp += offset);

          if (self._endClamp && !_refreshingAll) {
            self._endClamp = end || -0.001;
            end = Math.min(end, _maxScroll(scroller, direction));
          }

          change = end - start || (start -= 0.01) && 0.001;

          if (isFirstRefresh) {
            // on the very first refresh(), the prevProgress couldn't have been accurate yet because the start/end were never calculated, so we set it here. Before 3.11.5, it could lead to an inaccurate scroll position restoration with snapping.
            prevProgress = gsap.utils.clamp(0, 1, gsap.utils.normalize(start, end, prevScroll));
          }

          self._pinPush = otherPinOffset;

          if (markerStart && offset) {
            // offset the markers if necessary
            cs = {};
            cs[direction.a] = "+=" + offset;
            pinnedContainer && (cs[direction.p] = "-=" + scrollFunc());
            gsap.set([markerStart, markerEnd], cs);
          }

          if (pin && !(_clampingMax && self.end >= _maxScroll(scroller, direction))) {
            cs = _getComputedStyle(pin);
            isVertical = direction === _vertical;
            scroll = scrollFunc(); // recalculate because the triggers can affect the scroll

            pinStart = parseFloat(pinGetter(direction.a)) + otherPinOffset;

            if (!max && end > 1) {
              // makes sure the scroller has a scrollbar, otherwise if something has width: 100%, for example, it would be too big (exclude the scrollbar). See https://gsap.com/forums/topic/25182-scrolltrigger-width-of-page-increase-where-markers-are-set-to-false/
              forcedOverflow = (isViewport ? _doc.scrollingElement || _docEl : scroller).style;
              forcedOverflow = {
                style: forcedOverflow,
                value: forcedOverflow["overflow" + direction.a.toUpperCase()]
              };

              if (isViewport && _getComputedStyle(_body)["overflow" + direction.a.toUpperCase()] !== "scroll") {
                // avoid an extra scrollbar if BOTH <html> and <body> have overflow set to "scroll"
                forcedOverflow.style["overflow" + direction.a.toUpperCase()] = "scroll";
              }
            }

            _swapPinIn(pin, spacer, cs);

            pinState = _getState(pin); // transforms will interfere with the top/left/right/bottom placement, so remove them temporarily. getBoundingClientRect() factors in transforms.

            bounds = _getBounds(pin, true);
            oppositeScroll = useFixedPosition && _getScrollFunc(scroller, isVertical ? _horizontal : _vertical)();

            if (pinSpacing) {
              spacerState = [pinSpacing + direction.os2, change + otherPinOffset + _px];
              spacerState.t = spacer;
              i = pinSpacing === _padding ? _getSize(pin, direction) + change + otherPinOffset : 0;

              if (i) {
                spacerState.push(direction.d, i + _px); // for box-sizing: border-box (must include padding).

                spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
              }

              _setState(spacerState);

              if (pinnedContainer) {
                // in ScrollTrigger.refresh(), we need to re-evaluate the pinContainer's size because this pinSpacing may stretch it out, but we can't just add the exact distance because depending on layout, it may not push things down or it may only do so partially.
                _triggers.forEach(function (t) {
                  if (t.pin === pinnedContainer && t.vars.pinSpacing !== false) {
                    t._subPinOffset = true;
                  }
                });
              }

              useFixedPosition && scrollFunc(prevScroll);
            } else {
              i = _getSize(pin, direction);
              i && spacer.style.flexBasis !== "auto" && (spacer.style.flexBasis = i + _px);
            }

            if (useFixedPosition) {
              override = {
                top: bounds.top + (isVertical ? scroll - start : oppositeScroll) + _px,
                left: bounds.left + (isVertical ? oppositeScroll : scroll - start) + _px,
                boxSizing: "border-box",
                position: "fixed"
              };
              override[_width] = override["max" + _Width] = Math.ceil(bounds.width) + _px;
              override[_height] = override["max" + _Height] = Math.ceil(bounds.height) + _px;
              override[_margin] = override[_margin + _Top] = override[_margin + _Right] = override[_margin + _Bottom] = override[_margin + _Left] = "0";
              override[_padding] = cs[_padding];
              override[_padding + _Top] = cs[_padding + _Top];
              override[_padding + _Right] = cs[_padding + _Right];
              override[_padding + _Bottom] = cs[_padding + _Bottom];
              override[_padding + _Left] = cs[_padding + _Left];
              pinActiveState = _copyState(pinOriginalState, override, pinReparent);
              _refreshingAll && scrollFunc(0);
            }

            if (animation) {
              // the animation might be affecting the transform, so we must jump to the end, check the value, and compensate accordingly. Otherwise, when it becomes unpinned, the pinSetter() will get set to a value that doesn't include whatever the animation did.
              initted = animation._initted; // if not, we must invalidate() after this step, otherwise it could lock in starting values prematurely.

              _suppressOverwrites(1);

              animation.render(animation.duration(), true, true);
              pinChange = pinGetter(direction.a) - pinStart + change + otherPinOffset;
              pinMoves = Math.abs(change - pinChange) > 1;
              useFixedPosition && pinMoves && pinActiveState.splice(pinActiveState.length - 2, 2); // transform is the last property/value set in the state Array. Since the animation is controlling that, we should omit it.

              animation.render(0, true, true);
              initted || animation.invalidate(true);
              animation.parent || animation.totalTime(animation.totalTime()); // if, for example, a toggleAction called play() and then refresh() happens and when we render(1) above, it would cause the animation to complete and get removed from its parent, so this makes sure it gets put back in.

              _suppressOverwrites(0);
            } else {
              pinChange = change;
            }

            forcedOverflow && (forcedOverflow.value ? forcedOverflow.style["overflow" + direction.a.toUpperCase()] = forcedOverflow.value : forcedOverflow.style.removeProperty("overflow-" + direction.a));
          } else if (trigger && scrollFunc() && !containerAnimation) {
            // it may be INSIDE a pinned element, so walk up the tree and look for any elements with _pinOffset to compensate because anything with pinSpacing that's already scrolled would throw off the measurements in getBoundingClientRect()
            bounds = trigger.parentNode;

            while (bounds && bounds !== _body) {
              if (bounds._pinOffset) {
                start -= bounds._pinOffset;
                end -= bounds._pinOffset;
              }

              bounds = bounds.parentNode;
            }
          }

          revertedPins && revertedPins.forEach(function (t) {
            return t.revert(false, true);
          });
          self.start = start;
          self.end = end;
          scroll1 = scroll2 = _refreshingAll ? prevScroll : scrollFunc(); // reset velocity

          if (!containerAnimation && !_refreshingAll) {
            scroll1 < prevScroll && scrollFunc(prevScroll);
            self.scroll.rec = 0;
          }

          self.revert(false, true);
          lastRefresh = _getTime();

          if (snapDelayedCall) {
            lastSnap = -1; // just so snapping gets re-enabled, clear out any recorded last value
            // self.isActive && scrollFunc(start + change * prevProgress); // previously this line was here to ensure that when snapping kicks in, it's from the previous progress but in some cases that's not desirable, like an all-page ScrollTrigger when new content gets added to the page, that'd totally change the progress.

            snapDelayedCall.restart(true);
          }

          _refreshing = 0;
          animation && isToggle && (animation._initted || prevAnimProgress) && animation.progress() !== prevAnimProgress && animation.progress(prevAnimProgress || 0, true).render(animation.time(), true, true); // must force a re-render because if saveStyles() was used on the target(s), the styles could have been wiped out during the refresh().

          if (isFirstRefresh || prevProgress !== self.progress || containerAnimation || invalidateOnRefresh || animation && !animation._initted) {
            // ensures that the direction is set properly (when refreshing, progress is set back to 0 initially, then back again to wherever it needs to be) and that callbacks are triggered.
            animation && !isToggle && animation.totalProgress(containerAnimation && start < -0.001 && !prevProgress ? gsap.utils.normalize(start, end, 0) : prevProgress, true); // to avoid issues where animation callbacks like onStart aren't triggered.

            self.progress = isFirstRefresh || (scroll1 - start) / change === prevProgress ? 0 : prevProgress;
          }

          pin && pinSpacing && (spacer._pinOffset = Math.round(self.progress * pinChange));
          scrubTween && scrubTween.invalidate();

          if (!isNaN(markerStartOffset)) {
            // numbers were passed in for the position which are absolute, so instead of just putting the markers at the very bottom of the viewport, we figure out how far they shifted down (it's safe to assume they were originally positioned in closer relation to the trigger element with values like "top", "center", a percentage or whatever, so we offset that much in the opposite direction to basically revert them to the relative position thy were at previously.
            markerStartOffset -= gsap.getProperty(markerStartTrigger, direction.p);
            markerEndOffset -= gsap.getProperty(markerEndTrigger, direction.p);

            _shiftMarker(markerStartTrigger, direction, markerStartOffset);

            _shiftMarker(markerStart, direction, markerStartOffset - (pinOffset || 0));

            _shiftMarker(markerEndTrigger, direction, markerEndOffset);

            _shiftMarker(markerEnd, direction, markerEndOffset - (pinOffset || 0));
          }

          isFirstRefresh && !_refreshingAll && self.update(); // edge case - when you reload a page when it's already scrolled down, some browsers fire a "scroll" event before DOMContentLoaded, triggering an updateAll(). If we don't update the self.progress as part of refresh(), then when it happens next, it may record prevProgress as 0 when it really shouldn't, potentially causing a callback in an animation to fire again.

          if (onRefresh && !_refreshingAll && !executingOnRefresh) {
            // when refreshing all, we do extra work to correct pinnedContainer sizes and ensure things don't exceed the maxScroll, so we should do all the refreshes at the end after all that work so that the start/end values are corrected.
            executingOnRefresh = true;
            onRefresh(self);
            executingOnRefresh = false;
          }
        };

        self.getVelocity = function () {
          return (scrollFunc() - scroll2) / (_getTime() - _time2) * 1000 || 0;
        };

        self.endAnimation = function () {
          _endAnimation(self.callbackAnimation);

          if (animation) {
            scrubTween ? scrubTween.progress(1) : !animation.paused() ? _endAnimation(animation, animation.reversed()) : isToggle || _endAnimation(animation, self.direction < 0, 1);
          }
        };

        self.labelToScroll = function (label) {
          return animation && animation.labels && (start || self.refresh() || start) + animation.labels[label] / animation.duration() * change || 0;
        };

        self.getTrailing = function (name) {
          var i = _triggers.indexOf(self),
              a = self.direction > 0 ? _triggers.slice(0, i).reverse() : _triggers.slice(i + 1);

          return (_isString(name) ? a.filter(function (t) {
            return t.vars.preventOverlaps === name;
          }) : a).filter(function (t) {
            return self.direction > 0 ? t.end <= start : t.start >= end;
          });
        };

        self.update = function (reset, recordVelocity, forceFake) {
          if (containerAnimation && !forceFake && !reset) {
            return;
          }

          var scroll = _refreshingAll === true ? prevScroll : self.scroll(),
              p = reset ? 0 : (scroll - start) / change,
              clipped = p < 0 ? 0 : p > 1 ? 1 : p || 0,
              prevProgress = self.progress,
              isActive,
              wasActive,
              toggleState,
              action,
              stateChanged,
              toggled,
              isAtMax,
              isTakingAction;

          if (recordVelocity) {
            scroll2 = scroll1;
            scroll1 = containerAnimation ? scrollFunc() : scroll;

            if (snap) {
              snap2 = snap1;
              snap1 = animation && !isToggle ? animation.totalProgress() : clipped;
            }
          } // anticipate the pinning a few ticks ahead of time based on velocity to avoid a visual glitch due to the fact that most browsers do scrolling on a separate thread (not synced with requestAnimationFrame).


          if (anticipatePin && pin && !_refreshing && !_startup && _lastScrollTime) {
            if (!clipped && start < scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {
              clipped = 0.0001;
            } else if (clipped === 1 && end > scroll + (scroll - scroll2) / (_getTime() - _time2) * anticipatePin) {
              clipped = 0.9999;
            }
          }

          if (clipped !== prevProgress && self.enabled) {
            isActive = self.isActive = !!clipped && clipped < 1;
            wasActive = !!prevProgress && prevProgress < 1;
            toggled = isActive !== wasActive;
            stateChanged = toggled || !!clipped !== !!prevProgress; // could go from start all the way to end, thus it didn't toggle but it did change state in a sense (may need to fire a callback)

            self.direction = clipped > prevProgress ? 1 : -1;
            self.progress = clipped;

            if (stateChanged && !_refreshing) {
              toggleState = clipped && !prevProgress ? 0 : clipped === 1 ? 1 : prevProgress === 1 ? 2 : 3; // 0 = enter, 1 = leave, 2 = enterBack, 3 = leaveBack (we prioritize the FIRST encounter, thus if you scroll really fast past the onEnter and onLeave in one tick, it'd prioritize onEnter.

              if (isToggle) {
                action = !toggled && toggleActions[toggleState + 1] !== "none" && toggleActions[toggleState + 1] || toggleActions[toggleState]; // if it didn't toggle, that means it shot right past and since we prioritize the "enter" action, we should switch to the "leave" in this case (but only if one is defined)

                isTakingAction = animation && (action === "complete" || action === "reset" || action in animation);
              }
            }

            preventOverlaps && (toggled || isTakingAction) && (isTakingAction || scrub || !animation) && (_isFunction(preventOverlaps) ? preventOverlaps(self) : self.getTrailing(preventOverlaps).forEach(function (t) {
              return t.endAnimation();
            }));

            if (!isToggle) {
              if (scrubTween && !_refreshing && !_startup) {
                scrubTween._dp._time - scrubTween._start !== scrubTween._time && scrubTween.render(scrubTween._dp._time - scrubTween._start); // if there's a scrub on both the container animation and this one (or a ScrollSmoother), the update order would cause this one not to have rendered yet, so it wouldn't make any progress before we .restart() it heading toward the new progress so it'd appear stuck thus we force a render here.

                if (scrubTween.resetTo) {
                  scrubTween.resetTo("totalProgress", clipped, animation._tTime / animation._tDur);
                } else {
                  // legacy support (courtesy), before 3.10.0
                  scrubTween.vars.totalProgress = clipped;
                  scrubTween.invalidate().restart();
                }
              } else if (animation) {
                animation.totalProgress(clipped, !!(_refreshing && (lastRefresh || reset)));
              }
            }

            if (pin) {
              reset && pinSpacing && (spacer.style[pinSpacing + direction.os2] = spacingStart);

              if (!useFixedPosition) {
                pinSetter(_round(pinStart + pinChange * clipped));
              } else if (stateChanged) {
                isAtMax = !reset && clipped > prevProgress && end + 1 > scroll && scroll + 1 >= _maxScroll(scroller, direction); // if it's at the VERY end of the page, don't switch away from position: fixed because it's pointless and it could cause a brief flash when the user scrolls back up (when it gets pinned again)

                if (pinReparent) {
                  if (!reset && (isActive || isAtMax)) {
                    var bounds = _getBounds(pin, true),
                        _offset = scroll - start;

                    _reparent(pin, _body, bounds.top + (direction === _vertical ? _offset : 0) + _px, bounds.left + (direction === _vertical ? 0 : _offset) + _px);
                  } else {
                    _reparent(pin, spacer);
                  }
                }

                _setState(isActive || isAtMax ? pinActiveState : pinState);

                pinMoves && clipped < 1 && isActive || pinSetter(pinStart + (clipped === 1 && !isAtMax ? pinChange : 0));
              }
            }

            snap && !tweenTo.tween && !_refreshing && !_startup && snapDelayedCall.restart(true);
            toggleClass && (toggled || once && clipped && (clipped < 1 || !_limitCallbacks)) && _toArray(toggleClass.targets).forEach(function (el) {
              return el.classList[isActive || once ? "add" : "remove"](toggleClass.className);
            }); // classes could affect positioning, so do it even if reset or refreshing is true.

            onUpdate && !isToggle && !reset && onUpdate(self);

            if (stateChanged && !_refreshing) {
              if (isToggle) {
                if (isTakingAction) {
                  if (action === "complete") {
                    animation.pause().totalProgress(1);
                  } else if (action === "reset") {
                    animation.restart(true).pause();
                  } else if (action === "restart") {
                    animation.restart(true);
                  } else {
                    animation[action]();
                  }
                }

                onUpdate && onUpdate(self);
              }

              if (toggled || !_limitCallbacks) {
                // on startup, the page could be scrolled and we don't want to fire callbacks that didn't toggle. For example onEnter shouldn't fire if the ScrollTrigger isn't actually entered.
                onToggle && toggled && _callback(self, onToggle);
                callbacks[toggleState] && _callback(self, callbacks[toggleState]);
                once && (clipped === 1 ? self.kill(false, 1) : callbacks[toggleState] = 0); // a callback shouldn't be called again if once is true.

                if (!toggled) {
                  // it's possible to go completely past, like from before the start to after the end (or vice-versa) in which case BOTH callbacks should be fired in that order
                  toggleState = clipped === 1 ? 1 : 3;
                  callbacks[toggleState] && _callback(self, callbacks[toggleState]);
                }
              }

              if (fastScrollEnd && !isActive && Math.abs(self.getVelocity()) > (_isNumber(fastScrollEnd) ? fastScrollEnd : 2500)) {
                _endAnimation(self.callbackAnimation);

                scrubTween ? scrubTween.progress(1) : _endAnimation(animation, action === "reverse" ? 1 : !clipped, 1);
              }
            } else if (isToggle && onUpdate && !_refreshing) {
              onUpdate(self);
            }
          } // update absolutely-positioned markers (only if the scroller isn't the viewport)


          if (markerEndSetter) {
            var n = containerAnimation ? scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0) : scroll;
            markerStartSetter(n + (markerStartTrigger._isFlipped ? 1 : 0));
            markerEndSetter(n);
          }

          caMarkerSetter && caMarkerSetter(-scroll / containerAnimation.duration() * (containerAnimation._caScrollDist || 0));
        };

        self.enable = function (reset, refresh) {
          if (!self.enabled) {
            self.enabled = true;

            _addListener(scroller, "resize", _onResize);

            isViewport || _addListener(scroller, "scroll", _onScroll);
            onRefreshInit && _addListener(ScrollTrigger, "refreshInit", onRefreshInit);

            if (reset !== false) {
              self.progress = prevProgress = 0;
              scroll1 = scroll2 = lastSnap = scrollFunc();
            }

            refresh !== false && self.refresh();
          }
        };

        self.getTween = function (snap) {
          return snap && tweenTo ? tweenTo.tween : scrubTween;
        };

        self.setPositions = function (newStart, newEnd, keepClamp, pinOffset) {
          // doesn't persist after refresh()! Intended to be a way to override values that were set during refresh(), like you could set it in onRefresh()
          if (containerAnimation) {
            // convert ratios into scroll positions. Remember, start/end values on ScrollTriggers that have a containerAnimation refer to the time (in seconds), NOT scroll positions.
            var st = containerAnimation.scrollTrigger,
                duration = containerAnimation.duration(),
                _change = st.end - st.start;

            newStart = st.start + _change * newStart / duration;
            newEnd = st.start + _change * newEnd / duration;
          }

          self.refresh(false, false, {
            start: _keepClamp(newStart, keepClamp && !!self._startClamp),
            end: _keepClamp(newEnd, keepClamp && !!self._endClamp)
          }, pinOffset);
          self.update();
        };

        self.adjustPinSpacing = function (amount) {
          if (spacerState && amount) {
            var i = spacerState.indexOf(direction.d) + 1;
            spacerState[i] = parseFloat(spacerState[i]) + amount + _px;
            spacerState[1] = parseFloat(spacerState[1]) + amount + _px;

            _setState(spacerState);
          }
        };

        self.disable = function (reset, allowAnimation) {
          if (self.enabled) {
            reset !== false && self.revert(true, true);
            self.enabled = self.isActive = false;
            allowAnimation || scrubTween && scrubTween.pause();
            prevScroll = 0;
            pinCache && (pinCache.uncache = 1);
            onRefreshInit && _removeListener(ScrollTrigger, "refreshInit", onRefreshInit);

            if (snapDelayedCall) {
              snapDelayedCall.pause();
              tweenTo.tween && tweenTo.tween.kill() && (tweenTo.tween = 0);
            }

            if (!isViewport) {
              var i = _triggers.length;

              while (i--) {
                if (_triggers[i].scroller === scroller && _triggers[i] !== self) {
                  return; //don't remove the listeners if there are still other triggers referencing it.
                }
              }

              _removeListener(scroller, "resize", _onResize);

              isViewport || _removeListener(scroller, "scroll", _onScroll);
            }
          }
        };

        self.kill = function (revert, allowAnimation) {
          self.disable(revert, allowAnimation);
          scrubTween && !allowAnimation && scrubTween.kill();
          id && delete _ids[id];

          var i = _triggers.indexOf(self);

          i >= 0 && _triggers.splice(i, 1);
          i === _i && _direction > 0 && _i--; // if we're in the middle of a refresh() or update(), splicing would cause skips in the index, so adjust...
          // if no other ScrollTrigger instances of the same scroller are found, wipe out any recorded scroll position. Otherwise, in a single page application, for example, it could maintain scroll position when it really shouldn't.

          i = 0;

          _triggers.forEach(function (t) {
            return t.scroller === self.scroller && (i = 1);
          });

          i || _refreshingAll || (self.scroll.rec = 0);

          if (animation) {
            animation.scrollTrigger = null;
            revert && animation.revert({
              kill: false
            });
            allowAnimation || animation.kill();
          }

          markerStart && [markerStart, markerEnd, markerStartTrigger, markerEndTrigger].forEach(function (m) {
            return m.parentNode && m.parentNode.removeChild(m);
          });
          _primary === self && (_primary = 0);

          if (pin) {
            pinCache && (pinCache.uncache = 1);
            i = 0;

            _triggers.forEach(function (t) {
              return t.pin === pin && i++;
            });

            i || (pinCache.spacer = 0); // if there aren't any more ScrollTriggers with the same pin, remove the spacer, otherwise it could be contaminated with old/stale values if the user re-creates a ScrollTrigger for the same element.
          }

          vars.onKill && vars.onKill(self);
        };

        _triggers.push(self);

        self.enable(false, false);
        customRevertReturn && customRevertReturn(self);

        if (animation && animation.add && !change) {
          // if the animation is a timeline, it may not have been populated yet, so it wouldn't render at the proper place on the first refresh(), thus we should schedule one for the next tick. If "change" is defined, we know it must be re-enabling, thus we can refresh() right away.
          var updateFunc = self.update; // some browsers may fire a scroll event BEFORE a tick elapses and/or the DOMContentLoaded fires. So there's a chance update() will be called BEFORE a refresh() has happened on a Timeline-attached ScrollTrigger which means the start/end won't be calculated yet. We don't want to add conditional logic inside the update() method (like check to see if end is defined and if not, force a refresh()) because that's a function that gets hit a LOT (performance). So we swap out the real update() method for this one that'll re-attach it the first time it gets called and of course forces a refresh().

          self.update = function () {
            self.update = updateFunc;
            _scrollers.cache++; // otherwise a cached scroll position may get used in the refresh() in a very rare scenario, like if ScrollTriggers are created inside a DOMContentLoaded event and the queued requestAnimationFrame() fires beforehand. See https://gsap.com/community/forums/topic/41267-scrolltrigger-breaks-on-refresh-when-using-domcontentloaded/

            start || end || self.refresh();
          };

          gsap.delayedCall(0.01, self.update);
          change = 0.01;
          start = end = 0;
        } else {
          self.refresh();
        }

        pin && _queueRefreshAll(); // pinning could affect the positions of other things, so make sure we queue a full refresh()
      };

      ScrollTrigger.register = function register(core) {
        if (!_coreInitted) {
          gsap = core || _getGSAP();
          _windowExists() && window.document && ScrollTrigger.enable();
          _coreInitted = _enabled;
        }

        return _coreInitted;
      };

      ScrollTrigger.defaults = function defaults(config) {
        if (config) {
          for (var p in config) {
            _defaults[p] = config[p];
          }
        }

        return _defaults;
      };

      ScrollTrigger.disable = function disable(reset, kill) {
        _enabled = 0;

        _triggers.forEach(function (trigger) {
          return trigger[kill ? "kill" : "disable"](reset);
        });

        _removeListener(_win, "wheel", _onScroll);

        _removeListener(_doc, "scroll", _onScroll);

        clearInterval(_syncInterval);

        _removeListener(_doc, "touchcancel", _passThrough);

        _removeListener(_body, "touchstart", _passThrough);

        _multiListener(_removeListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);

        _multiListener(_removeListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);

        _resizeDelay.kill();

        _iterateAutoRefresh(_removeListener);

        for (var i = 0; i < _scrollers.length; i += 3) {
          _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 1]);

          _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 2]);
        }
      };

      ScrollTrigger.enable = function enable() {
        _win = window;
        _doc = document;
        _docEl = _doc.documentElement;
        _body = _doc.body;

        if (gsap) {
          _toArray = gsap.utils.toArray;
          _clamp = gsap.utils.clamp;
          _context = gsap.core.context || _passThrough;
          _suppressOverwrites = gsap.core.suppressOverwrites || _passThrough;
          _scrollRestoration = _win.history.scrollRestoration || "auto";
          _lastScroll = _win.pageYOffset || 0;
          gsap.core.globals("ScrollTrigger", ScrollTrigger); // must register the global manually because in Internet Explorer, functions (classes) don't have a "name" property.

          if (_body) {
            _enabled = 1;
            _div100vh = document.createElement("div"); // to solve mobile browser address bar show/hide resizing, we shouldn't rely on window.innerHeight. Instead, use a <div> with its height set to 100vh and measure that since that's what the scrolling is based on anyway and it's not affected by address bar showing/hiding.

            _div100vh.style.height = "100vh";
            _div100vh.style.position = "absolute";

            _refresh100vh();

            _rafBugFix();

            Observer.register(gsap); // isTouch is 0 if no touch, 1 if ONLY touch, and 2 if it can accommodate touch but also other types like mouse/pointer.

            ScrollTrigger.isTouch = Observer.isTouch;
            _fixIOSBug = Observer.isTouch && /(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent); // since 2017, iOS has had a bug that causes event.clientX/Y to be inaccurate when a scroll occurs, thus we must alternate ignoring every other touchmove event to work around it. See https://bugs.webkit.org/show_bug.cgi?id=181954 and https://codepen.io/GreenSock/pen/ExbrPNa/087cef197dc35445a0951e8935c41503

            _ignoreMobileResize = Observer.isTouch === 1;

            _addListener(_win, "wheel", _onScroll); // mostly for 3rd party smooth scrolling libraries.


            _root = [_win, _doc, _docEl, _body];

            if (gsap.matchMedia) {
              ScrollTrigger.matchMedia = function (vars) {
                var mm = gsap.matchMedia(),
                    p;

                for (p in vars) {
                  mm.add(p, vars[p]);
                }

                return mm;
              };

              gsap.addEventListener("matchMediaInit", function () {
                return _revertAll();
              });
              gsap.addEventListener("matchMediaRevert", function () {
                return _revertRecorded();
              });
              gsap.addEventListener("matchMedia", function () {
                _refreshAll(0, 1);

                _dispatch("matchMedia");
              });
              gsap.matchMedia().add("(orientation: portrait)", function () {
                // when orientation changes, we should take new base measurements for the ignoreMobileResize feature.
                _setBaseDimensions();

                return _setBaseDimensions;
              });
            } else {
              console.warn("Requires GSAP 3.11.0 or later");
            }

            _setBaseDimensions();

            _addListener(_doc, "scroll", _onScroll); // some browsers (like Chrome), the window stops dispatching scroll events on the window if you scroll really fast, but it's consistent on the document!


            var bodyHasStyle = _body.hasAttribute("style"),
                bodyStyle = _body.style,
                border = bodyStyle.borderTopStyle,
                AnimationProto = gsap.core.Animation.prototype,
                bounds,
                i;

            AnimationProto.revert || Object.defineProperty(AnimationProto, "revert", {
              value: function value() {
                return this.time(-0.01, true);
              }
            }); // only for backwards compatibility (Animation.revert() was added after 3.10.4)

            bodyStyle.borderTopStyle = "solid"; // works around an issue where a margin of a child element could throw off the bounds of the _body, making it seem like there's a margin when there actually isn't. The border ensures that the bounds are accurate.

            bounds = _getBounds(_body);
            _vertical.m = Math.round(bounds.top + _vertical.sc()) || 0; // accommodate the offset of the <body> caused by margins and/or padding

            _horizontal.m = Math.round(bounds.left + _horizontal.sc()) || 0;
            border ? bodyStyle.borderTopStyle = border : bodyStyle.removeProperty("border-top-style");

            if (!bodyHasStyle) {
              // SSR frameworks like Next.js complain if this attribute gets added.
              _body.setAttribute("style", ""); // it's not enough to just removeAttribute() - we must first set it to empty, otherwise Next.js complains.


              _body.removeAttribute("style");
            } // TODO: (?) maybe move to leveraging the velocity mechanism in Observer and skip intervals.


            _syncInterval = setInterval(_sync, 250);
            gsap.delayedCall(0.5, function () {
              return _startup = 0;
            });

            _addListener(_doc, "touchcancel", _passThrough); // some older Android devices intermittently stop dispatching "touchmove" events if we don't listen for "touchcancel" on the document.


            _addListener(_body, "touchstart", _passThrough); //works around Safari bug: https://gsap.com/forums/topic/21450-draggable-in-iframe-on-mobile-is-buggy/


            _multiListener(_addListener, _doc, "pointerdown,touchstart,mousedown", _pointerDownHandler);

            _multiListener(_addListener, _doc, "pointerup,touchend,mouseup", _pointerUpHandler);

            _transformProp = gsap.utils.checkPrefix("transform");

            _stateProps.push(_transformProp);

            _coreInitted = _getTime();
            _resizeDelay = gsap.delayedCall(0.2, _refreshAll).pause();
            _autoRefresh = [_doc, "visibilitychange", function () {
              var w = _win.innerWidth,
                  h = _win.innerHeight;

              if (_doc.hidden) {
                _prevWidth = w;
                _prevHeight = h;
              } else if (_prevWidth !== w || _prevHeight !== h) {
                _onResize();
              }
            }, _doc, "DOMContentLoaded", _refreshAll, _win, "load", _refreshAll, _win, "resize", _onResize];

            _iterateAutoRefresh(_addListener);

            _triggers.forEach(function (trigger) {
              return trigger.enable(0, 1);
            });

            for (i = 0; i < _scrollers.length; i += 3) {
              _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 1]);

              _wheelListener(_removeListener, _scrollers[i], _scrollers[i + 2]);
            }
          }
        }
      };

      ScrollTrigger.config = function config(vars) {
        "limitCallbacks" in vars && (_limitCallbacks = !!vars.limitCallbacks);
        var ms = vars.syncInterval;
        ms && clearInterval(_syncInterval) || (_syncInterval = ms) && setInterval(_sync, ms);
        "ignoreMobileResize" in vars && (_ignoreMobileResize = ScrollTrigger.isTouch === 1 && vars.ignoreMobileResize);

        if ("autoRefreshEvents" in vars) {
          _iterateAutoRefresh(_removeListener) || _iterateAutoRefresh(_addListener, vars.autoRefreshEvents || "none");
          _ignoreResize = (vars.autoRefreshEvents + "").indexOf("resize") === -1;
        }
      };

      ScrollTrigger.scrollerProxy = function scrollerProxy(target, vars) {
        var t = _getTarget(target),
            i = _scrollers.indexOf(t),
            isViewport = _isViewport(t);

        if (~i) {
          _scrollers.splice(i, isViewport ? 6 : 2);
        }

        if (vars) {
          isViewport ? _proxies.unshift(_win, vars, _body, vars, _docEl, vars) : _proxies.unshift(t, vars);
        }
      };

      ScrollTrigger.clearMatchMedia = function clearMatchMedia(query) {
        _triggers.forEach(function (t) {
          return t._ctx && t._ctx.query === query && t._ctx.kill(true, true);
        });
      };

      ScrollTrigger.isInViewport = function isInViewport(element, ratio, horizontal) {
        var bounds = (_isString(element) ? _getTarget(element) : element).getBoundingClientRect(),
            offset = bounds[horizontal ? _width : _height] * ratio || 0;
        return horizontal ? bounds.right - offset > 0 && bounds.left + offset < _win.innerWidth : bounds.bottom - offset > 0 && bounds.top + offset < _win.innerHeight;
      };

      ScrollTrigger.positionInViewport = function positionInViewport(element, referencePoint, horizontal) {
        _isString(element) && (element = _getTarget(element));
        var bounds = element.getBoundingClientRect(),
            size = bounds[horizontal ? _width : _height],
            offset = referencePoint == null ? size / 2 : referencePoint in _keywords ? _keywords[referencePoint] * size : ~referencePoint.indexOf("%") ? parseFloat(referencePoint) * size / 100 : parseFloat(referencePoint) || 0;
        return horizontal ? (bounds.left + offset) / _win.innerWidth : (bounds.top + offset) / _win.innerHeight;
      };

      ScrollTrigger.killAll = function killAll(allowListeners) {
        _triggers.slice(0).forEach(function (t) {
          return t.vars.id !== "ScrollSmoother" && t.kill();
        });

        if (allowListeners !== true) {
          var listeners = _listeners.killAll || [];
          _listeners = {};
          listeners.forEach(function (f) {
            return f();
          });
        }
      };

      return ScrollTrigger;
    }();
    ScrollTrigger.version = "3.12.7";

    ScrollTrigger.saveStyles = function (targets) {
      return targets ? _toArray(targets).forEach(function (target) {
        // saved styles are recorded in a consecutive alternating Array, like [element, cssText, transform attribute, cache, matchMedia, ...]
        if (target && target.style) {
          var i = _savedStyles.indexOf(target);

          i >= 0 && _savedStyles.splice(i, 5);

          _savedStyles.push(target, target.style.cssText, target.getBBox && target.getAttribute("transform"), gsap.core.getCache(target), _context());
        }
      }) : _savedStyles;
    };

    ScrollTrigger.revert = function (soft, media) {
      return _revertAll(!soft, media);
    };

    ScrollTrigger.create = function (vars, animation) {
      return new ScrollTrigger(vars, animation);
    };

    ScrollTrigger.refresh = function (safe) {
      return safe ? _onResize(true) : (_coreInitted || ScrollTrigger.register()) && _refreshAll(true);
    };

    ScrollTrigger.update = function (force) {
      return ++_scrollers.cache && _updateAll(force === true ? 2 : 0);
    };

    ScrollTrigger.clearScrollMemory = _clearScrollMemory;

    ScrollTrigger.maxScroll = function (element, horizontal) {
      return _maxScroll(element, horizontal ? _horizontal : _vertical);
    };

    ScrollTrigger.getScrollFunc = function (element, horizontal) {
      return _getScrollFunc(_getTarget(element), horizontal ? _horizontal : _vertical);
    };

    ScrollTrigger.getById = function (id) {
      return _ids[id];
    };

    ScrollTrigger.getAll = function () {
      return _triggers.filter(function (t) {
        return t.vars.id !== "ScrollSmoother";
      });
    }; // it's common for people to ScrollTrigger.getAll(t => t.kill()) on page routes, for example, and we don't want it to ruin smooth scrolling by killing the main ScrollSmoother one.


    ScrollTrigger.isScrolling = function () {
      return !!_lastScrollTime;
    };

    ScrollTrigger.snapDirectional = _snapDirectional;

    ScrollTrigger.addEventListener = function (type, callback) {
      var a = _listeners[type] || (_listeners[type] = []);
      ~a.indexOf(callback) || a.push(callback);
    };

    ScrollTrigger.removeEventListener = function (type, callback) {
      var a = _listeners[type],
          i = a && a.indexOf(callback);
      i >= 0 && a.splice(i, 1);
    };

    ScrollTrigger.batch = function (targets, vars) {
      var result = [],
          varsCopy = {},
          interval = vars.interval || 0.016,
          batchMax = vars.batchMax || 1e9,
          proxyCallback = function proxyCallback(type, callback) {
        var elements = [],
            triggers = [],
            delay = gsap.delayedCall(interval, function () {
          callback(elements, triggers);
          elements = [];
          triggers = [];
        }).pause();
        return function (self) {
          elements.length || delay.restart(true);
          elements.push(self.trigger);
          triggers.push(self);
          batchMax <= elements.length && delay.progress(1);
        };
      },
          p;

      for (p in vars) {
        varsCopy[p] = p.substr(0, 2) === "on" && _isFunction(vars[p]) && p !== "onRefreshInit" ? proxyCallback(p, vars[p]) : vars[p];
      }

      if (_isFunction(batchMax)) {
        batchMax = batchMax();

        _addListener(ScrollTrigger, "refresh", function () {
          return batchMax = vars.batchMax();
        });
      }

      _toArray(targets).forEach(function (target) {
        var config = {};

        for (p in varsCopy) {
          config[p] = varsCopy[p];
        }

        config.trigger = target;
        result.push(ScrollTrigger.create(config));
      });

      return result;
    }; // to reduce file size. clamps the scroll and also returns a duration multiplier so that if the scroll gets chopped shorter, the duration gets curtailed as well (otherwise if you're very close to the top of the page, for example, and swipe up really fast, it'll suddenly slow down and take a long time to reach the top).


    var _clampScrollAndGetDurationMultiplier = function _clampScrollAndGetDurationMultiplier(scrollFunc, current, end, max) {
      current > max ? scrollFunc(max) : current < 0 && scrollFunc(0);
      return end > max ? (max - current) / (end - current) : end < 0 ? current / (current - end) : 1;
    },
        _allowNativePanning = function _allowNativePanning(target, direction) {
      if (direction === true) {
        target.style.removeProperty("touch-action");
      } else {
        target.style.touchAction = direction === true ? "auto" : direction ? "pan-" + direction + (Observer.isTouch ? " pinch-zoom" : "") : "none"; // note: Firefox doesn't support it pinch-zoom properly, at least in addition to a pan-x or pan-y.
      }

      target === _docEl && _allowNativePanning(_body, direction);
    },
        _overflow = {
      auto: 1,
      scroll: 1
    },
        _nestedScroll = function _nestedScroll(_ref5) {
      var event = _ref5.event,
          target = _ref5.target,
          axis = _ref5.axis;

      var node = (event.changedTouches ? event.changedTouches[0] : event).target,
          cache = node._gsap || gsap.core.getCache(node),
          time = _getTime(),
          cs;

      if (!cache._isScrollT || time - cache._isScrollT > 2000) {
        // cache for 2 seconds to improve performance.
        while (node && node !== _body && (node.scrollHeight <= node.clientHeight && node.scrollWidth <= node.clientWidth || !(_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]))) {
          node = node.parentNode;
        }

        cache._isScroll = node && node !== target && !_isViewport(node) && (_overflow[(cs = _getComputedStyle(node)).overflowY] || _overflow[cs.overflowX]);
        cache._isScrollT = time;
      }

      if (cache._isScroll || axis === "x") {
        event.stopPropagation();
        event._gsapAllow = true;
      }
    },
        // capture events on scrollable elements INSIDE the <body> and allow those by calling stopPropagation() when we find a scrollable ancestor
    _inputObserver = function _inputObserver(target, type, inputs, nested) {
      return Observer.create({
        target: target,
        capture: true,
        debounce: false,
        lockAxis: true,
        type: type,
        onWheel: nested = nested && _nestedScroll,
        onPress: nested,
        onDrag: nested,
        onScroll: nested,
        onEnable: function onEnable() {
          return inputs && _addListener(_doc, Observer.eventTypes[0], _captureInputs, false, true);
        },
        onDisable: function onDisable() {
          return _removeListener(_doc, Observer.eventTypes[0], _captureInputs, true);
        }
      });
    },
        _inputExp = /(input|label|select|textarea)/i,
        _inputIsFocused,
        _captureInputs = function _captureInputs(e) {
      var isInput = _inputExp.test(e.target.tagName);

      if (isInput || _inputIsFocused) {
        e._gsapAllow = true;
        _inputIsFocused = isInput;
      }
    },
        _getScrollNormalizer = function _getScrollNormalizer(vars) {
      _isObject(vars) || (vars = {});
      vars.preventDefault = vars.isNormalizer = vars.allowClicks = true;
      vars.type || (vars.type = "wheel,touch");
      vars.debounce = !!vars.debounce;
      vars.id = vars.id || "normalizer";

      var _vars2 = vars,
          normalizeScrollX = _vars2.normalizeScrollX,
          momentum = _vars2.momentum,
          allowNestedScroll = _vars2.allowNestedScroll,
          onRelease = _vars2.onRelease,
          self,
          maxY,
          target = _getTarget(vars.target) || _docEl,
          smoother = gsap.core.globals().ScrollSmoother,
          smootherInstance = smoother && smoother.get(),
          content = _fixIOSBug && (vars.content && _getTarget(vars.content) || smootherInstance && vars.content !== false && !smootherInstance.smooth() && smootherInstance.content()),
          scrollFuncY = _getScrollFunc(target, _vertical),
          scrollFuncX = _getScrollFunc(target, _horizontal),
          scale = 1,
          initialScale = (Observer.isTouch && _win.visualViewport ? _win.visualViewport.scale * _win.visualViewport.width : _win.outerWidth) / _win.innerWidth,
          wheelRefresh = 0,
          resolveMomentumDuration = _isFunction(momentum) ? function () {
        return momentum(self);
      } : function () {
        return momentum || 2.8;
      },
          lastRefreshID,
          skipTouchMove,
          inputObserver = _inputObserver(target, vars.type, true, allowNestedScroll),
          resumeTouchMove = function resumeTouchMove() {
        return skipTouchMove = false;
      },
          scrollClampX = _passThrough,
          scrollClampY = _passThrough,
          updateClamps = function updateClamps() {
        maxY = _maxScroll(target, _vertical);
        scrollClampY = _clamp(_fixIOSBug ? 1 : 0, maxY);
        normalizeScrollX && (scrollClampX = _clamp(0, _maxScroll(target, _horizontal)));
        lastRefreshID = _refreshID;
      },
          removeContentOffset = function removeContentOffset() {
        content._gsap.y = _round(parseFloat(content._gsap.y) + scrollFuncY.offset) + "px";
        content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + parseFloat(content._gsap.y) + ", 0, 1)";
        scrollFuncY.offset = scrollFuncY.cacheID = 0;
      },
          ignoreDrag = function ignoreDrag() {
        if (skipTouchMove) {
          requestAnimationFrame(resumeTouchMove);

          var offset = _round(self.deltaY / 2),
              scroll = scrollClampY(scrollFuncY.v - offset);

          if (content && scroll !== scrollFuncY.v + scrollFuncY.offset) {
            scrollFuncY.offset = scroll - scrollFuncY.v;

            var y = _round((parseFloat(content && content._gsap.y) || 0) - scrollFuncY.offset);

            content.style.transform = "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, " + y + ", 0, 1)";
            content._gsap.y = y + "px";
            scrollFuncY.cacheID = _scrollers.cache;

            _updateAll();
          }

          return true;
        }

        scrollFuncY.offset && removeContentOffset();
        skipTouchMove = true;
      },
          tween,
          startScrollX,
          startScrollY,
          onStopDelayedCall,
          onResize = function onResize() {
        // if the window resizes, like on an iPhone which Apple FORCES the address bar to show/hide even if we event.preventDefault(), it may be scrolling too far now that the address bar is showing, so we must dynamically adjust the momentum tween.
        updateClamps();

        if (tween.isActive() && tween.vars.scrollY > maxY) {
          scrollFuncY() > maxY ? tween.progress(1) && scrollFuncY(maxY) : tween.resetTo("scrollY", maxY);
        }
      };

      content && gsap.set(content, {
        y: "+=0"
      }); // to ensure there's a cache (element._gsap)

      vars.ignoreCheck = function (e) {
        return _fixIOSBug && e.type === "touchmove" && ignoreDrag() || scale > 1.05 && e.type !== "touchstart" || self.isGesturing || e.touches && e.touches.length > 1;
      };

      vars.onPress = function () {
        skipTouchMove = false;
        var prevScale = scale;
        scale = _round((_win.visualViewport && _win.visualViewport.scale || 1) / initialScale);
        tween.pause();
        prevScale !== scale && _allowNativePanning(target, scale > 1.01 ? true : normalizeScrollX ? false : "x");
        startScrollX = scrollFuncX();
        startScrollY = scrollFuncY();
        updateClamps();
        lastRefreshID = _refreshID;
      };

      vars.onRelease = vars.onGestureStart = function (self, wasDragging) {
        scrollFuncY.offset && removeContentOffset();

        if (!wasDragging) {
          onStopDelayedCall.restart(true);
        } else {
          _scrollers.cache++; // make sure we're pulling the non-cached value
          // alternate algorithm: durX = Math.min(6, Math.abs(self.velocityX / 800)),	dur = Math.max(durX, Math.min(6, Math.abs(self.velocityY / 800))); dur = dur * (0.4 + (1 - _power4In(dur / 6)) * 0.6)) * (momentumSpeed || 1)

          var dur = resolveMomentumDuration(),
              currentScroll,
              endScroll;

          if (normalizeScrollX) {
            currentScroll = scrollFuncX();
            endScroll = currentScroll + dur * 0.05 * -self.velocityX / 0.227; // the constant .227 is from power4(0.05). velocity is inverted because scrolling goes in the opposite direction.

            dur *= _clampScrollAndGetDurationMultiplier(scrollFuncX, currentScroll, endScroll, _maxScroll(target, _horizontal));
            tween.vars.scrollX = scrollClampX(endScroll);
          }

          currentScroll = scrollFuncY();
          endScroll = currentScroll + dur * 0.05 * -self.velocityY / 0.227; // the constant .227 is from power4(0.05)

          dur *= _clampScrollAndGetDurationMultiplier(scrollFuncY, currentScroll, endScroll, _maxScroll(target, _vertical));
          tween.vars.scrollY = scrollClampY(endScroll);
          tween.invalidate().duration(dur).play(0.01);

          if (_fixIOSBug && tween.vars.scrollY >= maxY || currentScroll >= maxY - 1) {
            // iOS bug: it'll show the address bar but NOT fire the window "resize" event until the animation is done but we must protect against overshoot so we leverage an onUpdate to do so.
            gsap.to({}, {
              onUpdate: onResize,
              duration: dur
            });
          }
        }

        onRelease && onRelease(self);
      };

      vars.onWheel = function () {
        tween._ts && tween.pause();

        if (_getTime() - wheelRefresh > 1000) {
          // after 1 second, refresh the clamps otherwise that'll only happen when ScrollTrigger.refresh() is called or for touch-scrolling.
          lastRefreshID = 0;
          wheelRefresh = _getTime();
        }
      };

      vars.onChange = function (self, dx, dy, xArray, yArray) {
        _refreshID !== lastRefreshID && updateClamps();
        dx && normalizeScrollX && scrollFuncX(scrollClampX(xArray[2] === dx ? startScrollX + (self.startX - self.x) : scrollFuncX() + dx - xArray[1])); // for more precision, we track pointer/touch movement from the start, otherwise it'll drift.

        if (dy) {
          scrollFuncY.offset && removeContentOffset();
          var isTouch = yArray[2] === dy,
              y = isTouch ? startScrollY + self.startY - self.y : scrollFuncY() + dy - yArray[1],
              yClamped = scrollClampY(y);
          isTouch && y !== yClamped && (startScrollY += yClamped - y);
          scrollFuncY(yClamped);
        }

        (dy || dx) && _updateAll();
      };

      vars.onEnable = function () {
        _allowNativePanning(target, normalizeScrollX ? false : "x");

        ScrollTrigger.addEventListener("refresh", onResize);

        _addListener(_win, "resize", onResize);

        if (scrollFuncY.smooth) {
          scrollFuncY.target.style.scrollBehavior = "auto";
          scrollFuncY.smooth = scrollFuncX.smooth = false;
        }

        inputObserver.enable();
      };

      vars.onDisable = function () {
        _allowNativePanning(target, true);

        _removeListener(_win, "resize", onResize);

        ScrollTrigger.removeEventListener("refresh", onResize);
        inputObserver.kill();
      };

      vars.lockAxis = vars.lockAxis !== false;
      self = new Observer(vars);
      self.iOS = _fixIOSBug; // used in the Observer getCachedScroll() function to work around an iOS bug that wreaks havoc with TouchEvent.clientY if we allow scroll to go all the way back to 0.

      _fixIOSBug && !scrollFuncY() && scrollFuncY(1); // iOS bug causes event.clientY values to freak out (wildly inaccurate) if the scroll position is exactly 0.

      _fixIOSBug && gsap.ticker.add(_passThrough); // prevent the ticker from sleeping

      onStopDelayedCall = self._dc;
      tween = gsap.to(self, {
        ease: "power4",
        paused: true,
        inherit: false,
        scrollX: normalizeScrollX ? "+=0.1" : "+=0",
        scrollY: "+=0.1",
        modifiers: {
          scrollY: _interruptionTracker(scrollFuncY, scrollFuncY(), function () {
            return tween.pause();
          })
        },
        onUpdate: _updateAll,
        onComplete: onStopDelayedCall.vars.onComplete
      }); // we need the modifier to sense if the scroll position is altered outside of the momentum tween (like with a scrollTo tween) so we can pause() it to prevent conflicts.

      return self;
    };

    ScrollTrigger.sort = function (func) {
      if (_isFunction(func)) {
        return _triggers.sort(func);
      }

      var scroll = _win.pageYOffset || 0;
      ScrollTrigger.getAll().forEach(function (t) {
        return t._sortY = t.trigger ? scroll + t.trigger.getBoundingClientRect().top : t.start + _win.innerHeight;
      });
      return _triggers.sort(func || function (a, b) {
        return (a.vars.refreshPriority || 0) * -1e6 + (a.vars.containerAnimation ? 1e6 : a._sortY) - ((b.vars.containerAnimation ? 1e6 : b._sortY) + (b.vars.refreshPriority || 0) * -1e6);
      }); // anything with a containerAnimation should refresh last.
    };

    ScrollTrigger.observe = function (vars) {
      return new Observer(vars);
    };

    ScrollTrigger.normalizeScroll = function (vars) {
      if (typeof vars === "undefined") {
        return _normalizer;
      }

      if (vars === true && _normalizer) {
        return _normalizer.enable();
      }

      if (vars === false) {
        _normalizer && _normalizer.kill();
        _normalizer = vars;
        return;
      }

      var normalizer = vars instanceof Observer ? vars : _getScrollNormalizer(vars);
      _normalizer && _normalizer.target === normalizer.target && _normalizer.kill();
      _isViewport(normalizer.target) && (_normalizer = normalizer);
      return normalizer;
    };

    ScrollTrigger.core = {
      // smaller file size way to leverage in ScrollSmoother and Observer
      _getVelocityProp: _getVelocityProp,
      _inputObserver: _inputObserver,
      _scrollers: _scrollers,
      _proxies: _proxies,
      bridge: {
        // when normalizeScroll sets the scroll position (ss = setScroll)
        ss: function ss() {
          _lastScrollTime || _dispatch("scrollStart");
          _lastScrollTime = _getTime();
        },
        // a way to get the _refreshing value in Observer
        ref: function ref() {
          return _refreshing;
        }
      }
    };
    _getGSAP() && gsap.registerPlugin(ScrollTrigger);

    /* src/pages/Home.svelte generated by Svelte v3.59.2 */

    const { console: console_1$8 } = globals;
    const file$k = "src/pages/Home.svelte";

    function get_each_context$6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	child_ctx[22] = i;
    	return child_ctx;
    }

    function get_each_context_1$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[23] = list[i];
    	child_ctx[22] = i;
    	return child_ctx;
    }

    // (243:6) {#each services as service, i}
    function create_each_block_1$2(ctx) {
    	let servicecard;
    	let current;

    	function func() {
    		return /*func*/ ctx[13](/*service*/ ctx[23]);
    	}

    	servicecard = new ServiceCard({
    			props: {
    				svgIcon: /*service*/ ctx[23].svgIcon,
    				image: /*service*/ ctx[23].image,
    				title: /*$currentLang*/ ctx[4] === 'hu'
    				? /*service*/ ctx[23].id === 'parking'
    					? '24/7 REPÜLŐTÉRI PARKOLÁS'
    					: /*service*/ ctx[23].id === 'washing'
    						? 'AUTÓMOSÓ'
    						: /*service*/ ctx[23].id === 'tire'
    							? 'GUMISZERIVZ'
    							: 'AUTÓSZERVIZ'
    				: /*service*/ ctx[23].id === 'parking'
    					? '24/7 AIRPORT PARKING'
    					: /*service*/ ctx[23].id === 'washing'
    						? 'CAR WASH'
    						: /*service*/ ctx[23].id === 'tire'
    							? 'TIRE SERVICE'
    							: 'AUTO SERVICE',
    				description: /*$currentLang*/ ctx[4] === 'hu'
    				? /*service*/ ctx[23].id === 'parking'
    					? 'Biztonságos parkolóhelyeink 24 órás kamerás megfigyeléssel és szakértő személyzettel várják járművét, maximális biztonságot nyújtva.'
    					: /*service*/ ctx[23].id === 'washing'
    						? 'Ajándékozza meg járművét egy fürdőnappal professzionális autómosó szolgáltatásainkkal, amelyek célja, hogy autója csillogóan tisztán és fiatalon maradjon.'
    						: /*service*/ ctx[23].id === 'tire'
    							? 'Szakértő technikusaink készen állnak az abroncsokkal kapcsolatos bármilyen probléma azonnali megoldására, és biztonságosan visszatérni az útra.'
    							: 'A rutinellenőrzéstől a komplex javításokig szakképzett szerelőink fel vannak szerelve az összes karbantartás elvégzésére.'
    				: /*service*/ ctx[23].id === 'parking'
    					? 'Our secure parking facility features fenced boundaries and 24-hour camera surveillance, guaranteeing the highest security for your vehicle.'
    					: /*service*/ ctx[23].id === 'washing'
    						? 'Treat your vehicle to a spa day with our professional car washing services aimed at keeping your car looking sparkling clean and youthful.'
    						: /*service*/ ctx[23].id === 'tire'
    							? 'Our expert technicians are ready to solve any tire-related problems immediately and get you safely back on the road.'
    							: 'From routine checks to complex repairs, our qualified mechanics are equipped to perform all maintenance.',
    				index: /*i*/ ctx[22],
    				shouldAnimate: /*servicesVisible*/ ctx[1],
    				ctaText: /*$currentLang*/ ctx[4] === 'hu'
    				? 'Részletek'
    				: 'Details',
    				ctaAction: func
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(servicecard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(servicecard, target, anchor);
    			current = true;
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			const servicecard_changes = {};

    			if (dirty & /*$currentLang*/ 16) servicecard_changes.title = /*$currentLang*/ ctx[4] === 'hu'
    			? /*service*/ ctx[23].id === 'parking'
    				? '24/7 REPÜLŐTÉRI PARKOLÁS'
    				: /*service*/ ctx[23].id === 'washing'
    					? 'AUTÓMOSÓ'
    					: /*service*/ ctx[23].id === 'tire'
    						? 'GUMISZERIVZ'
    						: 'AUTÓSZERVIZ'
    			: /*service*/ ctx[23].id === 'parking'
    				? '24/7 AIRPORT PARKING'
    				: /*service*/ ctx[23].id === 'washing'
    					? 'CAR WASH'
    					: /*service*/ ctx[23].id === 'tire'
    						? 'TIRE SERVICE'
    						: 'AUTO SERVICE';

    			if (dirty & /*$currentLang*/ 16) servicecard_changes.description = /*$currentLang*/ ctx[4] === 'hu'
    			? /*service*/ ctx[23].id === 'parking'
    				? 'Biztonságos parkolóhelyeink 24 órás kamerás megfigyeléssel és szakértő személyzettel várják járművét, maximális biztonságot nyújtva.'
    				: /*service*/ ctx[23].id === 'washing'
    					? 'Ajándékozza meg járművét egy fürdőnappal professzionális autómosó szolgáltatásainkkal, amelyek célja, hogy autója csillogóan tisztán és fiatalon maradjon.'
    					: /*service*/ ctx[23].id === 'tire'
    						? 'Szakértő technikusaink készen állnak az abroncsokkal kapcsolatos bármilyen probléma azonnali megoldására, és biztonságosan visszatérni az útra.'
    						: 'A rutinellenőrzéstől a komplex javításokig szakképzett szerelőink fel vannak szerelve az összes karbantartás elvégzésére.'
    			: /*service*/ ctx[23].id === 'parking'
    				? 'Our secure parking facility features fenced boundaries and 24-hour camera surveillance, guaranteeing the highest security for your vehicle.'
    				: /*service*/ ctx[23].id === 'washing'
    					? 'Treat your vehicle to a spa day with our professional car washing services aimed at keeping your car looking sparkling clean and youthful.'
    					: /*service*/ ctx[23].id === 'tire'
    						? 'Our expert technicians are ready to solve any tire-related problems immediately and get you safely back on the road.'
    						: 'From routine checks to complex repairs, our qualified mechanics are equipped to perform all maintenance.';

    			if (dirty & /*servicesVisible*/ 2) servicecard_changes.shouldAnimate = /*servicesVisible*/ ctx[1];

    			if (dirty & /*$currentLang*/ 16) servicecard_changes.ctaText = /*$currentLang*/ ctx[4] === 'hu'
    			? 'Részletek'
    			: 'Details';

    			servicecard.$set(servicecard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(servicecard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(servicecard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(servicecard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$2.name,
    		type: "each",
    		source: "(243:6) {#each services as service, i}",
    		ctx
    	});

    	return block;
    }

    // (294:6) {#each testimonials as testimonial, i}
    function create_each_block$6(ctx) {
    	let testimonialcard;
    	let current;

    	testimonialcard = new TestimonialCard({
    			props: {
    				name: /*testimonial*/ ctx[20].name,
    				location: /*testimonial*/ ctx[20].location,
    				text: /*testimonial*/ ctx[20].text,
    				image: /*testimonial*/ ctx[20].image,
    				index: /*i*/ ctx[22],
    				isVisible: /*testimonialsVisible*/ ctx[2]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(testimonialcard.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(testimonialcard, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const testimonialcard_changes = {};
    			if (dirty & /*testimonialsVisible*/ 4) testimonialcard_changes.isVisible = /*testimonialsVisible*/ ctx[2];
    			testimonialcard.$set(testimonialcard_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(testimonialcard.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(testimonialcard.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(testimonialcard, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$6.name,
    		type: "each",
    		source: "(294:6) {#each testimonials as testimonial, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$k(ctx) {
    	let section0;
    	let div0;
    	let t0;
    	let div1;
    	let t1;
    	let div5;
    	let div2;
    	let h1;

    	let t2_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Üdvözöljük a Zima Auto Kft-nél!'
    	: 'Welcome to Zima Auto!') + "";

    	let t2;
    	let t3;
    	let p0;

    	let t4_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Ahol az autója minden igényére egy helyen kínálunk megoldást!'
    	: 'Where we offer solutions for all your car needs in one place!') + "";

    	let t4;
    	let t5;
    	let button0;

    	let t6_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'FOGLALJON MOST'
    	: 'BOOK NOW') + "";

    	let t6;
    	let t7;
    	let div4;
    	let span0;

    	let t8_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Görgessen lefelé'
    	: 'Scroll down') + "";

    	let t8;
    	let t9;
    	let div3;
    	let svg0;
    	let path0;
    	let div4_aria_label_value;
    	let t10;
    	let section1;
    	let div9;
    	let h20;

    	let t11_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'FOGLALJON HELYET'
    	: 'BOOK A SPOT') + "";

    	let t11;
    	let t12;
    	let div8;
    	let div6;
    	let img0;
    	let img0_src_value;
    	let t13;
    	let div7;
    	let p1;

    	let t14_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Foglaljon biztonságos parkolóhelyet már ma! Garantált helyek, 24/7 felügyelet, ingyenes reptéri transzfer.'
    	: 'Book your secure parking spot today! Guaranteed spaces, 24/7 surveillance, free airport transfer.') + "";

    	let t14;
    	let t15;
    	let button1;

    	let t16_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Reptéri Parkolás Foglalása'
    	: 'Book Airport Parking') + "";

    	let t16;
    	let t17;
    	let section2;
    	let div10;
    	let svg1;
    	let path1;
    	let t18;
    	let div12;
    	let h21;

    	let t19_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'SZOLGÁLTATÁSOK'
    	: 'OUR SERVICES') + "";

    	let t19;
    	let t20;
    	let p2;

    	let t21_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Fedezze fel átfogó szolgáltatásainkat, melyek az Ön járművének minden igényét kielégítik'
    	: 'Discover our comprehensive services covering all your vehicle needs in one place') + "";

    	let t21;
    	let t22;
    	let div11;
    	let t23;
    	let div13;
    	let svg2;
    	let path2;
    	let t24;
    	let section3;
    	let div17;
    	let div14;
    	let t25;
    	let div15;
    	let t26;
    	let div16;
    	let t27;
    	let div21;
    	let h22;

    	let t28_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Ügyfeleink Véleménye'
    	: 'Customer Testimonials') + "";

    	let t28;
    	let t29;
    	let div18;
    	let t30;
    	let div20;
    	let div19;
    	let a;
    	let img1;
    	let img1_src_value;
    	let t31;
    	let span1;
    	let t33;
    	let section4;
    	let div23;
    	let div22;
    	let h23;

    	let t34_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Fedezze fel versenyképes árainkat – nézze meg most!'
    	: 'Discover our competitive prices – check them out now!') + "";

    	let t34;
    	let t35;
    	let button2;

    	let t36_value = (/*$currentLang*/ ctx[4] === 'hu'
    	? 'Árlista Megtekintése'
    	: 'View Price List') + "";

    	let t36;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value_1 = /*services*/ ctx[5];
    	validate_each_argument(each_value_1);
    	let each_blocks_1 = [];

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		each_blocks_1[i] = create_each_block_1$2(get_each_context_1$2(ctx, each_value_1, i));
    	}

    	const out = i => transition_out(each_blocks_1[i], 1, 1, () => {
    		each_blocks_1[i] = null;
    	});

    	let each_value = /*testimonials*/ ctx[6];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$6(get_each_context$6(ctx, each_value, i));
    	}

    	const out_1 = i => transition_out(each_blocks[i], 1, 1, () => {
    		each_blocks[i] = null;
    	});

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			div5 = element("div");
    			div2 = element("div");
    			h1 = element("h1");
    			t2 = text(t2_value);
    			t3 = space();
    			p0 = element("p");
    			t4 = text(t4_value);
    			t5 = space();
    			button0 = element("button");
    			t6 = text(t6_value);
    			t7 = space();
    			div4 = element("div");
    			span0 = element("span");
    			t8 = text(t8_value);
    			t9 = space();
    			div3 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t10 = space();
    			section1 = element("section");
    			div9 = element("div");
    			h20 = element("h2");
    			t11 = text(t11_value);
    			t12 = space();
    			div8 = element("div");
    			div6 = element("div");
    			img0 = element("img");
    			t13 = space();
    			div7 = element("div");
    			p1 = element("p");
    			t14 = text(t14_value);
    			t15 = space();
    			button1 = element("button");
    			t16 = text(t16_value);
    			t17 = space();
    			section2 = element("section");
    			div10 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t18 = space();
    			div12 = element("div");
    			h21 = element("h2");
    			t19 = text(t19_value);
    			t20 = space();
    			p2 = element("p");
    			t21 = text(t21_value);
    			t22 = space();
    			div11 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t23 = space();
    			div13 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t24 = space();
    			section3 = element("section");
    			div17 = element("div");
    			div14 = element("div");
    			t25 = space();
    			div15 = element("div");
    			t26 = space();
    			div16 = element("div");
    			t27 = space();
    			div21 = element("div");
    			h22 = element("h2");
    			t28 = text(t28_value);
    			t29 = space();
    			div18 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t30 = space();
    			div20 = element("div");
    			div19 = element("div");
    			a = element("a");
    			img1 = element("img");
    			t31 = space();
    			span1 = element("span");
    			span1.textContent = "Google reviews widget";
    			t33 = space();
    			section4 = element("section");
    			div23 = element("div");
    			div22 = element("div");
    			h23 = element("h2");
    			t34 = text(t34_value);
    			t35 = space();
    			button2 = element("button");
    			t36 = text(t36_value);
    			attr_dev(div0, "class", "hero-background svelte-iquxxn");
    			add_location(div0, file$k, 161, 2, 18325);
    			attr_dev(div1, "class", "hero-overlay svelte-iquxxn");
    			add_location(div1, file$k, 162, 2, 18363);
    			attr_dev(h1, "class", "svelte-iquxxn");
    			add_location(h1, file$k, 165, 6, 18474);
    			attr_dev(p0, "class", "svelte-iquxxn");
    			add_location(p0, file$k, 166, 6, 18575);
    			attr_dev(button0, "class", "btn btn-primary svelte-iquxxn");
    			add_location(button0, file$k, 169, 6, 18760);
    			attr_dev(div2, "class", "hero-content svelte-iquxxn");
    			add_location(div2, file$k, 164, 4, 18441);
    			attr_dev(span0, "class", "svelte-iquxxn");
    			add_location(span0, file$k, 194, 6, 19558);
    			attr_dev(path0, "d", "M12 5v14M5 12l7 7 7-7");
    			add_location(path0, file$k, 197, 10, 19865);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "width", "24");
    			attr_dev(svg0, "height", "24");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "stroke", "currentColor");
    			attr_dev(svg0, "stroke-width", "2");
    			attr_dev(svg0, "stroke-linecap", "round");
    			attr_dev(svg0, "stroke-linejoin", "round");
    			attr_dev(svg0, "class", "svelte-iquxxn");
    			add_location(svg0, file$k, 196, 8, 19673);
    			attr_dev(div3, "class", "scroll-arrow svelte-iquxxn");
    			add_location(div3, file$k, 195, 6, 19638);
    			attr_dev(div4, "class", "scroll-down-indicator svelte-iquxxn");
    			attr_dev(div4, "tabindex", "0");
    			attr_dev(div4, "role", "button");

    			attr_dev(div4, "aria-label", div4_aria_label_value = /*$currentLang*/ ctx[4] === 'hu'
    			? 'Görgessen lefelé'
    			: 'Scroll down');

    			add_location(div4, file$k, 174, 4, 18926);
    			attr_dev(div5, "class", "container hero-container svelte-iquxxn");
    			add_location(div5, file$k, 163, 2, 18398);
    			attr_dev(section0, "class", "hero svelte-iquxxn");
    			add_location(section0, file$k, 160, 0, 18276);
    			attr_dev(h20, "class", "section-title svelte-iquxxn");
    			add_location(h20, file$k, 206, 4, 20036);
    			if (!src_url_equal(img0.src, img0_src_value = "images/zima-gate.webp")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Airport Parking");
    			attr_dev(img0, "loading", "lazy");
    			attr_dev(img0, "class", "svelte-iquxxn");
    			add_location(img0, file$k, 210, 8, 20207);
    			attr_dev(div6, "class", "booking-image svelte-iquxxn");
    			add_location(div6, file$k, 209, 6, 20171);
    			attr_dev(p1, "class", "booking-description svelte-iquxxn");
    			add_location(p1, file$k, 213, 8, 20337);
    			attr_dev(button1, "class", "btn btn-primary booking-btn svelte-iquxxn");
    			add_location(button1, file$k, 218, 9, 20662);
    			attr_dev(div7, "class", "booking-content svelte-iquxxn");
    			add_location(div7, file$k, 212, 6, 20299);
    			attr_dev(div8, "class", "booking-container svelte-iquxxn");
    			add_location(div8, file$k, 208, 4, 20133);
    			attr_dev(div9, "class", "container");
    			add_location(div9, file$k, 205, 2, 20008);
    			attr_dev(section1, "class", "booking-section svelte-iquxxn");
    			attr_dev(section1, "id", "booking");
    			add_location(section1, file$k, 204, 0, 19959);
    			attr_dev(path1, "fill", "#ffffff");
    			attr_dev(path1, "fill-opacity", "1");
    			attr_dev(path1, "d", "M0,0L1440,0L1440,0L0,0Z");
    			add_location(path1, file$k, 229, 6, 21072);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 1440 20");
    			attr_dev(svg1, "preserveAspectRatio", "none");
    			attr_dev(svg1, "class", "svelte-iquxxn");
    			add_location(svg1, file$k, 228, 4, 20976);
    			attr_dev(div10, "class", "wave-top svelte-iquxxn");
    			add_location(div10, file$k, 227, 2, 20949);
    			attr_dev(h21, "class", "section-title svelte-iquxxn");
    			add_location(h21, file$k, 234, 4, 21197);
    			attr_dev(p2, "class", "section-subtitle svelte-iquxxn");
    			add_location(p2, file$k, 235, 4, 21292);
    			attr_dev(div11, "class", "services-grid svelte-iquxxn");
    			add_location(div11, file$k, 241, 4, 21559);
    			attr_dev(div12, "class", "container");
    			add_location(div12, file$k, 233, 2, 21169);
    			attr_dev(path2, "fill", "#141a25");
    			attr_dev(path2, "fill-opacity", "1");
    			attr_dev(path2, "d", "M0,20L1440,20L1440,20L0,20Z");
    			add_location(path2, file$k, 275, 6, 23936);
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg2, "viewBox", "0 0 1440 20");
    			attr_dev(svg2, "preserveAspectRatio", "none");
    			attr_dev(svg2, "class", "svelte-iquxxn");
    			add_location(svg2, file$k, 274, 4, 23840);
    			attr_dev(div13, "class", "wave-bottom svelte-iquxxn");
    			add_location(div13, file$k, 273, 2, 23810);
    			attr_dev(section2, "class", "services-section svelte-iquxxn");
    			attr_dev(section2, "id", "services");
    			add_location(section2, file$k, 226, 0, 20897);
    			attr_dev(div14, "class", "shape shape-1 svelte-iquxxn");
    			add_location(div14, file$k, 282, 4, 24123);
    			attr_dev(div15, "class", "shape shape-2 svelte-iquxxn");
    			add_location(div15, file$k, 283, 4, 24161);
    			attr_dev(div16, "class", "shape shape-3 svelte-iquxxn");
    			add_location(div16, file$k, 284, 4, 24199);
    			attr_dev(div17, "class", "background-shapes svelte-iquxxn");
    			add_location(div17, file$k, 281, 2, 24087);
    			attr_dev(h22, "class", "section-title svelte-iquxxn");
    			add_location(h22, file$k, 288, 4, 24273);
    			attr_dev(div18, "class", "testimonials-grid svelte-iquxxn");
    			add_location(div18, file$k, 292, 4, 24396);
    			if (!src_url_equal(img1.src, img1_src_value = "https://embedsocial.com/cdn/icon/embedsocial-logo.webp")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "EmbedSocial");
    			add_location(img1, file$k, 308, 10, 25025);
    			add_location(span1, file$k, 309, 10, 25120);
    			attr_dev(a, "href", "https://embedsocial.com/google-reviews-widget/");
    			attr_dev(a, "title", "Add Google reviews on a website");
    			attr_dev(a, "target", "_blank");
    			attr_dev(a, "class", "powered-by-es es-slider");
    			add_location(a, file$k, 307, 8, 24869);
    			attr_dev(div19, "class", "embedsocial-widget");
    			attr_dev(div19, "data-ref", "0374a3cc3b883d7c92fcc25ebb3f82bc");
    			add_location(div19, file$k, 306, 6, 24784);
    			attr_dev(div20, "class", "widget-container svelte-iquxxn");
    			add_location(div20, file$k, 305, 4, 24747);
    			attr_dev(div21, "class", "container svelte-iquxxn");
    			add_location(div21, file$k, 287, 2, 24245);
    			attr_dev(section3, "class", "testimonials-section svelte-iquxxn");
    			add_location(section3, file$k, 280, 0, 24046);
    			attr_dev(h23, "class", "svelte-iquxxn");
    			add_location(h23, file$k, 319, 6, 25305);
    			attr_dev(button2, "class", "btn btn-outline svelte-iquxxn");
    			add_location(button2, file$k, 320, 6, 25458);
    			attr_dev(div22, "class", "cta-content svelte-iquxxn");
    			add_location(div22, file$k, 318, 4, 25273);
    			attr_dev(div23, "class", "container");
    			add_location(div23, file$k, 317, 2, 25245);
    			attr_dev(section4, "class", "cta-section svelte-iquxxn");
    			add_location(section4, file$k, 316, 0, 25213);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(section0, t0);
    			append_dev(section0, div1);
    			append_dev(section0, t1);
    			append_dev(section0, div5);
    			append_dev(div5, div2);
    			append_dev(div2, h1);
    			append_dev(h1, t2);
    			append_dev(div2, t3);
    			append_dev(div2, p0);
    			append_dev(p0, t4);
    			append_dev(div2, t5);
    			append_dev(div2, button0);
    			append_dev(button0, t6);
    			append_dev(div5, t7);
    			append_dev(div5, div4);
    			append_dev(div4, span0);
    			append_dev(span0, t8);
    			append_dev(div4, t9);
    			append_dev(div4, div3);
    			append_dev(div3, svg0);
    			append_dev(svg0, path0);
    			/*section0_binding*/ ctx[11](section0);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div9);
    			append_dev(div9, h20);
    			append_dev(h20, t11);
    			append_dev(div9, t12);
    			append_dev(div9, div8);
    			append_dev(div8, div6);
    			append_dev(div6, img0);
    			append_dev(div8, t13);
    			append_dev(div8, div7);
    			append_dev(div7, p1);
    			append_dev(p1, t14);
    			append_dev(div7, t15);
    			append_dev(div7, button1);
    			append_dev(button1, t16);
    			insert_dev(target, t17, anchor);
    			insert_dev(target, section2, anchor);
    			append_dev(section2, div10);
    			append_dev(div10, svg1);
    			append_dev(svg1, path1);
    			append_dev(section2, t18);
    			append_dev(section2, div12);
    			append_dev(div12, h21);
    			append_dev(h21, t19);
    			append_dev(div12, t20);
    			append_dev(div12, p2);
    			append_dev(p2, t21);
    			append_dev(div12, t22);
    			append_dev(div12, div11);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(div11, null);
    				}
    			}

    			append_dev(section2, t23);
    			append_dev(section2, div13);
    			append_dev(div13, svg2);
    			append_dev(svg2, path2);
    			insert_dev(target, t24, anchor);
    			insert_dev(target, section3, anchor);
    			append_dev(section3, div17);
    			append_dev(div17, div14);
    			append_dev(div17, t25);
    			append_dev(div17, div15);
    			append_dev(div17, t26);
    			append_dev(div17, div16);
    			append_dev(section3, t27);
    			append_dev(section3, div21);
    			append_dev(div21, h22);
    			append_dev(h22, t28);
    			append_dev(div21, t29);
    			append_dev(div21, div18);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div18, null);
    				}
    			}

    			append_dev(div21, t30);
    			append_dev(div21, div20);
    			append_dev(div20, div19);
    			append_dev(div19, a);
    			append_dev(a, img1);
    			append_dev(a, t31);
    			append_dev(a, span1);
    			insert_dev(target, t33, anchor);
    			insert_dev(target, section4, anchor);
    			append_dev(section4, div23);
    			append_dev(div23, div22);
    			append_dev(div22, h23);
    			append_dev(h23, t34);
    			append_dev(div22, t35);
    			append_dev(div22, button2);
    			append_dev(button2, t36);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*click_handler*/ ctx[8], false, false, false, false),
    					listen_dev(div4, "click", /*click_handler_1*/ ctx[9], false, false, false, false),
    					listen_dev(div4, "keydown", /*keydown_handler*/ ctx[10], false, false, false, false),
    					listen_dev(button1, "click", /*click_handler_2*/ ctx[12], false, false, false, false),
    					listen_dev(button2, "click", /*click_handler_3*/ ctx[14], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$currentLang*/ 16) && t2_value !== (t2_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Üdvözöljük a Zima Auto Kft-nél!'
    			: 'Welcome to Zima Auto!') + "")) set_data_dev(t2, t2_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t4_value !== (t4_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Ahol az autója minden igényére egy helyen kínálunk megoldást!'
    			: 'Where we offer solutions for all your car needs in one place!') + "")) set_data_dev(t4, t4_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t6_value !== (t6_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'FOGLALJON MOST'
    			: 'BOOK NOW') + "")) set_data_dev(t6, t6_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t8_value !== (t8_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Görgessen lefelé'
    			: 'Scroll down') + "")) set_data_dev(t8, t8_value);

    			if (!current || dirty & /*$currentLang*/ 16 && div4_aria_label_value !== (div4_aria_label_value = /*$currentLang*/ ctx[4] === 'hu'
    			? 'Görgessen lefelé'
    			: 'Scroll down')) {
    				attr_dev(div4, "aria-label", div4_aria_label_value);
    			}

    			if ((!current || dirty & /*$currentLang*/ 16) && t11_value !== (t11_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'FOGLALJON HELYET'
    			: 'BOOK A SPOT') + "")) set_data_dev(t11, t11_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t14_value !== (t14_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Foglaljon biztonságos parkolóhelyet már ma! Garantált helyek, 24/7 felügyelet, ingyenes reptéri transzfer.'
    			: 'Book your secure parking spot today! Guaranteed spaces, 24/7 surveillance, free airport transfer.') + "")) set_data_dev(t14, t14_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t16_value !== (t16_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Reptéri Parkolás Foglalása'
    			: 'Book Airport Parking') + "")) set_data_dev(t16, t16_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t19_value !== (t19_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'SZOLGÁLTATÁSOK'
    			: 'OUR SERVICES') + "")) set_data_dev(t19, t19_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t21_value !== (t21_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Fedezze fel átfogó szolgáltatásainkat, melyek az Ön járművének minden igényét kielégítik'
    			: 'Discover our comprehensive services covering all your vehicle needs in one place') + "")) set_data_dev(t21, t21_value);

    			if (dirty & /*services, $currentLang, servicesVisible, handleServiceAction*/ 178) {
    				each_value_1 = /*services*/ ctx[5];
    				validate_each_argument(each_value_1);
    				let i;

    				for (i = 0; i < each_value_1.length; i += 1) {
    					const child_ctx = get_each_context_1$2(ctx, each_value_1, i);

    					if (each_blocks_1[i]) {
    						each_blocks_1[i].p(child_ctx, dirty);
    						transition_in(each_blocks_1[i], 1);
    					} else {
    						each_blocks_1[i] = create_each_block_1$2(child_ctx);
    						each_blocks_1[i].c();
    						transition_in(each_blocks_1[i], 1);
    						each_blocks_1[i].m(div11, null);
    					}
    				}

    				group_outros();

    				for (i = each_value_1.length; i < each_blocks_1.length; i += 1) {
    					out(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty & /*$currentLang*/ 16) && t28_value !== (t28_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Ügyfeleink Véleménye'
    			: 'Customer Testimonials') + "")) set_data_dev(t28, t28_value);

    			if (dirty & /*testimonials, testimonialsVisible*/ 68) {
    				each_value = /*testimonials*/ ctx[6];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$6(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    						transition_in(each_blocks[i], 1);
    					} else {
    						each_blocks[i] = create_each_block$6(child_ctx);
    						each_blocks[i].c();
    						transition_in(each_blocks[i], 1);
    						each_blocks[i].m(div18, null);
    					}
    				}

    				group_outros();

    				for (i = each_value.length; i < each_blocks.length; i += 1) {
    					out_1(i);
    				}

    				check_outros();
    			}

    			if ((!current || dirty & /*$currentLang*/ 16) && t34_value !== (t34_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Fedezze fel versenyképes árainkat – nézze meg most!'
    			: 'Discover our competitive prices – check them out now!') + "")) set_data_dev(t34, t34_value);

    			if ((!current || dirty & /*$currentLang*/ 16) && t36_value !== (t36_value = (/*$currentLang*/ ctx[4] === 'hu'
    			? 'Árlista Megtekintése'
    			: 'View Price List') + "")) set_data_dev(t36, t36_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			for (let i = 0; i < each_value_1.length; i += 1) {
    				transition_in(each_blocks_1[i]);
    			}

    			for (let i = 0; i < each_value.length; i += 1) {
    				transition_in(each_blocks[i]);
    			}

    			current = true;
    		},
    		o: function outro(local) {
    			each_blocks_1 = each_blocks_1.filter(Boolean);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				transition_out(each_blocks_1[i]);
    			}

    			each_blocks = each_blocks.filter(Boolean);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				transition_out(each_blocks[i]);
    			}

    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			/*section0_binding*/ ctx[11](null);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(section1);
    			if (detaching) detach_dev(t17);
    			if (detaching) detach_dev(section2);
    			destroy_each(each_blocks_1, detaching);
    			if (detaching) detach_dev(t24);
    			if (detaching) detach_dev(section3);
    			destroy_each(each_blocks, detaching);
    			if (detaching) detach_dev(t33);
    			if (detaching) detach_dev(section4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$k.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$k($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(4, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Home', slots, []);
    	gsapWithCSS.registerPlugin(ScrollTrigger);
    	let { navigate } = $$props;
    	let lang;
    	let servicesVisible = false;
    	let testimonialsVisible = false;
    	let bookingVisible = false;
    	let ctaVisible = false;
    	let heroSection;
    	let showReviewsWidget = false;

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	// Service data with SVG icons instead of image paths
    	const services = [
    		{
    			id: 'parking',
    			svgIcon: `<svg fill="#ffffff" width="219px" height="219px" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M12,6H9A1,1,0,0,0,8,7V17a1,1,0,0,0,2,0V14h2a4,4,0,0,0,0-8Zm0,6H10V8h2a2,2,0,0,1,0,4ZM19,2H5A3,3,0,0,0,2,5V19a3,3,0,0,0,3,3H19a3,3,0,0,0,3-3V5A3,3,0,0,0,19,2Zm1,17a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1V5A1,1,0,0,1,5,4H19a1,1,0,0,1,1,1Z"></path></g></svg>`,
    			image: 'images/parking-lot.webp'
    		},
    		{
    			id: 'washing',
    			svgIcon: `<svg fill="#ffffff" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <path d="M142.25,206.819c-11.982,0.247-23.234-6.299-28.755-17.521l-2.751-5.591H62.71l1.296-5.894 c-5.764-0.319-11.242-2.802-15.533-7.128c-4.972-5.008-8.189-12.11-9.732-21.491l-14.374,65.334l0.249,60.473 C10.504,278.339,0,291.007,0,306.138c0,17.674,14.326,32,32,32h22.252c0-39.307,31.979-71.286,71.286-71.286 c12.595,0,24.428,3.297,34.707,9.052v-69.417L142.25,206.819z"></path> </g> </g> <g> <g> <path d="M301.995,74.561c-4.888-8.729-14.137-14.15-24.14-14.15H136.613c5.117,8.867,4.418,20.507,2.632,30.824h39.416 c8.615-10.736,21.831-17.628,36.636-17.628c14.804,0,28.021,6.892,36.636,17.628h24.074l50.407,90.015 c-0.493-4.596,0.054-9.945,2.447-16.113c2.611-6.727,8.117-12.181,14.736-16.29L301.995,74.561z"></path> </g> </g> <g> <g> <path d="M352.07,260.154c-3.421-4.743-6.068-9.242-8.122-13.501l-40.47,13.681c-11.896,4.025-24.553,0.473-32.751-8.072 c0,67.969,0.052,26.197,0.052,85.876h55.885c0-27.503,15.665-51.4,38.532-63.283C360.825,271.131,356.463,266.245,352.07,260.154z "></path> </g> </g> <g> <g> <path d="M490.667,275.966c0-4.949,0-10.028,0-15.137h-23.202c-11.436,0-20.706-9.27-20.706-20.706 c0-11.436,9.27-20.706,20.706-20.706h20.006c-7.529-20.927-27.547-35.896-51.066-35.896h-20.637 c3.383,11.767,5.348,26.998-1.26,39.26c-5.568,10.331-4.45,31.472-4.45,36.857c0,2.834-0.471,5.526-1.302,8.034 c34.198,5.222,60.48,34.833,60.48,70.468c3.943,0,6.995,0,10.765,0c17.672,0,32-14.328,32-32 C512,292.206,503.094,280.36,490.667,275.966z"></path> </g> </g> <g> <g> <path d="M125.539,289.327c-26.957,0.001-48.81,21.854-48.81,48.811s21.853,48.81,48.81,48.81c13.359,0,25.459-5.371,34.272-14.066 v-69.488C150.997,294.698,138.897,289.327,125.539,289.327z M125.539,357.908c-10.919,0-19.77-8.851-19.77-19.77 s8.851-19.77,19.77-19.77c10.919,0,19.77,8.851,19.77,19.77S136.458,357.908,125.539,357.908z"></path> </g> </g> <g> <g> <path d="M397.949,289.328c-26.957,0-48.81,21.853-48.81,48.81c0,26.957,21.852,48.81,48.81,48.81 c26.957,0,48.81-21.853,48.81-48.81C446.758,311.181,424.906,289.328,397.949,289.328z M397.949,357.908 c-10.919,0-19.77-8.851-19.77-19.77s8.851-19.77,19.77-19.77s19.77,8.851,19.77,19.77S408.868,357.908,397.949,357.908z"></path> </g> </g> <g> <g> <path d="M384.574,159.738c-2.448-2.26-6.1-3.212-10.227-3.212c-11.621,0-26.995,7.553-29.773,14.712 c-1.873,4.827-1.758,8.322-0.671,11.21c13.144,0.327,24.716,8.792,28.945,21.305c4.753,14.058-1.07,29.178-13.161,36.697 c1.569,3.091,3.544,6.362,6.055,9.844c8.994,12.472,16.122,16.696,20.858,16.696c4.271,0,6.597-3.434,6.597-7.353 c0-6.78-1.437-30.186,6.469-44.854C407.572,200.115,393.916,168.361,384.574,159.738z"></path> </g> </g> <g> <g> <path d="M123.24,72.004C120.8,59.525,92.948,52.038,84.177,57.639c-13.97,8.921-3.438,18.865-9.36,29.381 c-5.923,10.516-20.068,17.661-20.289,46.903c-0.154,20.329,5.579,27.099,10.73,27.099c2.259,0,4.406-1.303,5.895-3.335 c2.548-3.478,8.601-12.716,16.538-20.826l-1.148-2.332c-7.641-15.526-1.226-34.374,14.301-42.016 c6.617-3.257,14.104-4.104,21.46-2.291C123.718,82.948,124.069,76.249,123.24,72.004z"></path> </g> </g> <g> <g> <path d="M356.879,209.151c-0.001-0.003-0.002-0.007-0.003-0.01c-2.563-7.571-10.85-11.669-18.409-9.099 c-14.502,4.902-23.759,8.033-38.712,13.087c-4.507-7.356-15.44-25.202-20.63-33.671c-7.251-11.835-20.379-19.185-34.258-19.185 c-83.287,0-60.216-0.155-94.254,0.474c-4.401-8.943-18.447-37.486-22.879-46.493c-3.565-7.248-12.34-10.118-19.448-6.62 c-7.199,3.543-10.163,12.249-6.621,19.447c16.505,33.54,11.631,23.638,26.954,54.773c2.49,5.06,7.758,8.245,13.302,8.11 c37.258-0.689,34.271-0.64,35.182-0.64c0,0.256-0.435,84.692-0.435,249.492c0,9.627,7.805,17.431,17.431,17.431 c9.625,0,17.431-7.804,17.431-17.431c0-14.798,0-110.297,0-125.829h7.526c0,15.538,0,110.994,0,125.829 c0,9.627,7.805,17.431,17.431,17.431c9.627,0,17.431-7.804,17.431-17.431c0-54.87-0.049-180.103-0.051-239.359 c0-0.709,0.471-1.331,1.153-1.524c0.682-0.193,1.41,0.09,1.781,0.694c3.083,5.025,9.717,15.869,24.234,39.564 c3.537,5.771,10.603,8.352,17.041,6.174c31.192-10.545,16.238-5.49,49.694-16.801 C355.383,224.992,359.442,216.736,356.879,209.151z"></path> </g> </g> <g> <g> <circle cx="215.299" cy="120.568" r="30.709"></circle> </g> </g> </g></svg>`,
    			image: 'images/car-wash.webp'
    		},
    		{
    			id: 'tire',
    			svgIcon: `<svg fill="#ffffff" height="238px" width="238px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <g> <path d="M494.916,254.43C494.336,119.185,419.934,7.603,325.521,0.384l-0.008-0.008C322.278,0.128,319.019,0,315.742,0H196.275 C152.226,0,111.872,22.852,80.64,60.646l2.628-0.657l59.46-16.998c2.406-0.674,4.992-0.282,7.074,1.109l20.872,13.901 L191.539,44.1c2.543-1.707,5.811-1.903,8.55-0.538l29.739,14.865c-3.456,4.497-6.801,9.173-10.001,14.089l-22.946-11.469 l-21.478,14.319c-2.867,1.911-6.596,1.911-9.463,0l-22.315-14.882L87.689,76.467L64.87,82.176 c-3.072,4.736-6.007,9.643-8.823,14.703l9.097,7.441l20.19,13.423l20.873-13.909c2.867-1.92,6.596-1.92,9.463,0l20.873,13.901 l20.864-13.901c2.543-1.707,5.811-1.903,8.55-0.538l30.174,15.087c-2.116,5.231-4.105,10.615-5.982,16.094l-27.401-13.696 L141.269,135.1c-2.867,1.911-6.596,1.911-9.464,0l-20.864-13.909L90.069,135.1c-2.867,1.911-6.596,1.911-9.464,0l-25.6-17.067 l-6.972-5.7c-12.066,25.318-20.992,53.896-26.095,84.582l6.784-6.716l24.909-25.506c1.596-1.621,3.78-2.552,6.059-2.56 c2.185,0.068,4.471,0.887,6.084,2.5l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558 c3.328-3.337,8.73-3.337,12.066,0l10.761,10.761c-1.365,6.494-2.594,13.073-3.635,19.78c-0.742-0.393-1.502-0.785-2.125-1.408 l-11.034-11.034L142.575,202.3c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567L91.375,202.3 c-3.337,3.328-8.738,3.328-12.066,0L59.81,182.801l-18.978,19.43l-22.34,22.127c-0.247,2.816-0.469,5.641-0.648,8.491 l12.151,7.296l28.058,14.003L79.309,232.9c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558 c2.765-2.765,7.066-3.294,10.419-1.289l29.841,17.903c-0.034,2.159-0.094,4.309-0.094,6.485c0,4.531,0.085,9.028,0.23,13.5 l-33.05-19.831l-20.881,20.898c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-19.567,19.567 c-2.594,2.594-6.554,3.251-9.856,1.596l-34.133-17.067l-4.651-2.79c-0.009,1.237-0.06,2.458-0.06,3.695 c0,29.653,3.584,58.129,10.112,84.642l25.455-38.178c1.417-2.125,3.712-3.507,6.255-3.763c2.56-0.239,5.069,0.657,6.878,2.466 l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0 l5.717,5.709c1.109,8.738,2.526,17.306,4.19,25.702c-1.792-0.239-3.533-0.905-4.907-2.278l-11.034-11.034l-19.567,19.567 c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-19.567,19.567c-3.337,3.328-8.738,3.328-12.066,0l-18.244-18.244 L33.297,362.24c3.499,10.906,7.518,21.402,12.015,31.42l8.875-7.603l16.589-16.623c3.328-3.336,8.73-3.336,12.066,0 l19.567,19.558l19.567-19.558c3.328-3.336,8.73-3.336,12.066,0l18.236,18.236l11.298-16.939 c2.381-3.575,7.066-4.821,10.914-2.901l14.797,7.398c2.705,8.124,5.709,15.966,8.934,23.552l-24.627-12.314l-12.885,19.328 c-1.417,2.125-3.721,3.507-6.263,3.763c-2.586,0.222-5.069-0.657-6.869-2.458l-19.567-19.567L108.442,407.1 c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-11.034,11.034l-12.8,10.974c9.779,18.577,21.308,35.157,34.193,49.34 l10.948-5.478l25.156-16.768c2.867-1.92,6.596-1.92,9.463,0l20.873,13.901l20.864-13.901c2.867-1.92,6.596-1.92,9.463,0 l20.873,13.901l15.386-10.249c3.174,4.847,6.502,9.464,9.924,13.892L209.536,467.9c-2.867,1.911-6.596,1.911-9.464,0 l-20.864-13.909L158.336,467.9c-2.867,1.911-6.596,1.911-9.464,0l-20.864-13.909L107.136,467.9 c-0.29,0.196-0.597,0.375-0.913,0.529l-6.366,3.183C127.718,497.126,160.794,512,196.275,512h119.467 c2.944,0,5.939-0.119,8.969-0.35h0.009c0.213,0,0.435,0,0.649-0.017c4.198-0.324,8.644-0.939,13.508-1.835 c75.699-13.892,137.464-95.036,152.576-203.315c2.159-16.521,3.328-33.485,3.473-50.483 C494.925,255.991,494.916,254.438,494.916,254.43z M474.547,304.188c-14.319,102.519-72.149,178.671-142.14,189.278 c-2.611,0.401-5.239,0.853-7.799,1.075c-0.179-0.017-0.35-0.051-0.529-0.068c-2.492-0.247-4.966-0.597-7.424-1.05 c-0.862-0.162-1.707-0.367-2.568-0.546c-1.801-0.384-3.593-0.802-5.367-1.289c-0.939-0.265-1.877-0.538-2.807-0.828 c-1.724-0.538-3.439-1.118-5.146-1.758c-0.87-0.316-1.749-0.631-2.611-0.981c-1.963-0.794-3.9-1.656-5.828-2.577 c-0.555-0.265-1.126-0.503-1.681-0.776c-2.517-1.254-5.018-2.62-7.475-4.088c-0.299-0.179-0.58-0.384-0.879-0.563 c-2.142-1.314-4.258-2.697-6.349-4.164c-0.623-0.435-1.246-0.905-1.86-1.357c-1.792-1.306-3.567-2.662-5.316-4.079 c-0.614-0.495-1.229-0.998-1.835-1.51c-1.852-1.553-3.678-3.174-5.478-4.855c-0.427-0.393-0.853-0.776-1.28-1.178 c-6.886-6.571-13.406-14.037-19.507-22.315c-0.205-0.282-0.41-0.572-0.623-0.853c-1.852-2.551-3.678-5.171-5.453-7.868 c-0.179-0.273-0.35-0.538-0.529-0.802c-7.859-12.049-14.908-25.506-20.992-40.132c-0.401-0.973-0.802-1.937-1.195-2.918 c-1.903-4.71-3.703-9.54-5.393-14.472c-0.017-0.034-0.026-0.068-0.034-0.102c-1.69-4.915-3.268-9.933-4.745-15.053 c-0.017-0.043-0.026-0.085-0.043-0.128c-1.434-4.984-2.756-10.078-3.985-15.249c-0.111-0.461-0.213-0.939-0.324-1.399 c-1.152-4.949-2.219-9.975-3.174-15.078c-0.034-0.196-0.077-0.384-0.111-0.58c-0.947-5.103-1.775-10.3-2.517-15.539 c-0.137-0.93-0.256-1.86-0.375-2.79c-0.666-4.966-1.254-9.975-1.732-15.053c-0.026-0.29-0.06-0.58-0.085-0.879 c-0.478-5.205-0.819-10.479-1.084-15.795c-0.06-1.229-0.111-2.466-0.162-3.703c-0.222-5.35-0.367-10.726-0.367-16.162 c0-3.968,0.06-7.919,0.171-11.836c0.043-1.254,0.119-2.483,0.171-3.729c0.102-2.662,0.196-5.325,0.35-7.97 c0.102-1.647,0.247-3.268,0.367-4.907c0.162-2.202,0.299-4.42,0.495-6.613c0.179-1.963,0.41-3.9,0.614-5.854 c0.188-1.835,0.358-3.686,0.572-5.504c0.23-1.92,0.512-3.806,0.776-5.717c0.247-1.818,0.469-3.652,0.734-5.461 c0.282-1.852,0.614-3.678,0.922-5.513c0.299-1.818,0.58-3.661,0.904-5.461c0.341-1.869,0.734-3.703,1.101-5.555 c0.341-1.732,0.666-3.482,1.033-5.197c0.41-1.937,0.87-3.823,1.314-5.734c0.375-1.596,0.717-3.217,1.109-4.796 c0.478-1.946,1.007-3.857,1.519-5.777c0.401-1.502,0.777-3.029,1.195-4.514c0.538-1.903,1.118-3.763,1.681-5.632 c0.444-1.468,0.862-2.953,1.323-4.403c0.58-1.843,1.212-3.635,1.818-5.453c0.486-1.434,0.947-2.901,1.451-4.318 c0.674-1.911,1.399-3.763,2.099-5.641c0.486-1.271,0.939-2.569,1.434-3.823c0.776-1.971,1.596-3.891,2.398-5.82 c0.469-1.118,0.913-2.261,1.391-3.362c0.828-1.903,1.698-3.746,2.552-5.606c0.503-1.084,0.981-2.202,1.502-3.277 c0.862-1.818,1.775-3.575,2.671-5.35c0.546-1.067,1.058-2.159,1.613-3.208c0.922-1.749,1.877-3.448,2.833-5.154 c0.563-1.015,1.109-2.057,1.69-3.063c0.956-1.655,1.946-3.26,2.935-4.872c0.606-0.998,1.195-2.022,1.809-2.995 c1.007-1.587,2.048-3.115,3.081-4.659c0.631-0.947,1.246-1.911,1.886-2.842c1.067-1.536,2.167-3.012,3.26-4.497 c0.64-0.87,1.263-1.766,1.911-2.62c1.118-1.468,2.27-2.876,3.422-4.292c0.648-0.811,1.289-1.647,1.946-2.432 c1.178-1.399,2.381-2.731,3.584-4.079c0.666-0.742,1.314-1.519,1.988-2.244c1.203-1.297,2.44-2.534,3.678-3.78 c0.691-0.7,1.374-1.442,2.082-2.125c1.229-1.195,2.492-2.321,3.746-3.465c0.734-0.666,1.451-1.357,2.185-2.005 c1.28-1.109,2.586-2.15,3.883-3.2c0.742-0.606,1.468-1.237,2.219-1.818c1.323-1.024,2.679-1.971,4.028-2.935 c0.742-0.538,1.485-1.109,2.236-1.621c1.331-0.913,2.697-1.741,4.053-2.586c0.794-0.495,1.579-1.033,2.372-1.502 c1.357-0.802,2.739-1.527,4.113-2.261c0.819-0.444,1.63-0.913,2.449-1.331c1.391-0.7,2.807-1.314,4.216-1.954 c0.828-0.375,1.655-0.785,2.492-1.135c1.408-0.589,2.842-1.101,4.267-1.621c0.853-0.316,1.707-0.666,2.569-0.956 c1.417-0.478,2.859-0.862,4.284-1.271c0.896-0.256,1.783-0.546,2.679-0.776c1.417-0.358,2.859-0.623,4.284-0.913 c0.93-0.196,1.86-0.418,2.79-0.58c1.425-0.247,2.867-0.401,4.301-0.58c0.905-0.111,1.792-0.256,2.697-0.333 c85.248,7.1,152.329,110.993,152.866,236.851l0.009,1.604C477.722,272.171,476.604,288.427,474.547,304.188z"></path> <path d="M252.855,151.971c-0.282-0.273-0.538-0.572-0.785-0.887l-3.081-4.019c-11.708,30.541-18.586,67.959-18.586,108.928 c0,40.747,6.801,77.995,18.389,108.442l3.763-4.105c17.493-17.263,29.047-59.076,29.047-104.337 C281.604,210.74,270.05,168.927,252.855,151.971z"></path> <path d="M332.806,68.262c-30.49,0-57.378,23.39-75.981,60.954l8.448,11.042c20.309,20.48,33.399,65.784,33.399,115.738 c0,50.313-13.278,95.906-33.835,116.173l-8.61,9.404c18.62,38.272,45.764,62.157,76.578,62.157 c57.421,0,102.4-82.458,102.4-187.733S390.227,68.262,332.806,68.262z"></path> </g> </g> </g> </g></svg>`,
    			image: 'images/merc-tyre.webp'
    		},
    		{
    			id: 'service',
    			svgIcon: `<svg fill="#ffffff" width="223px" height="223px" viewBox="0 0 15 15" xmlns="http://www.w3.org/2000/svg" id="car-repair"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <path d="M12.6,8.7,11.5,6.5a1.05,1.05,0,0,0-.9-.5H4.4a1.05,1.05,0,0,0-.9.5L2.4,8.7,1.16,9.852a.5.5,0,0,0-.16.367V14.5a.5.5,0,0,0,.5.5h2c.2,0,.5-.2.5-.4V14h7v.5c0,.2.2.5.4.5h2.1a.5.5,0,0,0,.5-.5V10.219a.5.5,0,0,0-.16-.367ZM4.5,7h6l1,2h-8ZM5,11.6c0,.2-.3.4-.5.4H2.4c-.2,0-.4-.3-.4-.5V10.4c.1-.3.3-.5.6-.4l2,.4c.2,0,.4.3.4.5Zm8-.1c0,.2-.2.5-.4.5H10.5c-.2,0-.5-.2-.5-.4v-.7c0-.2.2-.5.4-.5l2-.4c.3-.1.5.1.6.4ZM14,2V3a1.009,1.009,0,0,1-1.017,1H5.348A2.549,2.549,0,0,1,1,3.5H3.5v-2H1A2.549,2.549,0,0,1,5.348,1h7.635A1.009,1.009,0,0,1,14,2Z"></path> </g></svg>`,
    			image: 'images/workshop.webp'
    		}
    	];

    	// Testimonial data
    	const testimonials = [
    		{
    			id: 1,
    			name: 'Csilla Demcsák',
    			location: '',
    			text: 'Nagyon profik. Fiatalok, energikusak, jó áron dolgoznak! Nagyon szép és kényelmes volt, hogy a javítást, a gumijavítást és az autótisztítást egyben elvégezhettem.',
    			image: null
    		},
    		{
    			id: 2,
    			name: 'Helyi idegenvezető',
    			location: '',
    			text: 'Minden dicséret a tulajnak, kivitt minket a reptérre és vissza a parkolóba. Problémánk volt az autón a kerékkel, amit a tulajdonos segítségével megoldottunk. Még egyszer köszönöm és minden ajánlást ehhez a parkolóhoz.',
    			image: null
    		},
    		{
    			id: 3,
    			name: 'Kubilay Öztürk',
    			location: '',
    			text: 'Minden gördülékeny volt, ajánlom őket!!',
    			image: null
    		}
    	];

    	// Handler for service card CTA buttons
    	function handleServiceAction(serviceId) {
    		// Navigate to services section
    		navigate('services');
    	} // Note: Scrolling to specific service ID after navigating to #services
    	// might require additional logic depending on your routing setup.

    	// The navigate function likely handles scrolling to the main #services anchor.
    	function toggleReviewsWidget() {
    		showReviewsWidget = !showReviewsWidget;
    	}

    	onMount(() => {
    		// Debug logging
    		console.log('Component mounted');

    		// Load EmbedSocial script
    		const script = document.createElement('script');

    		script.id = 'EmbedSocialWidgetScript';
    		script.src = 'https://embedsocial.com/cdn/aht.js';
    		document.head.appendChild(script);

    		// Setup parallax effect for hero section
    		// Setup animations with ScrollTrigger
    		// Booking section animation
    		gsapWithCSS.from('.booking-container', {
    			y: 50,
    			opacity: 0,
    			duration: 0.8,
    			scrollTrigger: {
    				trigger: '.booking-section',
    				start: 'top 80%',
    				onEnter: () => {
    					bookingVisible = true;
    				}
    			}
    		});

    		// Services section animation (handled by the shouldAnimate prop)
    		const servicesSection = document.querySelector('.services-section');

    		if (servicesSection) {
    			ScrollTrigger.create({
    				trigger: servicesSection,
    				start: 'top 70%',
    				onEnter: () => {
    					$$invalidate(1, servicesVisible = true);
    				}
    			});
    		}

    		// Testimonials section animation
    		const testimonialsSection = document.querySelector('.testimonials-section');

    		if (testimonialsSection) {
    			ScrollTrigger.create({
    				trigger: testimonialsSection,
    				start: 'top 70%',
    				onEnter: () => {
    					$$invalidate(2, testimonialsVisible = true);
    				}
    			});
    		}

    		// CTA section animation
    		gsapWithCSS.from('.cta-content', {
    			y: 30,
    			opacity: 0,
    			duration: 0.8,
    			scrollTrigger: {
    				trigger: '.cta-section',
    				start: 'top 80%',
    				onEnter: () => {
    					ctaVisible = true;
    				}
    			}
    		});
    	});

    	$$self.$$.on_mount.push(function () {
    		if (navigate === undefined && !('navigate' in $$props || $$self.$$.bound[$$self.$$.props['navigate']])) {
    			console_1$8.warn("<Home> was created without expected prop 'navigate'");
    		}
    	});

    	const writable_props = ['navigate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$8.warn(`<Home> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => navigate('booking');

    	const click_handler_1 = () => {
    		const nextSection = document.querySelector('.booking-section');

    		if (nextSection) {
    			nextSection.scrollIntoView({ behavior: 'smooth' });
    		}
    	};

    	const keydown_handler = e => {
    		if (e.key === 'Enter') {
    			const nextSection = document.querySelector('.booking-section');

    			if (nextSection) {
    				nextSection.scrollIntoView({ behavior: 'smooth' });
    			}
    		}
    	};

    	function section0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			heroSection = $$value;
    			$$invalidate(3, heroSection);
    		});
    	}

    	const click_handler_2 = () => navigate('booking');
    	const func = service => handleServiceAction(service.id);
    	const click_handler_3 = () => navigate('services');

    	$$self.$$set = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		slide,
    		currentLang,
    		t,
    		ServiceCard,
    		TestimonialCard,
    		gsap: gsapWithCSS,
    		ScrollTrigger,
    		navigate,
    		lang,
    		servicesVisible,
    		testimonialsVisible,
    		bookingVisible,
    		ctaVisible,
    		heroSection,
    		showReviewsWidget,
    		services,
    		testimonials,
    		handleServiceAction,
    		toggleReviewsWidget,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('navigate' in $$props) $$invalidate(0, navigate = $$props.navigate);
    		if ('lang' in $$props) lang = $$props.lang;
    		if ('servicesVisible' in $$props) $$invalidate(1, servicesVisible = $$props.servicesVisible);
    		if ('testimonialsVisible' in $$props) $$invalidate(2, testimonialsVisible = $$props.testimonialsVisible);
    		if ('bookingVisible' in $$props) bookingVisible = $$props.bookingVisible;
    		if ('ctaVisible' in $$props) ctaVisible = $$props.ctaVisible;
    		if ('heroSection' in $$props) $$invalidate(3, heroSection = $$props.heroSection);
    		if ('showReviewsWidget' in $$props) showReviewsWidget = $$props.showReviewsWidget;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		navigate,
    		servicesVisible,
    		testimonialsVisible,
    		heroSection,
    		$currentLang,
    		services,
    		testimonials,
    		handleServiceAction,
    		click_handler,
    		click_handler_1,
    		keydown_handler,
    		section0_binding,
    		click_handler_2,
    		func,
    		click_handler_3
    	];
    }

    class Home extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$k, create_fragment$k, safe_not_equal, { navigate: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Home",
    			options,
    			id: create_fragment$k.name
    		});
    	}

    	get navigate() {
    		throw new Error("<Home>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigate(value) {
    		throw new Error("<Home>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/VideoPlayer.svelte generated by Svelte v3.59.2 */

    const { console: console_1$7 } = globals;
    const file$j = "src/components/VideoPlayer.svelte";

    // (96:2) {#if isModalOpen}
    function create_if_block$g(ctx) {
    	let div1;
    	let div0;
    	let button;
    	let svg;
    	let path0;
    	let path1;
    	let t0;
    	let video;
    	let source;
    	let source_src_value;
    	let track;
    	let track_src_value;
    	let t1;
    	let div0_transition;
    	let div1_transition;
    	let current;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t0 = space();
    			video = element("video");
    			source = element("source");
    			track = element("track");
    			t1 = text("\n          Your browser does not support the video tag.");
    			attr_dev(path0, "d", "M18 6L6 18");
    			add_location(path0, file$j, 117, 12, 3044);
    			attr_dev(path1, "d", "M6 6l12 12");
    			add_location(path1, file$j, 118, 12, 3085);
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke-linecap", "round");
    			attr_dev(svg, "stroke-linejoin", "round");
    			attr_dev(svg, "class", "svelte-hmqhtt");
    			add_location(svg, file$j, 116, 10, 2908);
    			attr_dev(button, "class", "close-button svelte-hmqhtt");
    			attr_dev(button, "aria-label", "Close video");
    			add_location(button, file$j, 111, 8, 2782);
    			if (!src_url_equal(source.src, source_src_value = /*videoSrc*/ ctx[0])) attr_dev(source, "src", source_src_value);
    			attr_dev(source, "type", "video/mp4");
    			add_location(source, file$j, 130, 10, 3358);
    			attr_dev(track, "kind", "captions");
    			if (!src_url_equal(track.src, track_src_value = "")) attr_dev(track, "src", track_src_value);
    			attr_dev(track, "label", "English");
    			attr_dev(track, "srclang", "en");
    			add_location(track, file$j, 131, 10, 3411);
    			attr_dev(video, "class", "video-element svelte-hmqhtt");
    			video.controls = true;
    			attr_dev(video, "preload", "metadata");
    			attr_dev(video, "poster", /*thumbnailSrc*/ ctx[1]);
    			video.playsInline = true;
    			add_location(video, file$j, 122, 8, 3166);
    			attr_dev(div0, "class", "modal-content svelte-hmqhtt");
    			attr_dev(div0, "role", "dialog");
    			add_location(div0, file$j, 103, 6, 2547);
    			attr_dev(div1, "class", "modal-overlay svelte-hmqhtt");
    			attr_dev(div1, "role", "presentation");
    			add_location(div1, file$j, 96, 4, 2358);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(div0, t0);
    			append_dev(div0, video);
    			append_dev(video, source);
    			append_dev(video, track);
    			append_dev(video, t1);
    			/*video_binding*/ ctx[11](video);
    			/*div0_binding*/ ctx[12](div0);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(button, "click", /*closeModal*/ ctx[6], false, false, false, false),
    					listen_dev(div0, "click", stop_propagation(/*click_handler*/ ctx[8]), false, false, true, false),
    					listen_dev(div0, "keydown", stop_propagation(/*keydown_handler*/ ctx[9]), false, false, true, false),
    					listen_dev(div1, "click", /*handleClickOutside*/ ctx[7], false, false, false, false),
    					listen_dev(div1, "keydown", /*handleClickOutside*/ ctx[7], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (!current || dirty & /*videoSrc*/ 1 && !src_url_equal(source.src, source_src_value = /*videoSrc*/ ctx[0])) {
    				attr_dev(source, "src", source_src_value);
    			}

    			if (!current || dirty & /*thumbnailSrc*/ 2) {
    				attr_dev(video, "poster", /*thumbnailSrc*/ ctx[1]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!current) return;
    				if (!div0_transition) div0_transition = create_bidirectional_transition(div0, scale, { duration: 300, start: 0.9 }, true);
    				div0_transition.run(1);
    			});

    			add_render_callback(() => {
    				if (!current) return;
    				if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, { duration: 250 }, true);
    				div1_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!div0_transition) div0_transition = create_bidirectional_transition(div0, scale, { duration: 300, start: 0.9 }, false);
    			div0_transition.run(0);
    			if (!div1_transition) div1_transition = create_bidirectional_transition(div1, fade, { duration: 250 }, false);
    			div1_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			/*video_binding*/ ctx[11](null);
    			/*div0_binding*/ ctx[12](null);
    			if (detaching && div0_transition) div0_transition.end();
    			if (detaching && div1_transition) div1_transition.end();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$g.name,
    		type: "if",
    		source: "(96:2) {#if isModalOpen}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$j(ctx) {
    	let div3;
    	let div2;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let div0;
    	let svg;
    	let path;
    	let t1;
    	let if_block_anchor;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block = /*isModalOpen*/ ctx[2] && create_if_block$g(ctx);

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t1 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			if (!src_url_equal(img.src, img_src_value = /*thumbnailSrc*/ ctx[1])) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Video thumbnail");
    			attr_dev(img, "class", "thumbnail-image svelte-hmqhtt");
    			attr_dev(img, "loading", "lazy");
    			add_location(img, file$j, 78, 6, 1944);
    			attr_dev(path, "d", "M8 5v14l11-7z");
    			add_location(path, file$j, 88, 12, 2234);
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "currentColor");
    			attr_dev(svg, "aria-hidden", "true");
    			attr_dev(svg, "class", "svelte-hmqhtt");
    			add_location(svg, file$j, 87, 10, 2157);
    			attr_dev(div0, "class", "play-button svelte-hmqhtt");
    			add_location(div0, file$j, 86, 8, 2121);
    			attr_dev(div1, "class", "play-overlay svelte-hmqhtt");
    			add_location(div1, file$j, 85, 6, 2086);
    			attr_dev(div2, "class", "thumbnail-wrapper svelte-hmqhtt");
    			attr_dev(div2, "role", "button");
    			attr_dev(div2, "tabindex", "0");
    			attr_dev(div2, "aria-label", "Play video");
    			add_location(div2, file$j, 70, 4, 1739);
    			attr_dev(div3, "class", "video-thumbnail svelte-hmqhtt");
    			add_location(div3, file$j, 69, 2, 1705);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			insert_dev(target, t1, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "click", /*openModal*/ ctx[5], false, false, false, false),
    					listen_dev(div2, "keydown", /*keydown_handler_1*/ ctx[10], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*thumbnailSrc*/ 2 && !src_url_equal(img.src, img_src_value = /*thumbnailSrc*/ ctx[1])) {
    				attr_dev(img, "src", img_src_value);
    			}

    			if (/*isModalOpen*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);

    					if (dirty & /*isModalOpen*/ 4) {
    						transition_in(if_block, 1);
    					}
    				} else {
    					if_block = create_if_block$g(ctx);
    					if_block.c();
    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				group_outros();

    				transition_out(if_block, 1, 1, () => {
    					if_block = null;
    				});

    				check_outros();
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			if (detaching) detach_dev(t1);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$j.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$j($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('VideoPlayer', slots, []);
    	let { videoSrc = "/zima_video.mp4" } = $$props;
    	let { thumbnailSrc = "/images/zima-gate.JPG" } = $$props;

    	// State
    	let isModalOpen = false;

    	let videoRef;
    	let modalContentRef;

    	function openModal() {
    		$$invalidate(2, isModalOpen = true);
    		document.body.style.overflow = 'hidden';

    		// Initialize video when modal opens
    		setTimeout(
    			() => {
    				if (videoRef) {
    					$$invalidate(3, videoRef.currentTime = 0, videoRef);

    					try {
    						const playPromise = videoRef.play();

    						if (playPromise !== undefined) {
    							playPromise.catch(error => {
    								console.warn('Autoplay prevented, waiting for user interaction');
    							});
    						}
    					} catch(error) {
    						console.warn('Error attempting to play video:', error);
    					}
    				}
    			},
    			300
    		);
    	}

    	function closeModal() {
    		$$invalidate(2, isModalOpen = false);

    		if (videoRef) {
    			videoRef.pause();
    			$$invalidate(3, videoRef.currentTime = 0, videoRef);
    		}

    		document.body.style.overflow = '';
    	}

    	function handleClickOutside(event) {
    		if (modalContentRef && !modalContentRef.contains(event.target)) {
    			closeModal();
    		}
    	}

    	function handleEscKey(e) {
    		if (e.key === 'Escape' && isModalOpen) {
    			closeModal();
    		}
    	}

    	onMount(() => {
    		document.addEventListener('keydown', handleEscKey);
    	});

    	onDestroy(() => {
    		document.removeEventListener('keydown', handleEscKey);
    		document.body.style.overflow = '';
    	});

    	const writable_props = ['videoSrc', 'thumbnailSrc'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$7.warn(`<VideoPlayer> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	function keydown_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	const keydown_handler_1 = e => e.key === 'Enter' && openModal();

    	function video_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			videoRef = $$value;
    			$$invalidate(3, videoRef);
    		});
    	}

    	function div0_binding($$value) {
    		binding_callbacks[$$value ? 'unshift' : 'push'](() => {
    			modalContentRef = $$value;
    			$$invalidate(4, modalContentRef);
    		});
    	}

    	$$self.$$set = $$props => {
    		if ('videoSrc' in $$props) $$invalidate(0, videoSrc = $$props.videoSrc);
    		if ('thumbnailSrc' in $$props) $$invalidate(1, thumbnailSrc = $$props.thumbnailSrc);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		onDestroy,
    		fade,
    		scale,
    		videoSrc,
    		thumbnailSrc,
    		isModalOpen,
    		videoRef,
    		modalContentRef,
    		openModal,
    		closeModal,
    		handleClickOutside,
    		handleEscKey
    	});

    	$$self.$inject_state = $$props => {
    		if ('videoSrc' in $$props) $$invalidate(0, videoSrc = $$props.videoSrc);
    		if ('thumbnailSrc' in $$props) $$invalidate(1, thumbnailSrc = $$props.thumbnailSrc);
    		if ('isModalOpen' in $$props) $$invalidate(2, isModalOpen = $$props.isModalOpen);
    		if ('videoRef' in $$props) $$invalidate(3, videoRef = $$props.videoRef);
    		if ('modalContentRef' in $$props) $$invalidate(4, modalContentRef = $$props.modalContentRef);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		videoSrc,
    		thumbnailSrc,
    		isModalOpen,
    		videoRef,
    		modalContentRef,
    		openModal,
    		closeModal,
    		handleClickOutside,
    		click_handler,
    		keydown_handler,
    		keydown_handler_1,
    		video_binding,
    		div0_binding
    	];
    }

    class VideoPlayer extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$j, create_fragment$j, safe_not_equal, { videoSrc: 0, thumbnailSrc: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "VideoPlayer",
    			options,
    			id: create_fragment$j.name
    		});
    	}

    	get videoSrc() {
    		throw new Error("<VideoPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set videoSrc(value) {
    		throw new Error("<VideoPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get thumbnailSrc() {
    		throw new Error("<VideoPlayer>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set thumbnailSrc(value) {
    		throw new Error("<VideoPlayer>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/pages/About.svelte generated by Svelte v3.59.2 */
    const file$i = "src/pages/About.svelte";

    function get_each_context$5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[3] = list[i];
    	return child_ctx;
    }

    // (225:16) {:else}
    function create_else_block$9(ctx) {
    	let t_1_value = /*item*/ ctx[3] + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			t_1 = text(t_1_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t_1, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$currentLang*/ 1 && t_1_value !== (t_1_value = /*item*/ ctx[3] + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t_1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$9.name,
    		type: "else",
    		source: "(225:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (223:16) {#if $currentLang === 'hu'}
    function create_if_block$f(ctx) {
    	let html_tag;
    	let raw_value = /*item*/ ctx[3].replace(/\n/g, '<br><br>') + "";
    	let html_anchor;

    	const block = {
    		c: function create() {
    			html_tag = new HtmlTag(false);
    			html_anchor = empty();
    			html_tag.a = html_anchor;
    		},
    		m: function mount(target, anchor) {
    			html_tag.m(raw_value, target, anchor);
    			insert_dev(target, html_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$currentLang*/ 1 && raw_value !== (raw_value = /*item*/ ctx[3].replace(/\n/g, '<br><br>') + "")) html_tag.p(raw_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(html_anchor);
    			if (detaching) html_tag.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$f.name,
    		type: "if",
    		source: "(223:16) {#if $currentLang === 'hu'}",
    		ctx
    	});

    	return block;
    }

    // (221:12) {#each content[$currentLang].offerings.block1.listItems as item}
    function create_each_block$5(ctx) {
    	let li;
    	let t_1;

    	function select_block_type(ctx, dirty) {
    		if (/*$currentLang*/ ctx[0] === 'hu') return create_if_block$f;
    		return create_else_block$9;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			li = element("li");
    			if_block.c();
    			t_1 = space();
    			attr_dev(li, "class", "svelte-19mr3sz");
    			add_location(li, file$i, 221, 14, 11531);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			if_block.m(li, null);
    			append_dev(li, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(li, t_1);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$5.name,
    		type: "each",
    		source: "(221:12) {#each content[$currentLang].offerings.block1.listItems as item}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$i(ctx) {
    	let section0;
    	let div0;
    	let h1;
    	let t0_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].title + "";
    	let t0;
    	let t1;
    	let p0;
    	let t2_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].subtitle + "";
    	let t2;
    	let t3;
    	let div20;
    	let section1;
    	let div4;
    	let div3;
    	let div1;
    	let h20;
    	let t4_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].story.title + "";
    	let t4;
    	let t5;
    	let p1;
    	let t6_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].story.text + "";
    	let t6;
    	let t7;
    	let div2;
    	let img0;
    	let img0_src_value;
    	let t8;
    	let section2;
    	let div8;
    	let div7;
    	let div5;
    	let img1;
    	let img1_src_value;
    	let t9;
    	let div6;
    	let h21;
    	let t10_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].mission.title + "";
    	let t10;
    	let t11;
    	let p2;
    	let t12_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].mission.text + "";
    	let t12;
    	let t13;
    	let section3;
    	let div11;
    	let h22;
    	let t14_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].values.title + "";
    	let t14;
    	let t15;
    	let div10;
    	let div9;
    	let videoplayer;
    	let t16;
    	let p3;
    	let t17_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].values.videoCaption + "";
    	let t17;
    	let t18;
    	let section4;
    	let div18;
    	let h23;
    	let t19_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.mainTitle + "";
    	let t19;
    	let t20;
    	let div14;
    	let div12;
    	let h30;
    	let t21_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.title + "";
    	let t21;
    	let t22;
    	let p4;
    	let t23_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.text + "";
    	let t23;
    	let t24;
    	let ul;
    	let t25;
    	let div13;
    	let img2;
    	let img2_src_value;
    	let t26;
    	let div17;
    	let div15;
    	let img3;
    	let img3_src_value;
    	let t27;
    	let div16;
    	let h31;
    	let t28_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.paymentOptionsTitle + "";
    	let t28;
    	let t29;
    	let p5;
    	let t30_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.paymentOptionsText + "";
    	let t30;
    	let t31;
    	let h32;
    	let t32_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.pricesTitle + "";
    	let t32;
    	let t33;
    	let p6;
    	let t34_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.pricesText + "";
    	let t34;
    	let t35;
    	let p7;
    	let raw_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.conclusion.replace(/\n/g, '<br><br>') + "";
    	let t36;
    	let section5;
    	let div19;
    	let a;
    	let t37_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].cta + "";
    	let t37;
    	let current;

    	videoplayer = new VideoPlayer({
    			props: {
    				videoSrc: "/zima_video.mp4",
    				thumbnailSrc: "/images/zima-gate.webp"
    			},
    			$$inline: true
    		});

    	let each_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.listItems;
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$5(get_each_context$5(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p0 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			div20 = element("div");
    			section1 = element("section");
    			div4 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			h20 = element("h2");
    			t4 = text(t4_value);
    			t5 = space();
    			p1 = element("p");
    			t6 = text(t6_value);
    			t7 = space();
    			div2 = element("div");
    			img0 = element("img");
    			t8 = space();
    			section2 = element("section");
    			div8 = element("div");
    			div7 = element("div");
    			div5 = element("div");
    			img1 = element("img");
    			t9 = space();
    			div6 = element("div");
    			h21 = element("h2");
    			t10 = text(t10_value);
    			t11 = space();
    			p2 = element("p");
    			t12 = text(t12_value);
    			t13 = space();
    			section3 = element("section");
    			div11 = element("div");
    			h22 = element("h2");
    			t14 = text(t14_value);
    			t15 = space();
    			div10 = element("div");
    			div9 = element("div");
    			create_component(videoplayer.$$.fragment);
    			t16 = space();
    			p3 = element("p");
    			t17 = text(t17_value);
    			t18 = space();
    			section4 = element("section");
    			div18 = element("div");
    			h23 = element("h2");
    			t19 = text(t19_value);
    			t20 = space();
    			div14 = element("div");
    			div12 = element("div");
    			h30 = element("h3");
    			t21 = text(t21_value);
    			t22 = space();
    			p4 = element("p");
    			t23 = text(t23_value);
    			t24 = space();
    			ul = element("ul");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t25 = space();
    			div13 = element("div");
    			img2 = element("img");
    			t26 = space();
    			div17 = element("div");
    			div15 = element("div");
    			img3 = element("img");
    			t27 = space();
    			div16 = element("div");
    			h31 = element("h3");
    			t28 = text(t28_value);
    			t29 = space();
    			p5 = element("p");
    			t30 = text(t30_value);
    			t31 = space();
    			h32 = element("h3");
    			t32 = text(t32_value);
    			t33 = space();
    			p6 = element("p");
    			t34 = text(t34_value);
    			t35 = space();
    			p7 = element("p");
    			t36 = space();
    			section5 = element("section");
    			div19 = element("div");
    			a = element("a");
    			t37 = text(t37_value);
    			attr_dev(h1, "class", "svelte-19mr3sz");
    			add_location(h1, file$i, 161, 4, 9576);
    			attr_dev(p0, "class", "svelte-19mr3sz");
    			add_location(p0, file$i, 162, 4, 9619);
    			attr_dev(div0, "class", "container");
    			add_location(div0, file$i, 160, 2, 9548);
    			attr_dev(section0, "class", "about-hero svelte-19mr3sz");
    			add_location(section0, file$i, 159, 0, 9517);
    			attr_dev(h20, "class", "svelte-19mr3sz");
    			add_location(h20, file$i, 171, 10, 9863);
    			attr_dev(p1, "class", "svelte-19mr3sz");
    			add_location(p1, file$i, 172, 10, 9918);
    			attr_dev(div1, "class", "about-content svelte-19mr3sz");
    			add_location(div1, file$i, 170, 8, 9825);
    			if (!src_url_equal(img0.src, img0_src_value = "images/parking-lot.webp")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Zima Auto parking lot");
    			attr_dev(img0, "class", "svelte-19mr3sz");
    			add_location(img0, file$i, 175, 10, 10019);
    			attr_dev(div2, "class", "about-image svelte-19mr3sz");
    			add_location(div2, file$i, 174, 8, 9983);
    			attr_dev(div3, "class", "about-grid svelte-19mr3sz");
    			add_location(div3, file$i, 169, 6, 9792);
    			attr_dev(div4, "class", "container");
    			add_location(div4, file$i, 168, 4, 9762);
    			attr_dev(section1, "class", "about-section story-section svelte-19mr3sz");
    			add_location(section1, file$i, 167, 2, 9712);
    			if (!src_url_equal(img1.src, img1_src_value = "images/map.avif")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Car Wash Service");
    			attr_dev(img1, "class", "svelte-19mr3sz");
    			add_location(img1, file$i, 185, 10, 10299);
    			attr_dev(div5, "class", "about-image svelte-19mr3sz");
    			add_location(div5, file$i, 184, 8, 10263);
    			attr_dev(h21, "class", "svelte-19mr3sz");
    			add_location(h21, file$i, 188, 10, 10413);
    			attr_dev(p2, "class", "svelte-19mr3sz");
    			add_location(p2, file$i, 189, 10, 10470);
    			attr_dev(div6, "class", "about-content svelte-19mr3sz");
    			add_location(div6, file$i, 187, 8, 10375);
    			attr_dev(div7, "class", "about-grid reverse svelte-19mr3sz");
    			add_location(div7, file$i, 183, 6, 10222);
    			attr_dev(div8, "class", "container");
    			add_location(div8, file$i, 182, 4, 10192);
    			attr_dev(section2, "class", "about-section mission-section svelte-19mr3sz");
    			add_location(section2, file$i, 181, 2, 10140);
    			attr_dev(h22, "class", "section-title svelte-19mr3sz");
    			add_location(h22, file$i, 197, 6, 10650);
    			attr_dev(div9, "class", "video-container svelte-19mr3sz");
    			add_location(div9, file$i, 200, 8, 10775);
    			attr_dev(p3, "class", "video-caption svelte-19mr3sz");
    			add_location(p3, file$i, 206, 8, 10956);
    			attr_dev(div10, "class", "video-section-wrapper svelte-19mr3sz");
    			add_location(div10, file$i, 199, 6, 10731);
    			attr_dev(div11, "class", "container");
    			add_location(div11, file$i, 196, 4, 10620);
    			attr_dev(section3, "class", "about-section values-section svelte-19mr3sz");
    			add_location(section3, file$i, 195, 2, 10569);
    			attr_dev(h23, "class", "section-title svelte-19mr3sz");
    			add_location(h23, file$i, 213, 6, 11153);
    			attr_dev(h30, "class", "svelte-19mr3sz");
    			add_location(h30, file$i, 217, 10, 11306);
    			attr_dev(p4, "class", "svelte-19mr3sz");
    			add_location(p4, file$i, 218, 10, 11372);
    			attr_dev(ul, "class", "svelte-19mr3sz");
    			add_location(ul, file$i, 219, 10, 11435);
    			attr_dev(div12, "class", "about-content svelte-19mr3sz");
    			add_location(div12, file$i, 216, 8, 11268);
    			if (!src_url_equal(img2.src, img2_src_value = "images/workshop2.jpg")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Auto Service");
    			attr_dev(img2, "class", "svelte-19mr3sz");
    			add_location(img2, file$i, 232, 10, 11824);
    			attr_dev(div13, "class", "about-image svelte-19mr3sz");
    			add_location(div13, file$i, 231, 8, 11788);
    			attr_dev(div14, "class", "about-grid svelte-19mr3sz");
    			add_location(div14, file$i, 215, 6, 11235);
    			if (!src_url_equal(img3.src, img3_src_value = "images/car-wash.webp")) attr_dev(img3, "src", img3_src_value);
    			attr_dev(img3, "alt", "Car Wash");
    			attr_dev(img3, "class", "svelte-19mr3sz");
    			add_location(img3, file$i, 238, 10, 11990);
    			attr_dev(div15, "class", "about-image svelte-19mr3sz");
    			add_location(div15, file$i, 237, 8, 11954);
    			attr_dev(h31, "class", "svelte-19mr3sz");
    			add_location(h31, file$i, 241, 10, 12101);
    			attr_dev(p5, "class", "svelte-19mr3sz");
    			add_location(p5, file$i, 242, 10, 12181);
    			attr_dev(h32, "class", "svelte-19mr3sz");
    			add_location(h32, file$i, 244, 10, 12259);
    			attr_dev(p6, "class", "svelte-19mr3sz");
    			add_location(p6, file$i, 245, 10, 12331);
    			attr_dev(p7, "class", "svelte-19mr3sz");
    			add_location(p7, file$i, 247, 10, 12401);
    			attr_dev(div16, "class", "about-content svelte-19mr3sz");
    			add_location(div16, file$i, 240, 8, 12063);
    			attr_dev(div17, "class", "about-grid reverse svelte-19mr3sz");
    			add_location(div17, file$i, 236, 6, 11913);
    			attr_dev(div18, "class", "container");
    			add_location(div18, file$i, 212, 4, 11123);
    			attr_dev(section4, "class", "about-section offerings-section svelte-19mr3sz");
    			add_location(section4, file$i, 211, 2, 11069);
    			attr_dev(a, "href", "/services");
    			attr_dev(a, "class", "btn btn-primary svelte-19mr3sz");
    			add_location(a, file$i, 255, 6, 12610);
    			attr_dev(div19, "class", "container");
    			add_location(div19, file$i, 254, 4, 12580);
    			attr_dev(section5, "class", "about-cta svelte-19mr3sz");
    			add_location(section5, file$i, 253, 2, 12548);
    			attr_dev(div20, "class", "about-container svelte-19mr3sz");
    			add_location(div20, file$i, 166, 0, 9680);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, p0);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div20, anchor);
    			append_dev(div20, section1);
    			append_dev(section1, div4);
    			append_dev(div4, div3);
    			append_dev(div3, div1);
    			append_dev(div1, h20);
    			append_dev(h20, t4);
    			append_dev(div1, t5);
    			append_dev(div1, p1);
    			append_dev(p1, t6);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, img0);
    			append_dev(div20, t8);
    			append_dev(div20, section2);
    			append_dev(section2, div8);
    			append_dev(div8, div7);
    			append_dev(div7, div5);
    			append_dev(div5, img1);
    			append_dev(div7, t9);
    			append_dev(div7, div6);
    			append_dev(div6, h21);
    			append_dev(h21, t10);
    			append_dev(div6, t11);
    			append_dev(div6, p2);
    			append_dev(p2, t12);
    			append_dev(div20, t13);
    			append_dev(div20, section3);
    			append_dev(section3, div11);
    			append_dev(div11, h22);
    			append_dev(h22, t14);
    			append_dev(div11, t15);
    			append_dev(div11, div10);
    			append_dev(div10, div9);
    			mount_component(videoplayer, div9, null);
    			append_dev(div10, t16);
    			append_dev(div10, p3);
    			append_dev(p3, t17);
    			append_dev(div20, t18);
    			append_dev(div20, section4);
    			append_dev(section4, div18);
    			append_dev(div18, h23);
    			append_dev(h23, t19);
    			append_dev(div18, t20);
    			append_dev(div18, div14);
    			append_dev(div14, div12);
    			append_dev(div12, h30);
    			append_dev(h30, t21);
    			append_dev(div12, t22);
    			append_dev(div12, p4);
    			append_dev(p4, t23);
    			append_dev(div12, t24);
    			append_dev(div12, ul);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(ul, null);
    				}
    			}

    			append_dev(div14, t25);
    			append_dev(div14, div13);
    			append_dev(div13, img2);
    			append_dev(div18, t26);
    			append_dev(div18, div17);
    			append_dev(div17, div15);
    			append_dev(div15, img3);
    			append_dev(div17, t27);
    			append_dev(div17, div16);
    			append_dev(div16, h31);
    			append_dev(h31, t28);
    			append_dev(div16, t29);
    			append_dev(div16, p5);
    			append_dev(p5, t30);
    			append_dev(div16, t31);
    			append_dev(div16, h32);
    			append_dev(h32, t32);
    			append_dev(div16, t33);
    			append_dev(div16, p6);
    			append_dev(p6, t34);
    			append_dev(div16, t35);
    			append_dev(div16, p7);
    			p7.innerHTML = raw_value;
    			append_dev(div20, t36);
    			append_dev(div20, section5);
    			append_dev(section5, div19);
    			append_dev(div19, a);
    			append_dev(a, t37);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*$currentLang*/ 1) && t0_value !== (t0_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].title + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t2_value !== (t2_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].subtitle + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t4_value !== (t4_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].story.title + "")) set_data_dev(t4, t4_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t6_value !== (t6_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].story.text + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t10_value !== (t10_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].mission.title + "")) set_data_dev(t10, t10_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t12_value !== (t12_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].mission.text + "")) set_data_dev(t12, t12_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t14_value !== (t14_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].values.title + "")) set_data_dev(t14, t14_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t17_value !== (t17_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].values.videoCaption + "")) set_data_dev(t17, t17_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t19_value !== (t19_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.mainTitle + "")) set_data_dev(t19, t19_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t21_value !== (t21_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.title + "")) set_data_dev(t21, t21_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t23_value !== (t23_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.text + "")) set_data_dev(t23, t23_value);

    			if (dirty & /*content, $currentLang*/ 3) {
    				each_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block1.listItems;
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$5(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$5(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(ul, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if ((!current || dirty & /*$currentLang*/ 1) && t28_value !== (t28_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.paymentOptionsTitle + "")) set_data_dev(t28, t28_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t30_value !== (t30_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.paymentOptionsText + "")) set_data_dev(t30, t30_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t32_value !== (t32_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.pricesTitle + "")) set_data_dev(t32, t32_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && t34_value !== (t34_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.pricesText + "")) set_data_dev(t34, t34_value);
    			if ((!current || dirty & /*$currentLang*/ 1) && raw_value !== (raw_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].offerings.block2.conclusion.replace(/\n/g, '<br><br>') + "")) p7.innerHTML = raw_value;			if ((!current || dirty & /*$currentLang*/ 1) && t37_value !== (t37_value = /*content*/ ctx[1][/*$currentLang*/ ctx[0]].cta + "")) set_data_dev(t37, t37_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(videoplayer.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(videoplayer.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div20);
    			destroy_component(videoplayer);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$i.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$i($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(0, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('About', slots, []);
    	gsapWithCSS.registerPlugin(ScrollTrigger);
    	let lang;

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	// About content translations - UPDATED AND STRUCTURED FOR NEW LAYOUT
    	const content = {
    		hu: {
    			title: 'Kik vagyunk?',
    			subtitle: 'A Zima Autó Kft-nél új értelmet kap a kényelem és a kiválóság az autóápolási szolgáltatások terén. Több mint egy évtizedes tapasztalattal és szakértelemmel, büszkén kínáljuk az egyik legkiterjedtebb autószolgáltatási kínálatot, amely az Ön járművének minden igényét kielégíti egy helyen.',
    			story: {
    				title: 'Tapasztalat, amiben megbízhat',
    				text: 'Több mint 10 év tapasztalattal szolgálva ügyfeleinket, tökéletesítettük képességeinket és finomítottuk folyamatainkat annak érdekében, hogy a legmagasabb színvonalú szolgáltatást és ügyfél-elégedettséget biztosítsunk. Járműve csak a legjobbat érdemli, és pontosan ezt nyújtjuk a Zima Autó Kft-nél.'
    			},
    			// Repurposed 'mission' section for location
    			mission: {
    				title: 'Kiváló elhelyezkedés',
    				text: 'Stratégiai helyen, mindössze 5 kilométerre és 5 percre a Budapest Liszt Ferenc Nemzetközi Repülőterétől, Vecsésen, létesítményünk páratlan elérhetőséget és kényelmet biztosít. Búcsút mondhat a városban szétszórva lévő szolgáltatók keresési nehézségeinek. A Zima Autó Kft-vel gyorsan és hatékonyan kezelheti minden autójával kapcsolatos igényét, időt és energiát megtakarítva ezzel.'
    			},
    			// Repurposed 'values' section for 'Why Choose Us?'
    			values: {
    				title: 'Miért válasszon minket?',
    				videoCaption: 'Tekintse meg videónkat és ismerje meg szolgáltatásainkat!'
    			},
    			// New structure for services, pricing, and conclusion - split for grid layout
    			offerings: {
    				mainTitle: 'Szolgáltatásaink, áraink és fizetési lehetőségek',
    				block1: {
    					// First grid block content
    					title: 'Átfogó Szolgáltatási Kínálat',
    					text: 'Megértjük, hogy járműve több, mint egyszerű közlekedési eszköz; egy befektetés, amely megérdemli a legnagyobb gondosságot és figyelmet. Ezért kínálunk teljes körű szolgáltatási listát, ideértve:',
    					listItems: [
    						// Detailed list for HU
    						'Repülőtéri parkoló: Nyugodtan utazzon tudva, hogy járműve biztonságban van, amíg Ön távol van. Biztonságos parkoló létesítményünk körbekerített és 24/7-es kamerafelügyelettel biztosítja járműve maximális biztonságát. Ráadásul élvezze az ingyenes repülőtéri transzfert a parkolóból a repülőtérre kényelmes shuttle szolgáltatásunkkal, ami megszünteti az utazási logisztika stresszét. 3000 négyzetméteres, nyitott parkolóhelyünkön 150 parkolóhely áll rendelkezésre, így járművének helyet találni sosem jelenthet gondot. Akár online foglalja, akár egyszerűen csak behajt, mi gondoskodunk róla.',
    						'Kézi Autómosó: Kényeztesse járművét egy profi külső-belső autómosás szolgáltatással, amely ragyogóan tisztává és újjászületetté varázsolja autóját.',
    						'Gumiszervíz: Ne engedje, hogy egy defektes gumi gátat szabjon a programjának. Szakértőink azonnal foglalkoznak bármilyen gumival kapcsolatos problémával, gumicserével, és biztonságosan visszajuttatják Önt az útra.',
    						'Autószervíz: A rutinellenőrzésektől a bonyolult javításokig képzett szerelőink fel vannak készülve az Ön karbantartási és javítási igényeinek kezelésére, hogy járműve zökkenőmentesen és hatékonyan működjön.'
    					]
    				},
    				block2: {
    					// Second grid block content
    					paymentOptionsTitle: 'Rugalmas fizetési lehetőségek',
    					paymentOptionsText: 'Tudjuk, hogy a kényelem fontos, ezért rugalmas fizetési lehetőségeket kínálunk, beleértve a készpénzes, bankkártyás fizetést is.',
    					pricesTitle: 'Versenyképes árak',
    					pricesText: 'A Zima Autó Kft-nél úgy véljük, hogy a minőségi autóápolásnak mindenki számára elérhetőnek kell lennie. Ezért kínáljuk a legjobb árakat minden szolgáltatásunkra, biztosítva, hogy a lehető legtöbbet kapja pénzéért, anélkül, hogy engednénk a minőségből.',
    					conclusion: 'Tapasztalja meg a különbséget a Zima Autó Kft-nél - ahol minden alkalommal a kiválóság találkozik a kényelemmel.\n\nLépjen kapcsolatba velünk még ma, hogy felfedezze, hogyan emelhetjük autóápolási élményét új magasságokba!'
    				}
    			},
    			cta: 'Vegye igénybe szolgáltatásainkat'
    		},
    		en: {
    			title: 'Who We Are',
    			subtitle: 'With over a decade of unwavering dedication and expertise in the industry, we take pride in offering an unmatched range of services tailored to meet all your automotive requirements under one roof.',
    			story: {
    				title: 'Experience You Can Trust',
    				text: 'With more than 10 years of experience serving our valued customers, we have honed our skills and refined our processes to ensure the highest quality of service and customer satisfaction. Your vehicle deserves nothing but the best, and that\'s precisely what we deliver at Zima Auto Kft.'
    			},
    			// Repurposed 'mission' section for location
    			mission: {
    				title: 'Unbeatable Location',
    				text: 'Strategically situated just 4.8 kilometers and 5 minutes away from the Budapest Airport, at Vecsés our facility provides unparalleled accessibility and convenience. Say goodbye to the hassle of searching for multiple service providers scattered across the city. With Zima Auto Kft, you can address all your car care needs swiftly and efficiently, saving both time and effort.'
    			},
    			// Repurposed 'values' section for 'Why Choose Us?'
    			values: {
    				title: 'Why Choose Us?',
    				videoCaption: 'Watch our video to learn more about our services!'
    			},
    			// New structure for services, pricing, and conclusion - split for grid layout
    			offerings: {
    				mainTitle: 'Our Offerings: Services, Pricing, and More', // Adjusted main title
    				block1: {
    					// First grid block content
    					title: 'Comprehensive Range of Services',
    					text: 'We understand that your vehicle is more than just a mode of transportation; it\'s an investment that deserves the utmost care and attention. That\'s why we offer a comprehensive suite of services, including:',
    					listItems: [
    						// Simple list for EN
    						'Airport Parking',
    						'Car Wash',
    						'Tyre Repair Service',
    						'Car Maintenance Service'
    					]
    				},
    				block2: {
    					// Second grid block content
    					paymentOptionsTitle: 'Flexible Payment Options',
    					paymentOptionsText: 'We understand the importance of convenience, which is why we offer flexible payment options including cash, debit, and credit cards, making your car care experience seamless and hassle-free.',
    					pricesTitle: 'Competitive Prices',
    					pricesText: 'At Zima Auto Kft, we believe that quality car care should be accessible to everyone. That\'s why we offer the best competitive prices on all our services, ensuring that you get the most value for your money without compromising on quality.',
    					conclusion: 'Experience the difference with Zima Auto - where excellence meets convenience, every time.\n\nGet in touch with us today to discover how we can elevate your car care experience to new heights!'
    				}
    			},
    			cta: 'Use our services'
    		}
    	};

    	// Keep existing animation logic and ensure ScrollTrigger is used
    	onMount(() => {
    		// Animate sections
    		gsapWithCSS.from('.about-section', {
    			y: 50,
    			duration: 0.8,
    			stagger: 0.3,
    			ease: 'power2.out',
    			scrollTrigger: {
    				// Use scrollTrigger for sections
    				trigger: '.about-section',
    				start: 'top 80%', // Adjust trigger point as needed
    				
    			}, // markers: true // Uncomment for debugging trigger
    			
    		});

    		// Animate the video section
    		gsapWithCSS.from('.video-section-wrapper', {
    			y: 40,
    			opacity: 0,
    			duration: 0.8,
    			ease: 'power2.out',
    			scrollTrigger: {
    				trigger: '.values-section',
    				start: 'top 70%'
    			}
    		});

    		// Animate the two new content blocks in the offerings section grid
    		gsapWithCSS.from('.offerings-section .about-content', {
    			y: 50,
    			opacity: 0,
    			duration: 0.8,
    			stagger: 0.3, // Stagger animation between the two blocks
    			ease: 'power2.out',
    			scrollTrigger: {
    				trigger: '.offerings-section', // Trigger when the offerings section comes into view
    				start: 'top 80%', // Adjust trigger point
    				
    			}, // markers: true, // Uncomment for debugging
    			
    		});

    		// Animate the images in the two new grid blocks
    		gsapWithCSS.from('.offerings-section .about-image', {
    			y: 50,
    			opacity: 0,
    			duration: 0.8,
    			delay: 0.15, // Slightly delay image animation
    			stagger: 0.3, // Stagger animation between the two images
    			ease: 'power2.out',
    			scrollTrigger: {
    				trigger: '.offerings-section', // Trigger when the offerings section comes into view
    				start: 'top 80%', // Adjust trigger point
    				
    			}, // markers: true, // Uncomment for debugging
    			
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<About> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		t,
    		gsap: gsapWithCSS,
    		ScrollTrigger,
    		VideoPlayer,
    		lang,
    		content,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('lang' in $$props) lang = $$props.lang;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [$currentLang, content];
    }

    class About extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$i, create_fragment$i, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "About",
    			options,
    			id: create_fragment$i.name
    		});
    	}
    }

    /* src/pages/Services.svelte generated by Svelte v3.59.2 */
    const file$h = "src/pages/Services.svelte";

    function get_each_context$4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    function get_each_context_1$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[9] = list[i];
    	return child_ctx;
    }

    function get_each_context_2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_4(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_5(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_6(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_7(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_8(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_9(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[12] = list[i];
    	return child_ctx;
    }

    function get_each_context_10(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    function get_each_context_11(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[6] = list[i];
    	child_ctx[8] = i;
    	return child_ctx;
    }

    function get_each_context_12(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[18] = list[i];
    	return child_ctx;
    }

    function get_each_context_13(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[15] = list[i];
    	return child_ctx;
    }

    // (209:12) {#each ($currentLang === 'hu'               ? ['Biztonságos, kamerával megfigyelt területt', '24/7 személyzet a helyszínen', 'Kedvező árak hosszabb tartózkodásra is', 'Ingyenes transzfer a repülőtérre és vissza', 'Előfoglalási lehetőség']               : ['Secure, camera-monitored area', '24/7 staff on site', 'Favorable rates for longer stays', 'Free transfer to and from the airport', 'Pre-booking option']             ) as feature}
    function create_each_block_13(ctx) {
    	let li;
    	let t_value = /*feature*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 212, 14, 10248);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*feature*/ ctx[15] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_13.name,
    		type: "each",
    		source: "(209:12) {#each ($currentLang === 'hu'               ? ['Biztonságos, kamerával megfigyelt területt', '24/7 személyzet a helyszínen', 'Kedvező árak hosszabb tartózkodásra is', 'Ingyenes transzfer a repülőtérre és vissza', 'Előfoglalási lehetőség']               : ['Secure, camera-monitored area', '24/7 staff on site', 'Favorable rates for longer stays', 'Free transfer to and from the airport', 'Pre-booking option']             ) as feature}",
    		ctx
    	});

    	return block;
    }

    // (235:12) {#each parkingPrices as price (price.days)}
    function create_each_block_12(key_1, ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*price*/ ctx[18].days + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*price*/ ctx[18].normal + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*price*/ ctx[18].discount + "";
    	let t4;
    	let t5;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			attr_dev(td0, "class", "day-col svelte-idyddb");
    			add_location(td0, file$h, 236, 16, 11150);
    			attr_dev(td1, "class", "normal-price-col svelte-idyddb");
    			add_location(td1, file$h, 237, 16, 11204);
    			attr_dev(td2, "class", "discount-col svelte-idyddb");
    			add_location(td2, file$h, 238, 16, 11269);
    			add_location(tr, file$h, 235, 14, 11129);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_12.name,
    		type: "each",
    		source: "(235:12) {#each parkingPrices as price (price.days)}",
    		ctx
    	});

    	return block;
    }

    // (250:8) {#each Array(20) as _, i}
    function create_each_block_11(ctx) {
    	let div;

    	const block = {
    		c: function create() {
    			div = element("div");
    			attr_dev(div, "class", "bubble svelte-idyddb");
    			attr_dev(div, "style", "--size: " + (Math.random() * 5 + 1) + "rem; --left: " + Math.random() * 100 + "%; --animation-duration: " + (Math.random() * 10 + 5) + "s; --animation-delay: " + Math.random() * 5 + "s; --opacity: " + (Math.random() * 0.4 + 0.1) + "; /* Vary opacity */");
    			add_location(div, file$h, 250, 12, 11563);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_11.name,
    		type: "each",
    		source: "(250:8) {#each Array(20) as _, i}",
    		ctx
    	});

    	return block;
    }

    // (274:12) {#each ($currentLang === 'hu'               ? ['Külső és belső tisztítás', 'Prémium waxolás és polírozás', 'Kárpittisztítás', 'Bőrápolás és kondicionálás', 'Gőztisztítás és fertőtlenítés']               : ['Exterior and interior cleaning', 'Premium waxing and polishing', 'Upholstery cleaning', 'Leather care and conditioning', 'Steam cleaning and sanitization']             ) as feature}
    function create_each_block_10(ctx) {
    	let li;
    	let t_value = /*feature*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 277, 14, 13108);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*feature*/ ctx[15] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_10.name,
    		type: "each",
    		source: "(274:12) {#each ($currentLang === 'hu'               ? ['Külső és belső tisztítás', 'Prémium waxolás és polírozás', 'Kárpittisztítás', 'Bőrápolás és kondicionálás', 'Gőztisztítás és fertőtlenítés']               : ['Exterior and interior cleaning', 'Premium waxing and polishing', 'Upholstery cleaning', 'Leather care and conditioning', 'Steam cleaning and sanitization']             ) as feature}",
    		ctx
    	});

    	return block;
    }

    // (293:23) {#each carWashData.smart.inclusions.exterior.items as item}
    function create_each_block_9(ctx) {
    	let li;
    	let t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 293, 27, 13856);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_9.name,
    		type: "each",
    		source: "(293:23) {#each carWashData.smart.inclusions.exterior.items as item}",
    		ctx
    	});

    	return block;
    }

    // (301:23) {#each carWashData.smart.inclusions.interior.items as item}
    function create_each_block_8(ctx) {
    	let li;
    	let t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 301, 27, 14294);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_8.name,
    		type: "each",
    		source: "(301:23) {#each carWashData.smart.inclusions.interior.items as item}",
    		ctx
    	});

    	return block;
    }

    // (318:22) {#each carWashData.smart.prices as price (price.type[$currentLang])}
    function create_each_block_7(key_1, ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*price*/ ctx[18]['Exterior & Interior'] + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*price*/ ctx[18].Exterior + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*price*/ ctx[18].Interior + "";
    	let t6;
    	let t7;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text(t6_value);
    			t7 = space();
    			attr_dev(td0, "class", "svelte-idyddb");
    			add_location(td0, file$h, 319, 30, 15218);
    			attr_dev(td1, "class", "svelte-idyddb");
    			add_location(td1, file$h, 320, 30, 15284);
    			attr_dev(td2, "class", "svelte-idyddb");
    			add_location(td2, file$h, 321, 30, 15354);
    			attr_dev(td3, "class", "svelte-idyddb");
    			add_location(td3, file$h, 322, 30, 15410);
    			add_location(tr, file$h, 318, 26, 15183);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_7.name,
    		type: "each",
    		source: "(318:22) {#each carWashData.smart.prices as price (price.type[$currentLang])}",
    		ctx
    	});

    	return block;
    }

    // (335:23) {#each carWashData.premium.inclusions.exterior.items as item}
    function create_each_block_6(ctx) {
    	let li;
    	let t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 335, 27, 16073);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_6.name,
    		type: "each",
    		source: "(335:23) {#each carWashData.premium.inclusions.exterior.items as item}",
    		ctx
    	});

    	return block;
    }

    // (343:23) {#each carWashData.premium.inclusions.interior.items as item}
    function create_each_block_5(ctx) {
    	let li;
    	let t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 343, 27, 16515);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*item*/ ctx[12][/*$currentLang*/ ctx[0]] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_5.name,
    		type: "each",
    		source: "(343:23) {#each carWashData.premium.inclusions.interior.items as item}",
    		ctx
    	});

    	return block;
    }

    // (360:22) {#each carWashData.premium.prices as price (price.type[$currentLang])}
    function create_each_block_4(key_1, ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*price*/ ctx[18]['Exterior & Interior'] + "";
    	let t2;
    	let t3;
    	let td2;
    	let t4_value = /*price*/ ctx[18].Exterior + "";
    	let t4;
    	let t5;
    	let td3;
    	let t6_value = /*price*/ ctx[18].Interior + "";
    	let t6;
    	let t7;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			td2 = element("td");
    			t4 = text(t4_value);
    			t5 = space();
    			td3 = element("td");
    			t6 = text(t6_value);
    			t7 = space();
    			attr_dev(td0, "class", "svelte-idyddb");
    			add_location(td0, file$h, 361, 30, 17443);
    			attr_dev(td1, "class", "svelte-idyddb");
    			add_location(td1, file$h, 362, 30, 17509);
    			attr_dev(td2, "class", "svelte-idyddb");
    			add_location(td2, file$h, 363, 30, 17579);
    			attr_dev(td3, "class", "svelte-idyddb");
    			add_location(td3, file$h, 364, 30, 17635);
    			add_location(tr, file$h, 360, 26, 17408);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    			append_dev(tr, td2);
    			append_dev(td2, t4);
    			append_dev(tr, t5);
    			append_dev(tr, td3);
    			append_dev(td3, t6);
    			append_dev(tr, t7);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_4.name,
    		type: "each",
    		source: "(360:22) {#each carWashData.premium.prices as price (price.type[$currentLang])}",
    		ctx
    	});

    	return block;
    }

    // (386:12) {#each ($currentLang === 'hu'               ? ['Gumiabroncs csere és javítás', 'Kerék kiegyensúlyozás', 'Szezonális tárolás', 'Futóműbeállítás', 'Prémium márkák széles választéka']               : ['Tire replacement and repair', 'Wheel balancing', 'Seasonal storage', 'Wheel alignment', 'Wide selection of premium brands']             ) as feature}
    function create_each_block_3(ctx) {
    	let li;
    	let t_value = /*feature*/ ctx[15] + "";
    	let t;

    	const block = {
    		c: function create() {
    			li = element("li");
    			t = text(t_value);
    			attr_dev(li, "class", "svelte-idyddb");
    			add_location(li, file$h, 389, 14, 18852);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, li, anchor);
    			append_dev(li, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t_value !== (t_value = /*feature*/ ctx[15] + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(li);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_3.name,
    		type: "each",
    		source: "(386:12) {#each ($currentLang === 'hu'               ? ['Gumiabroncs csere és javítás', 'Kerék kiegyensúlyozás', 'Szezonális tárolás', 'Futóműbeállítás', 'Prémium márkák széles választéka']               : ['Tire replacement and repair', 'Wheel balancing', 'Seasonal storage', 'Wheel alignment', 'Wide selection of premium brands']             ) as feature}",
    		ctx
    	});

    	return block;
    }

    // (414:12) {#each tireServicePrices.fullServicePer4Tires as item (item.size)}
    function create_each_block_2(key_1, ctx) {
    	let tr;
    	let td0;
    	let t0_value = /*item*/ ctx[12].size + "";
    	let t0;
    	let t1;
    	let td1;
    	let t2_value = /*item*/ ctx[12].price + "";
    	let t2;
    	let t3;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			tr = element("tr");
    			td0 = element("td");
    			t0 = text(t0_value);
    			t1 = space();
    			td1 = element("td");
    			t2 = text(t2_value);
    			t3 = space();
    			attr_dev(td0, "class", "svelte-idyddb");
    			add_location(td0, file$h, 415, 16, 19873);
    			attr_dev(td1, "class", "svelte-idyddb");
    			add_location(td1, file$h, 416, 16, 19910);
    			add_location(tr, file$h, 414, 14, 19852);
    			this.first = tr;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, tr, anchor);
    			append_dev(tr, td0);
    			append_dev(td0, t0);
    			append_dev(tr, t1);
    			append_dev(tr, td1);
    			append_dev(td1, t2);
    			append_dev(tr, t3);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(tr);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_2.name,
    		type: "each",
    		source: "(414:12) {#each tireServicePrices.fullServicePer4Tires as item (item.size)}",
    		ctx
    	});

    	return block;
    }

    // (425:10) {#if tireServicePrices.patching}
    function create_if_block_2$a(ctx) {
    	let div1;
    	let h3;
    	let t0_value = /*tireServicePrices*/ ctx[3].patching.name[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let div0;
    	let t2_value = /*tireServicePrices*/ ctx[3].patching.pricePerTyre + "";
    	let t2;
    	let t3;
    	let span;
    	let t4_value = /*tireServicePrices*/ ctx[3].patching.note[/*$currentLang*/ ctx[0]] + "";
    	let t4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			span = element("span");
    			t4 = text(t4_value);
    			attr_dev(h3, "class", "svelte-idyddb");
    			add_location(h3, file$h, 426, 13, 20161);
    			attr_dev(span, "class", "per-set svelte-idyddb");
    			add_location(span, file$h, 429, 17, 20335);
    			attr_dev(div0, "class", "service-price svelte-idyddb");
    			add_location(div0, file$h, 427, 13, 20231);
    			attr_dev(div1, "class", "tire-service-block svelte-idyddb");
    			add_location(div1, file$h, 425, 11, 20115);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h3);
    			append_dev(h3, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, span);
    			append_dev(span, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*tireServicePrices*/ ctx[3].patching.name[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*$currentLang*/ 1 && t4_value !== (t4_value = /*tireServicePrices*/ ctx[3].patching.note[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$a.name,
    		type: "if",
    		source: "(425:10) {#if tireServicePrices.patching}",
    		ctx
    	});

    	return block;
    }

    // (435:10) {#if tireServicePrices.wheelMountingOnly}
    function create_if_block_1$c(ctx) {
    	let div1;
    	let h3;
    	let t0_value = /*tireServicePrices*/ ctx[3].wheelMountingOnly.name[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let div0;
    	let t2_value = /*tireServicePrices*/ ctx[3].wheelMountingOnly.pricePer4pcs + "";
    	let t2;
    	let t3;
    	let span;
    	let t4_value = /*tireServicePrices*/ ctx[3].wheelMountingOnly.note[/*$currentLang*/ ctx[0]] + "";
    	let t4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			span = element("span");
    			t4 = text(t4_value);
    			attr_dev(h3, "class", "svelte-idyddb");
    			add_location(h3, file$h, 436, 13, 20576);
    			attr_dev(span, "class", "per-set svelte-idyddb");
    			add_location(span, file$h, 439, 17, 20768);
    			attr_dev(div0, "class", "service-price svelte-idyddb");
    			add_location(div0, file$h, 437, 13, 20655);
    			attr_dev(div1, "class", "tire-service-block svelte-idyddb");
    			add_location(div1, file$h, 435, 11, 20530);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h3);
    			append_dev(h3, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, span);
    			append_dev(span, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*tireServicePrices*/ ctx[3].wheelMountingOnly.name[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*$currentLang*/ 1 && t4_value !== (t4_value = /*tireServicePrices*/ ctx[3].wheelMountingOnly.note[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$c.name,
    		type: "if",
    		source: "(435:10) {#if tireServicePrices.wheelMountingOnly}",
    		ctx
    	});

    	return block;
    }

    // (445:10) {#if tireServicePrices.alloyWheelMountingAlignment}
    function create_if_block$e(ctx) {
    	let div1;
    	let h3;
    	let t0_value = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment.name[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;
    	let div0;
    	let t2_value = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment.pricePer4pcs + "";
    	let t2;
    	let t3;
    	let span;
    	let t4_value = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment.note[/*$currentLang*/ ctx[0]] + "";
    	let t4;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div0 = element("div");
    			t2 = text(t2_value);
    			t3 = space();
    			span = element("span");
    			t4 = text(t4_value);
    			attr_dev(h3, "class", "svelte-idyddb");
    			add_location(h3, file$h, 446, 13, 21028);
    			attr_dev(span, "class", "per-set svelte-idyddb");
    			add_location(span, file$h, 449, 18, 21241);
    			attr_dev(div0, "class", "service-price svelte-idyddb");
    			add_location(div0, file$h, 447, 13, 21117);
    			attr_dev(div1, "class", "tire-service-block svelte-idyddb");
    			add_location(div1, file$h, 445, 11, 20982);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, h3);
    			append_dev(h3, t0);
    			append_dev(div1, t1);
    			append_dev(div1, div0);
    			append_dev(div0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, span);
    			append_dev(span, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment.name[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    			if (dirty[0] & /*$currentLang*/ 1 && t4_value !== (t4_value = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment.note[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$e.name,
    		type: "if",
    		source: "(445:10) {#if tireServicePrices.alloyWheelMountingAlignment}",
    		ctx
    	});

    	return block;
    }

    // (471:8) {#each maintenanceServices as service (service.name.hu)}
    function create_each_block_1$1(key_1, ctx) {
    	let div;
    	let t0_value = /*service*/ ctx[9].name[/*$currentLang*/ ctx[0]] + "";
    	let t0;
    	let t1;

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			div = element("div");
    			t0 = text(t0_value);
    			t1 = space();
    			attr_dev(div, "class", "maintenance-bubble svelte-idyddb");
    			add_location(div, file$h, 471, 10, 22192);
    			this.first = div;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t0);
    			append_dev(div, t1);
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = /*service*/ ctx[9].name[/*$currentLang*/ ctx[0]] + "")) set_data_dev(t0, t0_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1$1.name,
    		type: "each",
    		source: "(471:8) {#each maintenanceServices as service (service.name.hu)}",
    		ctx
    	});

    	return block;
    }

    // (500:10) {#each Array(8) as _, i}
    function create_each_block$4(ctx) {
    	let div;
    	let img;
    	let img_src_value;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			img = element("img");
    			t = space();
    			if (!src_url_equal(img.src, img_src_value = `/images/bufe${/*i*/ ctx[8] + 1}.webp`)) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", `Zima Kebab ${/*i*/ ctx[8] + 1}`);
    			attr_dev(img, "loading", "lazy");
    			attr_dev(img, "onerror", "this.src='/images/placeholder.jpg'");
    			attr_dev(img, "class", "svelte-idyddb");
    			add_location(img, file$h, 501, 14, 23329);
    			attr_dev(div, "class", "kebab-carousel-item svelte-idyddb");
    			add_location(div, file$h, 500, 12, 23281);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, img);
    			append_dev(div, t);
    		},
    		p: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$4.name,
    		type: "each",
    		source: "(500:10) {#each Array(8) as _, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$h(ctx) {
    	let section0;
    	let div0;
    	let h1;

    	let t0_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'SZOLGÁLTATÁSOK'
    	: 'SERVICES') + "";

    	let t0;
    	let t1;
    	let p0;

    	let t2_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Mindent egy helyen az Ön járművének kényeztetéséhez'
    	: 'Everything in one place to pamper your vehicle') + "";

    	let t2;
    	let t3;
    	let div34;
    	let section1;
    	let div5;
    	let div3;
    	let div1;
    	let h20;

    	let t4_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? '24/7 REPTÉRI PARKOLÁS'
    	: '24/7 AIRPORT PARKING') + "";

    	let t4;
    	let t5;
    	let p1;

    	let t6_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Biztonságos parkolóhelyeink 24 órás kamerás megfigyeléssel és szakértő személyzettel várják járművét, maximális biztonságot nyújtva.'
    	: 'Our secure parking facility features fenced boundaries and 24/7 CCTV surveillance, ensuring the highest level of security for your vehicle.') + "";

    	let t6;
    	let t7;
    	let ul0;
    	let t8;
    	let a0;

    	let t9_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Foglalás'
    	: 'Book now') + "";

    	let t9;
    	let t10;
    	let div2;
    	let img0;
    	let img0_src_value;
    	let t11;
    	let div4;
    	let table0;
    	let thead0;
    	let tr0;
    	let th0;
    	let t12_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Nap' : 'Day') + "";
    	let t12;
    	let t13;
    	let th1;

    	let t14_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Normál ár'
    	: 'Normal Price') + "";

    	let t14;
    	let t15;
    	let th2;

    	let t16_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Kedvezményes'
    	: 'Discounted') + "";

    	let t16;
    	let t17;
    	let tbody0;
    	let each_blocks_12 = [];
    	let each1_lookup = new Map();
    	let t18;
    	let section2;
    	let div6;
    	let t19;
    	let div19;
    	let div9;
    	let div7;
    	let img1;
    	let img1_src_value;
    	let t20;
    	let div8;
    	let h21;

    	let t21_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'KÉZI AUTÓMOSÓ'
    	: 'HAND CAR WASH') + "";

    	let t21;
    	let t22;
    	let p2;

    	let t23_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Ajándékozza meg járművét egy fürdőnappal professzionális autómosó szolgáltatásainkkal, amelyek célja, hogy autója csillogóan tisztán és fiatalon maradjon.'
    	: 'Treat your vehicle to a spa day with our professional car washing services aimed at keeping your car looking sparkling clean and youthful.') + "";

    	let t23;
    	let t24;
    	let ul1;
    	let t25;
    	let a1;

    	let t26_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Foglalás'
    	: 'Book now') + "";

    	let t26;
    	let t27;
    	let div18;
    	let h30;

    	let t28_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'SMART Csomag'
    	: 'SMART Package') + "";

    	let t28;
    	let t29;
    	let div12;
    	let div10;
    	let h40;
    	let t30_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "";
    	let t30;
    	let t31;
    	let ul2;
    	let t32;
    	let div11;
    	let h41;
    	let t33_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "";
    	let t33;
    	let t34;
    	let ul3;
    	let t35;
    	let div13;
    	let table1;
    	let thead1;
    	let tr1;
    	let th3;

    	let t36_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Autó típus'
    	: 'Car type') + "";

    	let t36;
    	let t37;
    	let th4;

    	let t38_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Külső & Belső'
    	: 'Exterior & Interior') + "";

    	let t38;
    	let t39;
    	let th5;
    	let t40_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "";
    	let t40;
    	let t41;
    	let th6;
    	let t42_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "";
    	let t42;
    	let t43;
    	let tbody1;
    	let each_blocks_7 = [];
    	let each6_lookup = new Map();
    	let t44;
    	let h31;

    	let t45_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'PREMIUM Csomag'
    	: 'PREMIUM Package') + "";

    	let t45;
    	let t46;
    	let div16;
    	let div14;
    	let h42;
    	let t47_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "";
    	let t47;
    	let t48;
    	let ul4;
    	let t49;
    	let div15;
    	let h43;
    	let t50_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "";
    	let t50;
    	let t51;
    	let ul5;
    	let t52;
    	let div17;
    	let table2;
    	let thead2;
    	let tr2;
    	let th7;

    	let t53_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Autó típus'
    	: 'Car type') + "";

    	let t53;
    	let t54;
    	let th8;

    	let t55_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Külső & Belső'
    	: 'Exterior & Interior') + "";

    	let t55;
    	let t56;
    	let th9;
    	let t57_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "";
    	let t57;
    	let t58;
    	let th10;
    	let t59_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "";
    	let t59;
    	let t60;
    	let tbody2;
    	let each_blocks_4 = [];
    	let each9_lookup = new Map();
    	let t61;
    	let section3;
    	let div25;
    	let div22;
    	let div20;
    	let h22;

    	let t62_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'GUMISZERVIZ'
    	: 'TIRE SERVICE') + "";

    	let t62;
    	let t63;
    	let p3;

    	let t64_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Szakértő technikusaink készen állnak az abroncsokkal kapcsolatos bármilyen probléma azonnali megoldására, és biztonságosan visszatérni az útra.'
    	: 'Our expert technicians are ready to solve any tire-related problems immediately and get you safely back on the road.') + "";

    	let t64;
    	let t65;
    	let ul6;
    	let t66;
    	let a2;

    	let t67_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Foglalás'
    	: 'Book now') + "";

    	let t67;
    	let t68;
    	let div21;
    	let img2;
    	let img2_src_value;
    	let t69;
    	let h32;

    	let t70_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Kerék le-fel szerelés, Gumiabroncs átszerelés és Centrízorás'
    	: 'Wheel & Tire Fitting, Alignment') + "";

    	let t70;
    	let t71;
    	let div23;
    	let table3;
    	let thead3;
    	let tr3;
    	let th11;
    	let t72_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Méret' : 'Size') + "";
    	let t72;
    	let t73;
    	let th12;

    	let t74_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Ár / 4 abroncs'
    	: 'Price / 4 tires') + "";

    	let t74;
    	let t75;
    	let tbody3;
    	let each_blocks_2 = [];
    	let each11_lookup = new Map();
    	let t76;
    	let div24;
    	let t77;
    	let t78;
    	let t79;
    	let section4;
    	let div29;
    	let div26;
    	let h23;

    	let t80_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'MÁRKAFÜGGETLEN AUTÓSZERVIZ'
    	: 'BRAND-AGNOSTIC CAR SERVICE') + "";

    	let t80;
    	let t81;
    	let p4;

    	let t82_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Szakértő csapatunk széles körű szervizszolgáltatást nyújt minden autómárka számára, a rendszeres karbantartástól a komplex javításokig.'
    	: 'Our expert team provides a wide range of maintenance services for all car brands, from routine maintenance to complex repairs.') + "";

    	let t82;
    	let t83;
    	let div27;
    	let each_blocks_1 = [];
    	let each12_lookup = new Map();
    	let t84;
    	let div28;
    	let a3;

    	let t85_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Kérj árajánlatot'
    	: 'Request a Quote') + "";

    	let t85;
    	let t86;
    	let section5;
    	let div33;
    	let div30;
    	let h24;
    	let t88;
    	let p5;

    	let t89_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Egyél egy finom kebabot vagy igyál egy hideg üdítőt, amíg az autóddal foglalkozunk! Kényelmes étkezési lehetőség a kiszolgálás mellett.'
    	: 'Grab a freshly made kebab or a cold drink while we take care of your car! Convenient dining option right at our service center.') + "";

    	let t89;
    	let t90;
    	let div32;
    	let div31;
    	let t91;
    	let button0;
    	let svg0;
    	let path0;
    	let t92;
    	let button1;
    	let svg1;
    	let path1;
    	let mounted;
    	let dispose;

    	let each_value_13 = /*$currentLang*/ ctx[0] === 'hu'
    	? [
    			'Biztonságos, kamerával megfigyelt területt',
    			'24/7 személyzet a helyszínen',
    			'Kedvező árak hosszabb tartózkodásra is',
    			'Ingyenes transzfer a repülőtérre és vissza',
    			'Előfoglalási lehetőség'
    		]
    	: [
    			'Secure, camera-monitored area',
    			'24/7 staff on site',
    			'Favorable rates for longer stays',
    			'Free transfer to and from the airport',
    			'Pre-booking option'
    		];

    	validate_each_argument(each_value_13);
    	let each_blocks_13 = [];

    	for (let i = 0; i < each_value_13.length; i += 1) {
    		each_blocks_13[i] = create_each_block_13(get_each_context_13(ctx, each_value_13, i));
    	}

    	let each_value_12 = /*parkingPrices*/ ctx[1];
    	validate_each_argument(each_value_12);
    	const get_key = ctx => /*price*/ ctx[18].days;
    	validate_each_keys(ctx, each_value_12, get_each_context_12, get_key);

    	for (let i = 0; i < each_value_12.length; i += 1) {
    		let child_ctx = get_each_context_12(ctx, each_value_12, i);
    		let key = get_key(child_ctx);
    		each1_lookup.set(key, each_blocks_12[i] = create_each_block_12(key, child_ctx));
    	}

    	let each_value_11 = Array(20);
    	validate_each_argument(each_value_11);
    	let each_blocks_11 = [];

    	for (let i = 0; i < each_value_11.length; i += 1) {
    		each_blocks_11[i] = create_each_block_11(get_each_context_11(ctx, each_value_11, i));
    	}

    	let each_value_10 = /*$currentLang*/ ctx[0] === 'hu'
    	? [
    			'Külső és belső tisztítás',
    			'Prémium waxolás és polírozás',
    			'Kárpittisztítás',
    			'Bőrápolás és kondicionálás',
    			'Gőztisztítás és fertőtlenítés'
    		]
    	: [
    			'Exterior and interior cleaning',
    			'Premium waxing and polishing',
    			'Upholstery cleaning',
    			'Leather care and conditioning',
    			'Steam cleaning and sanitization'
    		];

    	validate_each_argument(each_value_10);
    	let each_blocks_10 = [];

    	for (let i = 0; i < each_value_10.length; i += 1) {
    		each_blocks_10[i] = create_each_block_10(get_each_context_10(ctx, each_value_10, i));
    	}

    	let each_value_9 = /*carWashData*/ ctx[2].smart.inclusions.exterior.items;
    	validate_each_argument(each_value_9);
    	let each_blocks_9 = [];

    	for (let i = 0; i < each_value_9.length; i += 1) {
    		each_blocks_9[i] = create_each_block_9(get_each_context_9(ctx, each_value_9, i));
    	}

    	let each_value_8 = /*carWashData*/ ctx[2].smart.inclusions.interior.items;
    	validate_each_argument(each_value_8);
    	let each_blocks_8 = [];

    	for (let i = 0; i < each_value_8.length; i += 1) {
    		each_blocks_8[i] = create_each_block_8(get_each_context_8(ctx, each_value_8, i));
    	}

    	let each_value_7 = /*carWashData*/ ctx[2].smart.prices;
    	validate_each_argument(each_value_7);
    	const get_key_1 = ctx => /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]];
    	validate_each_keys(ctx, each_value_7, get_each_context_7, get_key_1);

    	for (let i = 0; i < each_value_7.length; i += 1) {
    		let child_ctx = get_each_context_7(ctx, each_value_7, i);
    		let key = get_key_1(child_ctx);
    		each6_lookup.set(key, each_blocks_7[i] = create_each_block_7(key, child_ctx));
    	}

    	let each_value_6 = /*carWashData*/ ctx[2].premium.inclusions.exterior.items;
    	validate_each_argument(each_value_6);
    	let each_blocks_6 = [];

    	for (let i = 0; i < each_value_6.length; i += 1) {
    		each_blocks_6[i] = create_each_block_6(get_each_context_6(ctx, each_value_6, i));
    	}

    	let each_value_5 = /*carWashData*/ ctx[2].premium.inclusions.interior.items;
    	validate_each_argument(each_value_5);
    	let each_blocks_5 = [];

    	for (let i = 0; i < each_value_5.length; i += 1) {
    		each_blocks_5[i] = create_each_block_5(get_each_context_5(ctx, each_value_5, i));
    	}

    	let each_value_4 = /*carWashData*/ ctx[2].premium.prices;
    	validate_each_argument(each_value_4);
    	const get_key_2 = ctx => /*price*/ ctx[18].type[/*$currentLang*/ ctx[0]];
    	validate_each_keys(ctx, each_value_4, get_each_context_4, get_key_2);

    	for (let i = 0; i < each_value_4.length; i += 1) {
    		let child_ctx = get_each_context_4(ctx, each_value_4, i);
    		let key = get_key_2(child_ctx);
    		each9_lookup.set(key, each_blocks_4[i] = create_each_block_4(key, child_ctx));
    	}

    	let each_value_3 = /*$currentLang*/ ctx[0] === 'hu'
    	? [
    			'Gumiabroncs csere és javítás',
    			'Kerék kiegyensúlyozás',
    			'Szezonális tárolás',
    			'Futóműbeállítás',
    			'Prémium márkák széles választéka'
    		]
    	: [
    			'Tire replacement and repair',
    			'Wheel balancing',
    			'Seasonal storage',
    			'Wheel alignment',
    			'Wide selection of premium brands'
    		];

    	validate_each_argument(each_value_3);
    	let each_blocks_3 = [];

    	for (let i = 0; i < each_value_3.length; i += 1) {
    		each_blocks_3[i] = create_each_block_3(get_each_context_3(ctx, each_value_3, i));
    	}

    	let each_value_2 = /*tireServicePrices*/ ctx[3].fullServicePer4Tires;
    	validate_each_argument(each_value_2);
    	const get_key_3 = ctx => /*item*/ ctx[12].size;
    	validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_3);

    	for (let i = 0; i < each_value_2.length; i += 1) {
    		let child_ctx = get_each_context_2(ctx, each_value_2, i);
    		let key = get_key_3(child_ctx);
    		each11_lookup.set(key, each_blocks_2[i] = create_each_block_2(key, child_ctx));
    	}

    	let if_block0 = /*tireServicePrices*/ ctx[3].patching && create_if_block_2$a(ctx);
    	let if_block1 = /*tireServicePrices*/ ctx[3].wheelMountingOnly && create_if_block_1$c(ctx);
    	let if_block2 = /*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment && create_if_block$e(ctx);
    	let each_value_1 = /*maintenanceServices*/ ctx[4];
    	validate_each_argument(each_value_1);
    	const get_key_4 = ctx => /*service*/ ctx[9].name.hu;
    	validate_each_keys(ctx, each_value_1, get_each_context_1$1, get_key_4);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1$1(ctx, each_value_1, i);
    		let key = get_key_4(child_ctx);
    		each12_lookup.set(key, each_blocks_1[i] = create_each_block_1$1(key, child_ctx));
    	}

    	let each_value = Array(8);
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$4(get_each_context$4(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p0 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			div34 = element("div");
    			section1 = element("section");
    			div5 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			h20 = element("h2");
    			t4 = text(t4_value);
    			t5 = space();
    			p1 = element("p");
    			t6 = text(t6_value);
    			t7 = space();
    			ul0 = element("ul");

    			for (let i = 0; i < each_blocks_13.length; i += 1) {
    				each_blocks_13[i].c();
    			}

    			t8 = space();
    			a0 = element("a");
    			t9 = text(t9_value);
    			t10 = space();
    			div2 = element("div");
    			img0 = element("img");
    			t11 = space();
    			div4 = element("div");
    			table0 = element("table");
    			thead0 = element("thead");
    			tr0 = element("tr");
    			th0 = element("th");
    			t12 = text(t12_value);
    			t13 = space();
    			th1 = element("th");
    			t14 = text(t14_value);
    			t15 = space();
    			th2 = element("th");
    			t16 = text(t16_value);
    			t17 = space();
    			tbody0 = element("tbody");

    			for (let i = 0; i < each_blocks_12.length; i += 1) {
    				each_blocks_12[i].c();
    			}

    			t18 = space();
    			section2 = element("section");
    			div6 = element("div");

    			for (let i = 0; i < each_blocks_11.length; i += 1) {
    				each_blocks_11[i].c();
    			}

    			t19 = space();
    			div19 = element("div");
    			div9 = element("div");
    			div7 = element("div");
    			img1 = element("img");
    			t20 = space();
    			div8 = element("div");
    			h21 = element("h2");
    			t21 = text(t21_value);
    			t22 = space();
    			p2 = element("p");
    			t23 = text(t23_value);
    			t24 = space();
    			ul1 = element("ul");

    			for (let i = 0; i < each_blocks_10.length; i += 1) {
    				each_blocks_10[i].c();
    			}

    			t25 = space();
    			a1 = element("a");
    			t26 = text(t26_value);
    			t27 = space();
    			div18 = element("div");
    			h30 = element("h3");
    			t28 = text(t28_value);
    			t29 = space();
    			div12 = element("div");
    			div10 = element("div");
    			h40 = element("h4");
    			t30 = text(t30_value);
    			t31 = space();
    			ul2 = element("ul");

    			for (let i = 0; i < each_blocks_9.length; i += 1) {
    				each_blocks_9[i].c();
    			}

    			t32 = space();
    			div11 = element("div");
    			h41 = element("h4");
    			t33 = text(t33_value);
    			t34 = space();
    			ul3 = element("ul");

    			for (let i = 0; i < each_blocks_8.length; i += 1) {
    				each_blocks_8[i].c();
    			}

    			t35 = space();
    			div13 = element("div");
    			table1 = element("table");
    			thead1 = element("thead");
    			tr1 = element("tr");
    			th3 = element("th");
    			t36 = text(t36_value);
    			t37 = space();
    			th4 = element("th");
    			t38 = text(t38_value);
    			t39 = space();
    			th5 = element("th");
    			t40 = text(t40_value);
    			t41 = space();
    			th6 = element("th");
    			t42 = text(t42_value);
    			t43 = space();
    			tbody1 = element("tbody");

    			for (let i = 0; i < each_blocks_7.length; i += 1) {
    				each_blocks_7[i].c();
    			}

    			t44 = space();
    			h31 = element("h3");
    			t45 = text(t45_value);
    			t46 = space();
    			div16 = element("div");
    			div14 = element("div");
    			h42 = element("h4");
    			t47 = text(t47_value);
    			t48 = space();
    			ul4 = element("ul");

    			for (let i = 0; i < each_blocks_6.length; i += 1) {
    				each_blocks_6[i].c();
    			}

    			t49 = space();
    			div15 = element("div");
    			h43 = element("h4");
    			t50 = text(t50_value);
    			t51 = space();
    			ul5 = element("ul");

    			for (let i = 0; i < each_blocks_5.length; i += 1) {
    				each_blocks_5[i].c();
    			}

    			t52 = space();
    			div17 = element("div");
    			table2 = element("table");
    			thead2 = element("thead");
    			tr2 = element("tr");
    			th7 = element("th");
    			t53 = text(t53_value);
    			t54 = space();
    			th8 = element("th");
    			t55 = text(t55_value);
    			t56 = space();
    			th9 = element("th");
    			t57 = text(t57_value);
    			t58 = space();
    			th10 = element("th");
    			t59 = text(t59_value);
    			t60 = space();
    			tbody2 = element("tbody");

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].c();
    			}

    			t61 = space();
    			section3 = element("section");
    			div25 = element("div");
    			div22 = element("div");
    			div20 = element("div");
    			h22 = element("h2");
    			t62 = text(t62_value);
    			t63 = space();
    			p3 = element("p");
    			t64 = text(t64_value);
    			t65 = space();
    			ul6 = element("ul");

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				each_blocks_3[i].c();
    			}

    			t66 = space();
    			a2 = element("a");
    			t67 = text(t67_value);
    			t68 = space();
    			div21 = element("div");
    			img2 = element("img");
    			t69 = space();
    			h32 = element("h3");
    			t70 = text(t70_value);
    			t71 = space();
    			div23 = element("div");
    			table3 = element("table");
    			thead3 = element("thead");
    			tr3 = element("tr");
    			th11 = element("th");
    			t72 = text(t72_value);
    			t73 = space();
    			th12 = element("th");
    			t74 = text(t74_value);
    			t75 = space();
    			tbody3 = element("tbody");

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].c();
    			}

    			t76 = space();
    			div24 = element("div");
    			if (if_block0) if_block0.c();
    			t77 = space();
    			if (if_block1) if_block1.c();
    			t78 = space();
    			if (if_block2) if_block2.c();
    			t79 = space();
    			section4 = element("section");
    			div29 = element("div");
    			div26 = element("div");
    			h23 = element("h2");
    			t80 = text(t80_value);
    			t81 = space();
    			p4 = element("p");
    			t82 = text(t82_value);
    			t83 = space();
    			div27 = element("div");

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].c();
    			}

    			t84 = space();
    			div28 = element("div");
    			a3 = element("a");
    			t85 = text(t85_value);
    			t86 = space();
    			section5 = element("section");
    			div33 = element("div");
    			div30 = element("div");
    			h24 = element("h2");
    			h24.textContent = "ZIMA KEBAB";
    			t88 = space();
    			p5 = element("p");
    			t89 = text(t89_value);
    			t90 = space();
    			div32 = element("div");
    			div31 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t91 = space();
    			button0 = element("button");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t92 = space();
    			button1 = element("button");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			attr_dev(h1, "class", "svelte-idyddb");
    			add_location(h1, file$h, 189, 4, 8833);
    			attr_dev(p0, "class", "svelte-idyddb");
    			add_location(p0, file$h, 190, 4, 8902);
    			attr_dev(div0, "class", "container svelte-idyddb");
    			add_location(div0, file$h, 188, 2, 8805);
    			attr_dev(section0, "class", "services-hero svelte-idyddb");
    			add_location(section0, file$h, 187, 0, 8771);
    			attr_dev(h20, "class", "svelte-idyddb");
    			add_location(h20, file$h, 201, 10, 9264);
    			attr_dev(p1, "class", "service-description svelte-idyddb");
    			add_location(p1, file$h, 202, 10, 9358);
    			attr_dev(ul0, "class", "feature-list svelte-idyddb");
    			add_location(ul0, file$h, 207, 10, 9760);
    			attr_dev(a0, "href", "/booking");
    			attr_dev(a0, "class", "btn btn-primary svelte-idyddb");
    			add_location(a0, file$h, 215, 10, 10313);
    			attr_dev(div1, "class", "service-content svelte-idyddb");
    			add_location(div1, file$h, 200, 8, 9224);
    			if (!src_url_equal(img0.src, img0_src_value = "images/parking-lot.webp")) attr_dev(img0, "src", img0_src_value);
    			attr_dev(img0, "alt", "Airport Parking");
    			attr_dev(img0, "class", "svelte-idyddb");
    			add_location(img0, file$h, 220, 10, 10495);
    			attr_dev(div2, "class", "service-image svelte-idyddb");
    			add_location(div2, file$h, 219, 8, 10457);
    			attr_dev(div3, "class", "service-grid svelte-idyddb");
    			add_location(div3, file$h, 199, 6, 9189);
    			attr_dev(th0, "class", "svelte-idyddb");
    			add_location(th0, file$h, 228, 14, 10770);
    			attr_dev(th1, "class", "normal-price-header svelte-idyddb");
    			add_location(th1, file$h, 229, 14, 10833);
    			attr_dev(th2, "class", "svelte-idyddb");
    			add_location(th2, file$h, 230, 14, 10939);
    			add_location(tr0, file$h, 227, 12, 10751);
    			attr_dev(thead0, "class", "svelte-idyddb");
    			add_location(thead0, file$h, 226, 10, 10731);
    			add_location(tbody0, file$h, 233, 10, 11051);
    			attr_dev(table0, "class", "pricing-table parking-table svelte-idyddb");
    			add_location(table0, file$h, 225, 8, 10677);
    			attr_dev(div4, "class", "pricing-table-container scrollable-table parking-table-container svelte-idyddb");
    			add_location(div4, file$h, 224, 6, 10590);
    			attr_dev(div5, "class", "container svelte-idyddb");
    			add_location(div5, file$h, 198, 4, 9159);
    			attr_dev(section1, "class", "service-section svelte-idyddb");
    			attr_dev(section1, "id", "parking");
    			add_location(section1, file$h, 197, 2, 9108);
    			attr_dev(div6, "class", "animated-background svelte-idyddb");
    			add_location(div6, file$h, 248, 4, 11483);
    			if (!src_url_equal(img1.src, img1_src_value = "images/car-wash.webp")) attr_dev(img1, "src", img1_src_value);
    			attr_dev(img1, "alt", "Car Wash");
    			attr_dev(img1, "class", "svelte-idyddb");
    			add_location(img1, file$h, 263, 10, 12052);
    			attr_dev(div7, "class", "service-image svelte-idyddb");
    			add_location(div7, file$h, 262, 8, 12014);
    			attr_dev(h21, "class", "svelte-idyddb");
    			add_location(h21, file$h, 266, 10, 12165);
    			attr_dev(p2, "class", "service-description svelte-idyddb");
    			add_location(p2, file$h, 267, 10, 12244);
    			attr_dev(ul1, "class", "feature-list svelte-idyddb");
    			add_location(ul1, file$h, 272, 10, 12667);
    			attr_dev(a1, "href", "/booking");
    			attr_dev(a1, "class", "btn btn-primary svelte-idyddb");
    			add_location(a1, file$h, 280, 10, 13173);
    			attr_dev(div8, "class", "service-content svelte-idyddb");
    			add_location(div8, file$h, 265, 8, 12125);
    			attr_dev(div9, "class", "service-grid reverse svelte-idyddb");
    			add_location(div9, file$h, 261, 6, 11971);
    			attr_dev(h30, "class", "car-wash-title smart-title svelte-idyddb");
    			add_location(h30, file$h, 287, 10, 13369);
    			attr_dev(h40, "class", "inclusion-section-title svelte-idyddb");
    			add_location(h40, file$h, 290, 18, 13599);
    			attr_dev(ul2, "class", "inclusion-pills smart-pills svelte-idyddb");
    			add_location(ul2, file$h, 291, 18, 13705);
    			attr_dev(div10, "class", "inclusion-card frosted-card svelte-idyddb");
    			add_location(div10, file$h, 289, 14, 13539);
    			attr_dev(h41, "class", "inclusion-section-title svelte-idyddb");
    			add_location(h41, file$h, 298, 18, 14037);
    			attr_dev(ul3, "class", "inclusion-pills smart-pills svelte-idyddb");
    			add_location(ul3, file$h, 299, 18, 14143);
    			attr_dev(div11, "class", "inclusion-card frosted-card svelte-idyddb");
    			add_location(div11, file$h, 297, 15, 13977);
    			attr_dev(div12, "class", "package-inclusions-container svelte-idyddb");
    			add_location(div12, file$h, 288, 10, 13482);
    			attr_dev(th3, "class", "svelte-idyddb");
    			add_location(th3, file$h, 310, 26, 14659);
    			attr_dev(th4, "class", "svelte-idyddb");
    			add_location(th4, file$h, 311, 26, 14746);
    			attr_dev(th5, "class", "svelte-idyddb");
    			add_location(th5, file$h, 312, 26, 14847);
    			attr_dev(th6, "class", "svelte-idyddb");
    			add_location(th6, file$h, 313, 26, 14929);
    			add_location(tr1, file$h, 309, 22, 14628);
    			attr_dev(thead1, "class", "svelte-idyddb");
    			add_location(thead1, file$h, 308, 19, 14598);
    			add_location(tbody1, file$h, 316, 18, 15058);
    			attr_dev(table1, "class", "pricing-table car-wash-table smart-table svelte-idyddb");
    			add_location(table1, file$h, 307, 14, 14522);
    			attr_dev(div13, "class", "pricing-table-container scrollable-table car-wash-table-container svelte-idyddb");
    			add_location(div13, file$h, 306, 10, 14428);
    			attr_dev(h31, "class", "car-wash-title premium-title svelte-idyddb");
    			add_location(h31, file$h, 329, 10, 15576);
    			attr_dev(h42, "class", "inclusion-section-title svelte-idyddb");
    			add_location(h42, file$h, 332, 18, 15812);
    			attr_dev(ul4, "class", "inclusion-pills premium-pills svelte-idyddb");
    			add_location(ul4, file$h, 333, 18, 15918);
    			attr_dev(div14, "class", "inclusion-card frosted-card svelte-idyddb");
    			add_location(div14, file$h, 331, 14, 15752);
    			attr_dev(h43, "class", "inclusion-section-title svelte-idyddb");
    			add_location(h43, file$h, 340, 18, 16254);
    			attr_dev(ul5, "class", "inclusion-pills premium-pills svelte-idyddb");
    			add_location(ul5, file$h, 341, 18, 16360);
    			attr_dev(div15, "class", "inclusion-card frosted-card svelte-idyddb");
    			add_location(div15, file$h, 339, 15, 16194);
    			attr_dev(div16, "class", "package-inclusions-container svelte-idyddb");
    			add_location(div16, file$h, 330, 10, 15695);
    			attr_dev(th7, "class", "svelte-idyddb");
    			add_location(th7, file$h, 352, 26, 16882);
    			attr_dev(th8, "class", "svelte-idyddb");
    			add_location(th8, file$h, 353, 26, 16969);
    			attr_dev(th9, "class", "svelte-idyddb");
    			add_location(th9, file$h, 354, 26, 17070);
    			attr_dev(th10, "class", "svelte-idyddb");
    			add_location(th10, file$h, 355, 26, 17152);
    			add_location(tr2, file$h, 351, 22, 16851);
    			attr_dev(thead2, "class", "svelte-idyddb");
    			add_location(thead2, file$h, 350, 19, 16821);
    			add_location(tbody2, file$h, 358, 18, 17281);
    			attr_dev(table2, "class", "pricing-table car-wash-table premium-table svelte-idyddb");
    			add_location(table2, file$h, 349, 14, 16743);
    			attr_dev(div17, "class", "pricing-table-container scrollable-table car-wash-table-container svelte-idyddb");
    			add_location(div17, file$h, 348, 11, 16649);
    			attr_dev(div18, "class", "car-wash-tables svelte-idyddb");
    			add_location(div18, file$h, 286, 6, 13329);
    			attr_dev(div19, "class", "container svelte-idyddb");
    			add_location(div19, file$h, 260, 4, 11941);
    			attr_dev(section2, "class", "service-section svelte-idyddb");
    			attr_dev(section2, "id", "carwash");
    			add_location(section2, file$h, 247, 2, 11432);
    			attr_dev(h22, "class", "svelte-idyddb");
    			add_location(h22, file$h, 378, 10, 17985);
    			attr_dev(p3, "class", "service-description svelte-idyddb");
    			add_location(p3, file$h, 379, 10, 18061);
    			attr_dev(ul6, "class", "feature-list svelte-idyddb");
    			add_location(ul6, file$h, 384, 10, 18451);
    			attr_dev(a2, "href", "/booking");
    			attr_dev(a2, "class", "btn btn-primary svelte-idyddb");
    			add_location(a2, file$h, 392, 10, 18917);
    			attr_dev(div20, "class", "service-content svelte-idyddb");
    			add_location(div20, file$h, 377, 8, 17945);
    			if (!src_url_equal(img2.src, img2_src_value = "images/merc-tyre.webp")) attr_dev(img2, "src", img2_src_value);
    			attr_dev(img2, "alt", "Tire Service");
    			attr_dev(img2, "class", "svelte-idyddb");
    			add_location(img2, file$h, 397, 10, 19099);
    			attr_dev(div21, "class", "service-image svelte-idyddb");
    			add_location(div21, file$h, 396, 8, 19061);
    			attr_dev(div22, "class", "service-grid svelte-idyddb");
    			add_location(div22, file$h, 376, 6, 17910);
    			attr_dev(h32, "class", "tire-main-service-title svelte-idyddb");
    			add_location(h32, file$h, 401, 6, 19189);
    			attr_dev(th11, "class", "svelte-idyddb");
    			add_location(th11, file$h, 408, 14, 19566);
    			attr_dev(th12, "class", "svelte-idyddb");
    			add_location(th12, file$h, 409, 14, 19632);
    			add_location(tr3, file$h, 407, 12, 19547);
    			attr_dev(thead3, "class", "svelte-idyddb");
    			add_location(thead3, file$h, 406, 10, 19527);
    			add_location(tbody3, file$h, 412, 10, 19751);
    			attr_dev(table3, "class", "pricing-table tire-service-main-table svelte-idyddb");
    			add_location(table3, file$h, 405, 8, 19463);
    			attr_dev(div23, "class", "pricing-table-container scrollable-table tire-table-container svelte-idyddb");
    			add_location(div23, file$h, 404, 6, 19379);
    			attr_dev(div24, "class", "tire-services-grid svelte-idyddb");
    			add_location(div24, file$h, 423, 6, 20028);
    			attr_dev(div25, "class", "container svelte-idyddb");
    			add_location(div25, file$h, 375, 4, 17880);
    			attr_dev(section3, "class", "service-section svelte-idyddb");
    			attr_dev(section3, "id", "tire");
    			add_location(section3, file$h, 374, 2, 17832);
    			attr_dev(h23, "class", "svelte-idyddb");
    			add_location(h23, file$h, 461, 8, 21576);
    			attr_dev(p4, "class", "service-description svelte-idyddb");
    			add_location(p4, file$h, 462, 8, 21679);
    			attr_dev(div26, "class", "service-content centered-content svelte-idyddb");
    			add_location(div26, file$h, 460, 6, 21521);
    			attr_dev(div27, "class", "maintenance-bubbles-container svelte-idyddb");
    			add_location(div27, file$h, 469, 6, 22073);
    			attr_dev(a3, "href", "/contact");
    			attr_dev(a3, "class", "btn btn-primary maintenance-contact-btn svelte-idyddb");
    			add_location(a3, file$h, 478, 12, 22373);
    			attr_dev(div28, "class", "centered-button-container svelte-idyddb");
    			add_location(div28, file$h, 477, 6, 22321);
    			attr_dev(div29, "class", "container svelte-idyddb");
    			add_location(div29, file$h, 459, 4, 21491);
    			attr_dev(section4, "class", "service-section svelte-idyddb");
    			attr_dev(section4, "id", "maintenance");
    			add_location(section4, file$h, 458, 2, 21436);
    			attr_dev(h24, "class", "kebab-title svelte-idyddb");
    			add_location(h24, file$h, 490, 8, 22720);
    			attr_dev(p5, "class", "kebab-subtitle svelte-idyddb");
    			add_location(p5, file$h, 491, 8, 22768);
    			attr_dev(div30, "class", "kebab-header svelte-idyddb");
    			add_location(div30, file$h, 489, 6, 22685);
    			attr_dev(div31, "class", "kebab-carousel svelte-idyddb");
    			add_location(div31, file$h, 498, 8, 23205);
    			attr_dev(path0, "d", "M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z");
    			add_location(path0, file$h, 512, 12, 23800);
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "fill", "currentColor");
    			add_location(svg0, file$h, 511, 10, 23707);
    			attr_dev(button0, "class", "kebab-carousel-nav prev svelte-idyddb");
    			attr_dev(button0, "aria-label", "Previous");
    			add_location(button0, file$h, 510, 8, 23599);
    			attr_dev(path1, "d", "M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z");
    			add_location(path1, file$h, 517, 12, 24097);
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "fill", "currentColor");
    			add_location(svg1, file$h, 516, 10, 24004);
    			attr_dev(button1, "class", "kebab-carousel-nav next svelte-idyddb");
    			attr_dev(button1, "aria-label", "Next");
    			add_location(button1, file$h, 515, 8, 23901);
    			attr_dev(div32, "class", "kebab-carousel-container svelte-idyddb");
    			add_location(div32, file$h, 497, 6, 23158);
    			attr_dev(div33, "class", "container svelte-idyddb");
    			add_location(div33, file$h, 488, 4, 22655);
    			attr_dev(section5, "class", "service-section svelte-idyddb");
    			attr_dev(section5, "id", "kebab");
    			add_location(section5, file$h, 487, 2, 22606);
    			attr_dev(div34, "class", "services-container svelte-idyddb");
    			add_location(div34, file$h, 196, 0, 9073);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, p0);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div34, anchor);
    			append_dev(div34, section1);
    			append_dev(section1, div5);
    			append_dev(div5, div3);
    			append_dev(div3, div1);
    			append_dev(div1, h20);
    			append_dev(h20, t4);
    			append_dev(div1, t5);
    			append_dev(div1, p1);
    			append_dev(p1, t6);
    			append_dev(div1, t7);
    			append_dev(div1, ul0);

    			for (let i = 0; i < each_blocks_13.length; i += 1) {
    				if (each_blocks_13[i]) {
    					each_blocks_13[i].m(ul0, null);
    				}
    			}

    			append_dev(div1, t8);
    			append_dev(div1, a0);
    			append_dev(a0, t9);
    			append_dev(div3, t10);
    			append_dev(div3, div2);
    			append_dev(div2, img0);
    			append_dev(div5, t11);
    			append_dev(div5, div4);
    			append_dev(div4, table0);
    			append_dev(table0, thead0);
    			append_dev(thead0, tr0);
    			append_dev(tr0, th0);
    			append_dev(th0, t12);
    			append_dev(tr0, t13);
    			append_dev(tr0, th1);
    			append_dev(th1, t14);
    			append_dev(tr0, t15);
    			append_dev(tr0, th2);
    			append_dev(th2, t16);
    			append_dev(table0, t17);
    			append_dev(table0, tbody0);

    			for (let i = 0; i < each_blocks_12.length; i += 1) {
    				if (each_blocks_12[i]) {
    					each_blocks_12[i].m(tbody0, null);
    				}
    			}

    			append_dev(div34, t18);
    			append_dev(div34, section2);
    			append_dev(section2, div6);

    			for (let i = 0; i < each_blocks_11.length; i += 1) {
    				if (each_blocks_11[i]) {
    					each_blocks_11[i].m(div6, null);
    				}
    			}

    			append_dev(section2, t19);
    			append_dev(section2, div19);
    			append_dev(div19, div9);
    			append_dev(div9, div7);
    			append_dev(div7, img1);
    			append_dev(div9, t20);
    			append_dev(div9, div8);
    			append_dev(div8, h21);
    			append_dev(h21, t21);
    			append_dev(div8, t22);
    			append_dev(div8, p2);
    			append_dev(p2, t23);
    			append_dev(div8, t24);
    			append_dev(div8, ul1);

    			for (let i = 0; i < each_blocks_10.length; i += 1) {
    				if (each_blocks_10[i]) {
    					each_blocks_10[i].m(ul1, null);
    				}
    			}

    			append_dev(div8, t25);
    			append_dev(div8, a1);
    			append_dev(a1, t26);
    			append_dev(div19, t27);
    			append_dev(div19, div18);
    			append_dev(div18, h30);
    			append_dev(h30, t28);
    			append_dev(div18, t29);
    			append_dev(div18, div12);
    			append_dev(div12, div10);
    			append_dev(div10, h40);
    			append_dev(h40, t30);
    			append_dev(div10, t31);
    			append_dev(div10, ul2);

    			for (let i = 0; i < each_blocks_9.length; i += 1) {
    				if (each_blocks_9[i]) {
    					each_blocks_9[i].m(ul2, null);
    				}
    			}

    			append_dev(div12, t32);
    			append_dev(div12, div11);
    			append_dev(div11, h41);
    			append_dev(h41, t33);
    			append_dev(div11, t34);
    			append_dev(div11, ul3);

    			for (let i = 0; i < each_blocks_8.length; i += 1) {
    				if (each_blocks_8[i]) {
    					each_blocks_8[i].m(ul3, null);
    				}
    			}

    			append_dev(div18, t35);
    			append_dev(div18, div13);
    			append_dev(div13, table1);
    			append_dev(table1, thead1);
    			append_dev(thead1, tr1);
    			append_dev(tr1, th3);
    			append_dev(th3, t36);
    			append_dev(tr1, t37);
    			append_dev(tr1, th4);
    			append_dev(th4, t38);
    			append_dev(tr1, t39);
    			append_dev(tr1, th5);
    			append_dev(th5, t40);
    			append_dev(tr1, t41);
    			append_dev(tr1, th6);
    			append_dev(th6, t42);
    			append_dev(table1, t43);
    			append_dev(table1, tbody1);

    			for (let i = 0; i < each_blocks_7.length; i += 1) {
    				if (each_blocks_7[i]) {
    					each_blocks_7[i].m(tbody1, null);
    				}
    			}

    			append_dev(div18, t44);
    			append_dev(div18, h31);
    			append_dev(h31, t45);
    			append_dev(div18, t46);
    			append_dev(div18, div16);
    			append_dev(div16, div14);
    			append_dev(div14, h42);
    			append_dev(h42, t47);
    			append_dev(div14, t48);
    			append_dev(div14, ul4);

    			for (let i = 0; i < each_blocks_6.length; i += 1) {
    				if (each_blocks_6[i]) {
    					each_blocks_6[i].m(ul4, null);
    				}
    			}

    			append_dev(div16, t49);
    			append_dev(div16, div15);
    			append_dev(div15, h43);
    			append_dev(h43, t50);
    			append_dev(div15, t51);
    			append_dev(div15, ul5);

    			for (let i = 0; i < each_blocks_5.length; i += 1) {
    				if (each_blocks_5[i]) {
    					each_blocks_5[i].m(ul5, null);
    				}
    			}

    			append_dev(div18, t52);
    			append_dev(div18, div17);
    			append_dev(div17, table2);
    			append_dev(table2, thead2);
    			append_dev(thead2, tr2);
    			append_dev(tr2, th7);
    			append_dev(th7, t53);
    			append_dev(tr2, t54);
    			append_dev(tr2, th8);
    			append_dev(th8, t55);
    			append_dev(tr2, t56);
    			append_dev(tr2, th9);
    			append_dev(th9, t57);
    			append_dev(tr2, t58);
    			append_dev(tr2, th10);
    			append_dev(th10, t59);
    			append_dev(table2, t60);
    			append_dev(table2, tbody2);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				if (each_blocks_4[i]) {
    					each_blocks_4[i].m(tbody2, null);
    				}
    			}

    			append_dev(div34, t61);
    			append_dev(div34, section3);
    			append_dev(section3, div25);
    			append_dev(div25, div22);
    			append_dev(div22, div20);
    			append_dev(div20, h22);
    			append_dev(h22, t62);
    			append_dev(div20, t63);
    			append_dev(div20, p3);
    			append_dev(p3, t64);
    			append_dev(div20, t65);
    			append_dev(div20, ul6);

    			for (let i = 0; i < each_blocks_3.length; i += 1) {
    				if (each_blocks_3[i]) {
    					each_blocks_3[i].m(ul6, null);
    				}
    			}

    			append_dev(div20, t66);
    			append_dev(div20, a2);
    			append_dev(a2, t67);
    			append_dev(div22, t68);
    			append_dev(div22, div21);
    			append_dev(div21, img2);
    			append_dev(div25, t69);
    			append_dev(div25, h32);
    			append_dev(h32, t70);
    			append_dev(div25, t71);
    			append_dev(div25, div23);
    			append_dev(div23, table3);
    			append_dev(table3, thead3);
    			append_dev(thead3, tr3);
    			append_dev(tr3, th11);
    			append_dev(th11, t72);
    			append_dev(tr3, t73);
    			append_dev(tr3, th12);
    			append_dev(th12, t74);
    			append_dev(table3, t75);
    			append_dev(table3, tbody3);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				if (each_blocks_2[i]) {
    					each_blocks_2[i].m(tbody3, null);
    				}
    			}

    			append_dev(div25, t76);
    			append_dev(div25, div24);
    			if (if_block0) if_block0.m(div24, null);
    			append_dev(div24, t77);
    			if (if_block1) if_block1.m(div24, null);
    			append_dev(div24, t78);
    			if (if_block2) if_block2.m(div24, null);
    			append_dev(div34, t79);
    			append_dev(div34, section4);
    			append_dev(section4, div29);
    			append_dev(div29, div26);
    			append_dev(div26, h23);
    			append_dev(h23, t80);
    			append_dev(div26, t81);
    			append_dev(div26, p4);
    			append_dev(p4, t82);
    			append_dev(div29, t83);
    			append_dev(div29, div27);

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				if (each_blocks_1[i]) {
    					each_blocks_1[i].m(div27, null);
    				}
    			}

    			append_dev(div29, t84);
    			append_dev(div29, div28);
    			append_dev(div28, a3);
    			append_dev(a3, t85);
    			append_dev(div34, t86);
    			append_dev(div34, section5);
    			append_dev(section5, div33);
    			append_dev(div33, div30);
    			append_dev(div30, h24);
    			append_dev(div30, t88);
    			append_dev(div30, p5);
    			append_dev(p5, t89);
    			append_dev(div33, t90);
    			append_dev(div33, div32);
    			append_dev(div32, div31);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div31, null);
    				}
    			}

    			append_dev(div32, t91);
    			append_dev(div32, button0);
    			append_dev(button0, svg0);
    			append_dev(svg0, path0);
    			append_dev(div32, t92);
    			append_dev(div32, button1);
    			append_dev(button1, svg1);
    			append_dev(svg1, path1);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", scrollKebabCarousel(-1), false, false, false, false),
    					listen_dev(button1, "click", scrollKebabCarousel(1), false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty[0] & /*$currentLang*/ 1 && t0_value !== (t0_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'SZOLGÁLTATÁSOK'
    			: 'SERVICES') + "")) set_data_dev(t0, t0_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t2_value !== (t2_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Mindent egy helyen az Ön járművének kényeztetéséhez'
    			: 'Everything in one place to pamper your vehicle') + "")) set_data_dev(t2, t2_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t4_value !== (t4_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? '24/7 REPTÉRI PARKOLÁS'
    			: '24/7 AIRPORT PARKING') + "")) set_data_dev(t4, t4_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t6_value !== (t6_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Biztonságos parkolóhelyeink 24 órás kamerás megfigyeléssel és szakértő személyzettel várják járművét, maximális biztonságot nyújtva.'
    			: 'Our secure parking facility features fenced boundaries and 24/7 CCTV surveillance, ensuring the highest level of security for your vehicle.') + "")) set_data_dev(t6, t6_value);

    			if (dirty[0] & /*$currentLang*/ 1) {
    				each_value_13 = /*$currentLang*/ ctx[0] === 'hu'
    				? [
    						'Biztonságos, kamerával megfigyelt területt',
    						'24/7 személyzet a helyszínen',
    						'Kedvező árak hosszabb tartózkodásra is',
    						'Ingyenes transzfer a repülőtérre és vissza',
    						'Előfoglalási lehetőség'
    					]
    				: [
    						'Secure, camera-monitored area',
    						'24/7 staff on site',
    						'Favorable rates for longer stays',
    						'Free transfer to and from the airport',
    						'Pre-booking option'
    					];

    				validate_each_argument(each_value_13);
    				let i;

    				for (i = 0; i < each_value_13.length; i += 1) {
    					const child_ctx = get_each_context_13(ctx, each_value_13, i);

    					if (each_blocks_13[i]) {
    						each_blocks_13[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_13[i] = create_each_block_13(child_ctx);
    						each_blocks_13[i].c();
    						each_blocks_13[i].m(ul0, null);
    					}
    				}

    				for (; i < each_blocks_13.length; i += 1) {
    					each_blocks_13[i].d(1);
    				}

    				each_blocks_13.length = each_value_13.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t9_value !== (t9_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Foglalás'
    			: 'Book now') + "")) set_data_dev(t9, t9_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t12_value !== (t12_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Nap' : 'Day') + "")) set_data_dev(t12, t12_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t14_value !== (t14_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Normál ár'
    			: 'Normal Price') + "")) set_data_dev(t14, t14_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t16_value !== (t16_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Kedvezményes'
    			: 'Discounted') + "")) set_data_dev(t16, t16_value);

    			if (dirty[0] & /*parkingPrices*/ 2) {
    				each_value_12 = /*parkingPrices*/ ctx[1];
    				validate_each_argument(each_value_12);
    				validate_each_keys(ctx, each_value_12, get_each_context_12, get_key);
    				each_blocks_12 = update_keyed_each(each_blocks_12, dirty, get_key, 1, ctx, each_value_12, each1_lookup, tbody0, destroy_block, create_each_block_12, null, get_each_context_12);
    			}

    			if (dirty & /*Math*/ 0) {
    				each_value_11 = Array(20);
    				validate_each_argument(each_value_11);
    				let i;

    				for (i = 0; i < each_value_11.length; i += 1) {
    					const child_ctx = get_each_context_11(ctx, each_value_11, i);

    					if (each_blocks_11[i]) {
    						each_blocks_11[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_11[i] = create_each_block_11(child_ctx);
    						each_blocks_11[i].c();
    						each_blocks_11[i].m(div6, null);
    					}
    				}

    				for (; i < each_blocks_11.length; i += 1) {
    					each_blocks_11[i].d(1);
    				}

    				each_blocks_11.length = each_value_11.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t21_value !== (t21_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'KÉZI AUTÓMOSÓ'
    			: 'HAND CAR WASH') + "")) set_data_dev(t21, t21_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t23_value !== (t23_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Ajándékozza meg járművét egy fürdőnappal professzionális autómosó szolgáltatásainkkal, amelyek célja, hogy autója csillogóan tisztán és fiatalon maradjon.'
    			: 'Treat your vehicle to a spa day with our professional car washing services aimed at keeping your car looking sparkling clean and youthful.') + "")) set_data_dev(t23, t23_value);

    			if (dirty[0] & /*$currentLang*/ 1) {
    				each_value_10 = /*$currentLang*/ ctx[0] === 'hu'
    				? [
    						'Külső és belső tisztítás',
    						'Prémium waxolás és polírozás',
    						'Kárpittisztítás',
    						'Bőrápolás és kondicionálás',
    						'Gőztisztítás és fertőtlenítés'
    					]
    				: [
    						'Exterior and interior cleaning',
    						'Premium waxing and polishing',
    						'Upholstery cleaning',
    						'Leather care and conditioning',
    						'Steam cleaning and sanitization'
    					];

    				validate_each_argument(each_value_10);
    				let i;

    				for (i = 0; i < each_value_10.length; i += 1) {
    					const child_ctx = get_each_context_10(ctx, each_value_10, i);

    					if (each_blocks_10[i]) {
    						each_blocks_10[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_10[i] = create_each_block_10(child_ctx);
    						each_blocks_10[i].c();
    						each_blocks_10[i].m(ul1, null);
    					}
    				}

    				for (; i < each_blocks_10.length; i += 1) {
    					each_blocks_10[i].d(1);
    				}

    				each_blocks_10.length = each_value_10.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t26_value !== (t26_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Foglalás'
    			: 'Book now') + "")) set_data_dev(t26, t26_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t28_value !== (t28_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'SMART Csomag'
    			: 'SMART Package') + "")) set_data_dev(t28, t28_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t30_value !== (t30_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "")) set_data_dev(t30, t30_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_9 = /*carWashData*/ ctx[2].smart.inclusions.exterior.items;
    				validate_each_argument(each_value_9);
    				let i;

    				for (i = 0; i < each_value_9.length; i += 1) {
    					const child_ctx = get_each_context_9(ctx, each_value_9, i);

    					if (each_blocks_9[i]) {
    						each_blocks_9[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_9[i] = create_each_block_9(child_ctx);
    						each_blocks_9[i].c();
    						each_blocks_9[i].m(ul2, null);
    					}
    				}

    				for (; i < each_blocks_9.length; i += 1) {
    					each_blocks_9[i].d(1);
    				}

    				each_blocks_9.length = each_value_9.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t33_value !== (t33_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "")) set_data_dev(t33, t33_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_8 = /*carWashData*/ ctx[2].smart.inclusions.interior.items;
    				validate_each_argument(each_value_8);
    				let i;

    				for (i = 0; i < each_value_8.length; i += 1) {
    					const child_ctx = get_each_context_8(ctx, each_value_8, i);

    					if (each_blocks_8[i]) {
    						each_blocks_8[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_8[i] = create_each_block_8(child_ctx);
    						each_blocks_8[i].c();
    						each_blocks_8[i].m(ul3, null);
    					}
    				}

    				for (; i < each_blocks_8.length; i += 1) {
    					each_blocks_8[i].d(1);
    				}

    				each_blocks_8.length = each_value_8.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t36_value !== (t36_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Autó típus'
    			: 'Car type') + "")) set_data_dev(t36, t36_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t38_value !== (t38_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Külső & Belső'
    			: 'Exterior & Interior') + "")) set_data_dev(t38, t38_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t40_value !== (t40_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "")) set_data_dev(t40, t40_value);
    			if (dirty[0] & /*$currentLang*/ 1 && t42_value !== (t42_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "")) set_data_dev(t42, t42_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_7 = /*carWashData*/ ctx[2].smart.prices;
    				validate_each_argument(each_value_7);
    				validate_each_keys(ctx, each_value_7, get_each_context_7, get_key_1);
    				each_blocks_7 = update_keyed_each(each_blocks_7, dirty, get_key_1, 1, ctx, each_value_7, each6_lookup, tbody1, destroy_block, create_each_block_7, null, get_each_context_7);
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t45_value !== (t45_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'PREMIUM Csomag'
    			: 'PREMIUM Package') + "")) set_data_dev(t45, t45_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t47_value !== (t47_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "")) set_data_dev(t47, t47_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_6 = /*carWashData*/ ctx[2].premium.inclusions.exterior.items;
    				validate_each_argument(each_value_6);
    				let i;

    				for (i = 0; i < each_value_6.length; i += 1) {
    					const child_ctx = get_each_context_6(ctx, each_value_6, i);

    					if (each_blocks_6[i]) {
    						each_blocks_6[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_6[i] = create_each_block_6(child_ctx);
    						each_blocks_6[i].c();
    						each_blocks_6[i].m(ul4, null);
    					}
    				}

    				for (; i < each_blocks_6.length; i += 1) {
    					each_blocks_6[i].d(1);
    				}

    				each_blocks_6.length = each_value_6.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t50_value !== (t50_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "")) set_data_dev(t50, t50_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_5 = /*carWashData*/ ctx[2].premium.inclusions.interior.items;
    				validate_each_argument(each_value_5);
    				let i;

    				for (i = 0; i < each_value_5.length; i += 1) {
    					const child_ctx = get_each_context_5(ctx, each_value_5, i);

    					if (each_blocks_5[i]) {
    						each_blocks_5[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_5[i] = create_each_block_5(child_ctx);
    						each_blocks_5[i].c();
    						each_blocks_5[i].m(ul5, null);
    					}
    				}

    				for (; i < each_blocks_5.length; i += 1) {
    					each_blocks_5[i].d(1);
    				}

    				each_blocks_5.length = each_value_5.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t53_value !== (t53_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Autó típus'
    			: 'Car type') + "")) set_data_dev(t53, t53_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t55_value !== (t55_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Külső & Belső'
    			: 'Exterior & Interior') + "")) set_data_dev(t55, t55_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t57_value !== (t57_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Külső' : 'Exterior') + "")) set_data_dev(t57, t57_value);
    			if (dirty[0] & /*$currentLang*/ 1 && t59_value !== (t59_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Belső' : 'Interior') + "")) set_data_dev(t59, t59_value);

    			if (dirty[0] & /*carWashData, $currentLang*/ 5) {
    				each_value_4 = /*carWashData*/ ctx[2].premium.prices;
    				validate_each_argument(each_value_4);
    				validate_each_keys(ctx, each_value_4, get_each_context_4, get_key_2);
    				each_blocks_4 = update_keyed_each(each_blocks_4, dirty, get_key_2, 1, ctx, each_value_4, each9_lookup, tbody2, destroy_block, create_each_block_4, null, get_each_context_4);
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t62_value !== (t62_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'GUMISZERVIZ'
    			: 'TIRE SERVICE') + "")) set_data_dev(t62, t62_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t64_value !== (t64_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Szakértő technikusaink készen állnak az abroncsokkal kapcsolatos bármilyen probléma azonnali megoldására, és biztonságosan visszatérni az útra.'
    			: 'Our expert technicians are ready to solve any tire-related problems immediately and get you safely back on the road.') + "")) set_data_dev(t64, t64_value);

    			if (dirty[0] & /*$currentLang*/ 1) {
    				each_value_3 = /*$currentLang*/ ctx[0] === 'hu'
    				? [
    						'Gumiabroncs csere és javítás',
    						'Kerék kiegyensúlyozás',
    						'Szezonális tárolás',
    						'Futóműbeállítás',
    						'Prémium márkák széles választéka'
    					]
    				: [
    						'Tire replacement and repair',
    						'Wheel balancing',
    						'Seasonal storage',
    						'Wheel alignment',
    						'Wide selection of premium brands'
    					];

    				validate_each_argument(each_value_3);
    				let i;

    				for (i = 0; i < each_value_3.length; i += 1) {
    					const child_ctx = get_each_context_3(ctx, each_value_3, i);

    					if (each_blocks_3[i]) {
    						each_blocks_3[i].p(child_ctx, dirty);
    					} else {
    						each_blocks_3[i] = create_each_block_3(child_ctx);
    						each_blocks_3[i].c();
    						each_blocks_3[i].m(ul6, null);
    					}
    				}

    				for (; i < each_blocks_3.length; i += 1) {
    					each_blocks_3[i].d(1);
    				}

    				each_blocks_3.length = each_value_3.length;
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t67_value !== (t67_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Foglalás'
    			: 'Book now') + "")) set_data_dev(t67, t67_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t70_value !== (t70_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Kerék le-fel szerelés, Gumiabroncs átszerelés és Centrízorás'
    			: 'Wheel & Tire Fitting, Alignment') + "")) set_data_dev(t70, t70_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t72_value !== (t72_value = (/*$currentLang*/ ctx[0] === 'hu' ? 'Méret' : 'Size') + "")) set_data_dev(t72, t72_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t74_value !== (t74_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Ár / 4 abroncs'
    			: 'Price / 4 tires') + "")) set_data_dev(t74, t74_value);

    			if (dirty[0] & /*tireServicePrices*/ 8) {
    				each_value_2 = /*tireServicePrices*/ ctx[3].fullServicePer4Tires;
    				validate_each_argument(each_value_2);
    				validate_each_keys(ctx, each_value_2, get_each_context_2, get_key_3);
    				each_blocks_2 = update_keyed_each(each_blocks_2, dirty, get_key_3, 1, ctx, each_value_2, each11_lookup, tbody3, destroy_block, create_each_block_2, null, get_each_context_2);
    			}

    			if (/*tireServicePrices*/ ctx[3].patching) if_block0.p(ctx, dirty);
    			if (/*tireServicePrices*/ ctx[3].wheelMountingOnly) if_block1.p(ctx, dirty);
    			if (/*tireServicePrices*/ ctx[3].alloyWheelMountingAlignment) if_block2.p(ctx, dirty);

    			if (dirty[0] & /*$currentLang*/ 1 && t80_value !== (t80_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'MÁRKAFÜGGETLEN AUTÓSZERVIZ'
    			: 'BRAND-AGNOSTIC CAR SERVICE') + "")) set_data_dev(t80, t80_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t82_value !== (t82_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Szakértő csapatunk széles körű szervizszolgáltatást nyújt minden autómárka számára, a rendszeres karbantartástól a komplex javításokig.'
    			: 'Our expert team provides a wide range of maintenance services for all car brands, from routine maintenance to complex repairs.') + "")) set_data_dev(t82, t82_value);

    			if (dirty[0] & /*maintenanceServices, $currentLang*/ 17) {
    				each_value_1 = /*maintenanceServices*/ ctx[4];
    				validate_each_argument(each_value_1);
    				validate_each_keys(ctx, each_value_1, get_each_context_1$1, get_key_4);
    				each_blocks_1 = update_keyed_each(each_blocks_1, dirty, get_key_4, 1, ctx, each_value_1, each12_lookup, div27, destroy_block, create_each_block_1$1, null, get_each_context_1$1);
    			}

    			if (dirty[0] & /*$currentLang*/ 1 && t85_value !== (t85_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Kérj árajánlatot'
    			: 'Request a Quote') + "")) set_data_dev(t85, t85_value);

    			if (dirty[0] & /*$currentLang*/ 1 && t89_value !== (t89_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Egyél egy finom kebabot vagy igyál egy hideg üdítőt, amíg az autóddal foglalkozunk! Kényelmes étkezési lehetőség a kiszolgálás mellett.'
    			: 'Grab a freshly made kebab or a cold drink while we take care of your car! Convenient dining option right at our service center.') + "")) set_data_dev(t89, t89_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div34);
    			destroy_each(each_blocks_13, detaching);

    			for (let i = 0; i < each_blocks_12.length; i += 1) {
    				each_blocks_12[i].d();
    			}

    			destroy_each(each_blocks_11, detaching);
    			destroy_each(each_blocks_10, detaching);
    			destroy_each(each_blocks_9, detaching);
    			destroy_each(each_blocks_8, detaching);

    			for (let i = 0; i < each_blocks_7.length; i += 1) {
    				each_blocks_7[i].d();
    			}

    			destroy_each(each_blocks_6, detaching);
    			destroy_each(each_blocks_5, detaching);

    			for (let i = 0; i < each_blocks_4.length; i += 1) {
    				each_blocks_4[i].d();
    			}

    			destroy_each(each_blocks_3, detaching);

    			for (let i = 0; i < each_blocks_2.length; i += 1) {
    				each_blocks_2[i].d();
    			}

    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();

    			for (let i = 0; i < each_blocks_1.length; i += 1) {
    				each_blocks_1[i].d();
    			}

    			destroy_each(each_blocks, detaching);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$h.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function scrollKebabCarousel(direction) {
    	return () => {
    		const carousel = document.querySelector('.kebab-carousel');
    		if (!carousel) return;
    		const scrollAmount = carousel.offsetWidth * 0.8 * direction;
    		carousel.scrollBy({ left: scrollAmount, behavior: 'smooth' });
    	};
    }

    function instance$h($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(0, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Services', slots, []);
    	gsapWithCSS.registerPlugin(ScrollTrigger);
    	let lang;

    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	// Initialize kebab carousel on mount
    	onMount(() => {
    		const carousel = document.querySelector('.kebab-carousel');
    		if (!carousel) return;

    		// Auto-scroll carousel
    		const autoScroll = setInterval(
    			() => {
    				if (carousel.scrollLeft + carousel.offsetWidth >= carousel.scrollWidth - 10) {
    					carousel.scrollTo({ left: 0, behavior: 'smooth' });
    				} else {
    					carousel.scrollBy({
    						left: carousel.offsetWidth * 0.8,
    						behavior: 'smooth'
    					});
    				}
    			},
    			5000
    		);

    		return () => clearInterval(autoScroll);
    	});

    	// --- Data Structures ---
    	const parkingPrices = [
    		{
    			days: 1,
    			normal: '7500 Ft',
    			discount: '5500 Ft'
    		},
    		{
    			days: 2,
    			normal: '8200 Ft',
    			discount: '6200 Ft'
    		},
    		{
    			days: 3,
    			normal: '9000 Ft',
    			discount: '7000 Ft'
    		},
    		{
    			days: 4,
    			normal: '9800 Ft',
    			discount: '8000 Ft'
    		},
    		{
    			days: 5,
    			normal: '10500 Ft',
    			discount: '8600 Ft'
    		},
    		{
    			days: 6,
    			normal: '11200 Ft',
    			discount: '9500 Ft'
    		},
    		{
    			days: 7,
    			normal: '12500 Ft',
    			discount: '10500 Ft'
    		},
    		{
    			days: 8,
    			normal: '14000 Ft',
    			discount: '11000 Ft'
    		},
    		{
    			days: 9,
    			normal: '15500 Ft',
    			discount: '11500 Ft'
    		},
    		{
    			days: 10,
    			normal: '16000 Ft',
    			discount: '12000 Ft'
    		},
    		{
    			days: 11,
    			normal: '17000 Ft',
    			discount: '12400 Ft'
    		},
    		{
    			days: 12,
    			normal: '17600 Ft',
    			discount: '12900 Ft'
    		},
    		{
    			days: 13,
    			normal: '18000 Ft',
    			discount: '13500 Ft'
    		},
    		{
    			days: 14,
    			normal: '18500 Ft',
    			discount: '13900 Ft'
    		},
    		{
    			days: 15,
    			normal: '19000 Ft',
    			discount: '14300 Ft'
    		},
    		{
    			days: 16,
    			normal: '19500 Ft',
    			discount: '14700 Ft'
    		},
    		{
    			days: 17,
    			normal: '20000 Ft',
    			discount: '15000 Ft'
    		},
    		{
    			days: 18,
    			normal: '20500 Ft',
    			discount: '15400 Ft'
    		},
    		{
    			days: 19,
    			normal: '21000 Ft',
    			discount: '15800 Ft'
    		},
    		{
    			days: 20,
    			normal: '21500 Ft',
    			discount: '16200 Ft'
    		},
    		{
    			days: 21,
    			normal: '22000 Ft',
    			discount: '16600 Ft'
    		},
    		{
    			days: 22,
    			normal: '22500 Ft',
    			discount: '17000 Ft'
    		},
    		{
    			days: 23,
    			normal: '23000 Ft',
    			discount: '17400 Ft'
    		},
    		{
    			days: 24,
    			normal: '23500 Ft',
    			discount: '17800 Ft'
    		},
    		{
    			days: 25,
    			normal: '24000 Ft',
    			discount: '18200 Ft'
    		},
    		{
    			days: 26,
    			normal: '24500 Ft',
    			discount: '18600 Ft'
    		},
    		{
    			days: 27,
    			normal: '25000 Ft',
    			discount: '19000 Ft'
    		},
    		{
    			days: 28,
    			normal: '25500 Ft',
    			discount: '19500 Ft'
    		},
    		{
    			days: 29,
    			normal: '26000 Ft',
    			discount: '19500 Ft'
    		},
    		{
    			days: 30,
    			normal: '26000 Ft',
    			discount: '19500 Ft'
    		}
    	];

    	const carWashData = {
    		smart: {
    			name: { hu: 'SMART', en: 'SMART' },
    			inclusions: {
    				exterior: {
    					name: { hu: 'Külső', en: 'Exterior' },
    					items: [
    						{
    							hu: 'Hideg vizes öblítés',
    							en: 'Cold water rinse'
    						},
    						{
    							hu: 'Magasnyomású öblítés',
    							en: 'High-pressure rinse'
    						},
    						{ hu: 'Habos mosás', en: 'Foam wash' },
    						{
    							hu: 'Kézi szivacsos mosás',
    							en: 'Hand sponge wash'
    						},
    						{
    							hu: 'Felni tisztítás',
    							en: 'Wheel cleaning'
    						},
    						{
    							hu: 'Kézi mikroszálas szárazra törlés',
    							en: 'Hand microfiber drying'
    						},
    						{
    							hu: 'Falctisztítás',
    							en: 'Door jamb cleaning'
    						}
    					]
    				},
    				interior: {
    					name: { hu: 'Belső', en: 'Interior' },
    					items: [
    						{ hu: 'Szemétszedés', en: 'Trash removal' },
    						{
    							hu: 'Gyors porszívózás',
    							en: 'Quick vacuuming'
    						},
    						{
    							hu: 'Csomagtartó takarítás',
    							en: 'Trunk cleaning'
    						},
    						{
    							hu: 'Lábnyomtisztítás',
    							en: 'Footprint cleaning'
    						},
    						{ hu: 'Portörlés', en: 'Dusting' }
    					]
    				}
    			},
    			prices: [
    				{
    					type: { hu: 'Személyautó', en: 'Passenger Car' },
    					'Exterior & Interior': '8900 Ft',
    					'Exterior': '5600 Ft',
    					'Interior': '3800 Ft'
    				},
    				{
    					type: { hu: 'SUV/Kisbusz', en: 'SUV/Minivan' },
    					'Exterior & Interior': '10500 Ft',
    					'Exterior': '6100 Ft',
    					'Interior': '4300 Ft'
    				}
    			]
    		},
    		premium: {
    			name: { hu: 'PREMIUM', en: 'PREMIUM' },
    			inclusions: {
    				exterior: {
    					name: { hu: 'Külső', en: 'Exterior' },
    					items: [
    						{
    							hu: 'Hideg vizes öblítés',
    							en: 'Cold water rinse'
    						},
    						{
    							hu: 'Magasnyomású öblítés',
    							en: 'High-pressure rinse'
    						},
    						{
    							hu: 'Előmosás, bogároldás',
    							en: 'Pre-wash, bug removal'
    						},
    						{
    							hu: 'Aktív habos mosás',
    							en: 'Active foam wash'
    						},
    						{
    							hu: 'Kézi szivacsos mosás',
    							en: 'Hand sponge wash'
    						},
    						{
    							hu: 'Kézi felni tisztítás',
    							en: 'Hand wheel cleaning'
    						},
    						{
    							hu: 'Kézi mikroszálas szárazra törlés',
    							en: 'Hand microfiber drying'
    						},
    						{
    							hu: 'Levegős szárazra fújás',
    							en: 'Air drying'
    						},
    						{ hu: 'Gumiápolás', en: 'Tire dressing' }
    					]
    				},
    				interior: {
    					name: { hu: 'Belső', en: 'Interior' },
    					items: [
    						{ hu: 'Szemétszedés', en: 'Trash removal' },
    						{
    							hu: 'Teljes porszívózás',
    							en: 'Full vacuuming'
    						},
    						{
    							hu: 'Csomagtartó tisztítás',
    							en: 'Trunk cleaning'
    						},
    						{
    							hu: 'Lábtér tisztítás',
    							en: 'Footwell cleaning'
    						},
    						{ hu: 'Portörlés', en: 'Dusting' },
    						{
    							hu: 'Ablaktisztítás',
    							en: 'Window cleaning'
    						},
    						{
    							hu: 'Műanyag tisztítás és ápolás',
    							en: 'Plastic cleaning and conditioning'
    						}
    					]
    				}
    			},
    			prices: [
    				{
    					type: { hu: 'Személyautó', en: 'Passenger Car' },
    					'Exterior & Interior': '11900 Ft',
    					'Exterior': '6100 Ft',
    					'Interior': '4300 Ft'
    				},
    				{
    					type: { hu: 'SUV/Kisbusz', en: 'SUV/Minivan' },
    					'Exterior & Interior': '13500 Ft',
    					'Exterior': '6900 Ft',
    					'Interior': '5600 Ft'
    				}
    			]
    		}
    	};

    	// REFACTORED Tire Service Prices
    	const tireServicePrices = {
    		// Main service: Wheel fitting, tire fitting, alignment per 4 tires
    		fullServicePer4Tires: [
    			{ size: '16"', price: '16000 Ft' },
    			{ size: '17"', price: '17000 Ft' },
    			{ size: '18"', price: '19000 Ft' },
    			{ size: '19"', price: '21000 Ft' },
    			{ size: '20"', price: '22000 Ft' },
    			{ size: '21"', price: '25000 Ft' }
    		],
    		// Other services
    		patching: {
    			// Defekt javítás
    			name: {
    				hu: 'Defekt javítás',
    				en: 'Tire Patching'
    			},
    			pricePerTyre: '2000 Ft',
    			note: {
    				hu: '/ gumi + szerelés',
    				en: '/ tire + mounting'
    			}
    		},
    		wheelMountingOnly: {
    			// Kerék le-fel szerelés (4 pcs)
    			name: {
    				hu: 'Kerék le-fel szerelés',
    				en: 'Wheel Mounting Only'
    			},
    			pricePer4pcs: '5000 Ft',
    			note: { hu: '/ 4 darab', en: '/ 4 pcs' }
    		},
    		alloyWheelMountingAlignment: {
    			// Kerék le-fel szerelés és centrírozás könnyűfém felnin (4 pcs)
    			name: {
    				hu: 'Kerék le-fel szerelés és centrírozás (könnyűfém felni)',
    				en: 'Alloy Wheel Mounting & Alignment'
    			},
    			pricePer4pcs: '12000 Ft',
    			note: { hu: '/ 4 darab', en: '/ 4 pcs' }
    		}
    	};

    	const maintenanceServices = [
    		{
    			name: {
    				hu: 'Autóvizsgálat',
    				en: 'Car Inspection'
    			}
    		},
    		{
    			name: { hu: 'Fékjavítás', en: 'Brake Repair' }
    		},
    		{
    			name: {
    				hu: 'Futómű javítások',
    				en: 'Chassis Repairs'
    			}
    		},
    		{
    			name: {
    				hu: 'Kuplung javítás, kuplungcsere',
    				en: 'Clutch Repair, Replacement'
    			}
    		},
    		{
    			name: {
    				hu: 'Olajcsere, szűrők és váltó olajcsere',
    				en: 'Oil Change, Filters, and Gearbox Oil Change'
    			}
    		},
    		{
    			name: {
    				hu: 'Vezérműszíj csere',
    				en: 'Timing Belt Replacement'
    			}
    		},
    		{
    			name: {
    				hu: 'Váltó felújítás',
    				en: 'Gearbox Overhaul'
    			}
    		},
    		{
    			name: {
    				hu: 'Motorjavítás, felújítás',
    				en: 'Engine Repair, Overhaul'
    			}
    		}
    	];

    	onMount(() => {
    		// Animate service sections
    		gsapWithCSS.from('.service-section', {
    			y: 50,
    			opacity: 0,
    			duration: 0.8,
    			stagger: 0.3,
    			scrollTrigger: {
    				trigger: '.services-container',
    				start: 'top 70%'
    			}
    		});
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Services> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		gsap: gsapWithCSS,
    		ScrollTrigger,
    		lang,
    		scrollKebabCarousel,
    		parkingPrices,
    		carWashData,
    		tireServicePrices,
    		maintenanceServices,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('lang' in $$props) lang = $$props.lang;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		$currentLang,
    		parkingPrices,
    		carWashData,
    		tireServicePrices,
    		maintenanceServices
    	];
    }

    class Services extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$h, create_fragment$h, safe_not_equal, {}, null, [-1, -1]);

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Services",
    			options,
    			id: create_fragment$h.name
    		});
    	}
    }

    /* src/pages/Contact.svelte generated by Svelte v3.59.2 */

    const { console: console_1$6 } = globals;
    const file$g = "src/pages/Contact.svelte";

    // (288:6) {:else}
    function create_else_block$8(ctx) {
    	let t0;
    	let form;
    	let div0;
    	let label0;
    	let t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.name + "";
    	let t1;
    	let t2;
    	let input0;
    	let input0_placeholder_value;
    	let input0_aria_invalid_value;
    	let t3;
    	let t4;
    	let div3;
    	let div1;
    	let label1;
    	let t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.email + "";
    	let t5;
    	let t6;
    	let input1;
    	let input1_placeholder_value;
    	let input1_aria_invalid_value;
    	let t7;
    	let t8;
    	let div2;
    	let label2;
    	let t9_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.phone + "";
    	let t9;
    	let t10;
    	let input2;
    	let input2_placeholder_value;
    	let t11;
    	let div4;
    	let label3;
    	let t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.subject + "";
    	let t12;
    	let t13;
    	let input3;
    	let input3_placeholder_value;
    	let input3_aria_invalid_value;
    	let t14;
    	let t15;
    	let div5;
    	let label4;
    	let t16_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.message + "";
    	let t16;
    	let t17;
    	let textarea;
    	let textarea_placeholder_value;
    	let textarea_aria_invalid_value;
    	let t18;
    	let t19;
    	let button;

    	let t20_value = (/*isSubmitting*/ ctx[1]
    	? '...'
    	: /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.button) + "";

    	let t20;
    	let mounted;
    	let dispose;
    	let if_block0 = /*errorMessage*/ ctx[3] && !/*formErrors*/ ctx[4].name && !/*formErrors*/ ctx[4].email && !/*formErrors*/ ctx[4].subject && !/*formErrors*/ ctx[4].message && create_if_block_7$3(ctx);
    	let if_block1 = /*formErrors*/ ctx[4].name && create_if_block_6$4(ctx);
    	let if_block2 = /*formErrors*/ ctx[4].email && create_if_block_5$4(ctx);
    	let if_block3 = /*formErrors*/ ctx[4].subject && create_if_block_4$6(ctx);
    	let if_block4 = /*formErrors*/ ctx[4].message && create_if_block_3$7(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			form = element("form");
    			div0 = element("div");
    			label0 = element("label");
    			t1 = text(t1_value);
    			t2 = space();
    			input0 = element("input");
    			t3 = space();
    			if (if_block1) if_block1.c();
    			t4 = space();
    			div3 = element("div");
    			div1 = element("div");
    			label1 = element("label");
    			t5 = text(t5_value);
    			t6 = space();
    			input1 = element("input");
    			t7 = space();
    			if (if_block2) if_block2.c();
    			t8 = space();
    			div2 = element("div");
    			label2 = element("label");
    			t9 = text(t9_value);
    			t10 = space();
    			input2 = element("input");
    			t11 = space();
    			div4 = element("div");
    			label3 = element("label");
    			t12 = text(t12_value);
    			t13 = space();
    			input3 = element("input");
    			t14 = space();
    			if (if_block3) if_block3.c();
    			t15 = space();
    			div5 = element("div");
    			label4 = element("label");
    			t16 = text(t16_value);
    			t17 = space();
    			textarea = element("textarea");
    			t18 = space();
    			if (if_block4) if_block4.c();
    			t19 = space();
    			button = element("button");
    			t20 = text(t20_value);
    			attr_dev(label0, "for", "name");
    			attr_dev(label0, "class", "svelte-104mhdt");
    			add_location(label0, file$g, 293, 12, 11236);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "name");
    			input0.required = true;

    			attr_dev(input0, "placeholder", input0_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg a nevét'
    			: 'Enter your name');

    			attr_dev(input0, "aria-invalid", input0_aria_invalid_value = /*formErrors*/ ctx[4].name ? 'true' : 'false');
    			attr_dev(input0, "class", "svelte-104mhdt");
    			add_location(input0, file$g, 294, 12, 11308);
    			attr_dev(div0, "class", "form-group svelte-104mhdt");
    			add_location(div0, file$g, 292, 10, 11199);
    			attr_dev(label1, "for", "email");
    			attr_dev(label1, "class", "svelte-104mhdt");
    			add_location(label1, file$g, 309, 14, 11814);
    			attr_dev(input1, "type", "email");
    			attr_dev(input1, "id", "email");
    			input1.required = true;

    			attr_dev(input1, "placeholder", input1_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg email címét'
    			: 'Enter your email address');

    			attr_dev(input1, "aria-invalid", input1_aria_invalid_value = /*formErrors*/ ctx[4].email ? 'true' : 'false');
    			attr_dev(input1, "class", "svelte-104mhdt");
    			add_location(input1, file$g, 310, 14, 11890);
    			attr_dev(div1, "class", "form-group svelte-104mhdt");
    			add_location(div1, file$g, 308, 12, 11775);
    			attr_dev(label2, "for", "phone");
    			attr_dev(label2, "class", "svelte-104mhdt");
    			add_location(label2, file$g, 324, 14, 12405);
    			attr_dev(input2, "type", "tel");
    			attr_dev(input2, "id", "phone");

    			attr_dev(input2, "placeholder", input2_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg telefonszámát'
    			: 'Enter your phone number');

    			attr_dev(input2, "class", "svelte-104mhdt");
    			add_location(input2, file$g, 325, 14, 12481);
    			attr_dev(div2, "class", "form-group svelte-104mhdt");
    			add_location(div2, file$g, 323, 12, 12366);
    			attr_dev(div3, "class", "form-row svelte-104mhdt");
    			add_location(div3, file$g, 307, 10, 11740);
    			attr_dev(label3, "for", "subject");
    			attr_dev(label3, "class", "svelte-104mhdt");
    			add_location(label3, file$g, 335, 12, 12794);
    			attr_dev(input3, "type", "text");
    			attr_dev(input3, "id", "subject");
    			input3.required = true;

    			attr_dev(input3, "placeholder", input3_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg a tárgyat'
    			: 'Enter the subject');

    			attr_dev(input3, "aria-invalid", input3_aria_invalid_value = /*formErrors*/ ctx[4].subject ? 'true' : 'false');
    			attr_dev(input3, "class", "svelte-104mhdt");
    			add_location(input3, file$g, 336, 12, 12872);
    			attr_dev(div4, "class", "form-group svelte-104mhdt");
    			add_location(div4, file$g, 334, 10, 12757);
    			attr_dev(label4, "for", "message");
    			attr_dev(label4, "class", "svelte-104mhdt");
    			add_location(label4, file$g, 350, 12, 13361);
    			attr_dev(textarea, "id", "message");
    			attr_dev(textarea, "rows", "5");
    			textarea.required = true;

    			attr_dev(textarea, "placeholder", textarea_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Írja meg üzenetét'
    			: 'Enter your message');

    			attr_dev(textarea, "aria-invalid", textarea_aria_invalid_value = /*formErrors*/ ctx[4].message ? 'true' : 'false');
    			attr_dev(textarea, "class", "svelte-104mhdt");
    			add_location(textarea, file$g, 351, 12, 13439);
    			attr_dev(div5, "class", "form-group svelte-104mhdt");
    			add_location(div5, file$g, 349, 10, 13324);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-primary svelte-104mhdt");
    			button.disabled = /*isSubmitting*/ ctx[1];
    			add_location(button, file$g, 364, 10, 13901);
    			attr_dev(form, "class", "contact-form svelte-104mhdt");
    			add_location(form, file$g, 291, 8, 11121);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, form, anchor);
    			append_dev(form, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, input0);
    			set_input_value(input0, /*formData*/ ctx[0].name);
    			append_dev(div0, t3);
    			if (if_block1) if_block1.m(div0, null);
    			append_dev(form, t4);
    			append_dev(form, div3);
    			append_dev(div3, div1);
    			append_dev(div1, label1);
    			append_dev(label1, t5);
    			append_dev(div1, t6);
    			append_dev(div1, input1);
    			set_input_value(input1, /*formData*/ ctx[0].email);
    			append_dev(div1, t7);
    			if (if_block2) if_block2.m(div1, null);
    			append_dev(div3, t8);
    			append_dev(div3, div2);
    			append_dev(div2, label2);
    			append_dev(label2, t9);
    			append_dev(div2, t10);
    			append_dev(div2, input2);
    			set_input_value(input2, /*formData*/ ctx[0].phone);
    			append_dev(form, t11);
    			append_dev(form, div4);
    			append_dev(div4, label3);
    			append_dev(label3, t12);
    			append_dev(div4, t13);
    			append_dev(div4, input3);
    			set_input_value(input3, /*formData*/ ctx[0].subject);
    			append_dev(div4, t14);
    			if (if_block3) if_block3.m(div4, null);
    			append_dev(form, t15);
    			append_dev(form, div5);
    			append_dev(div5, label4);
    			append_dev(label4, t16);
    			append_dev(div5, t17);
    			append_dev(div5, textarea);
    			set_input_value(textarea, /*formData*/ ctx[0].message);
    			append_dev(div5, t18);
    			if (if_block4) if_block4.m(div5, null);
    			append_dev(form, t19);
    			append_dev(form, button);
    			append_dev(button, t20);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[9]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[10]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[11]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[12]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[13]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[7]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (/*errorMessage*/ ctx[3] && !/*formErrors*/ ctx[4].name && !/*formErrors*/ ctx[4].email && !/*formErrors*/ ctx[4].subject && !/*formErrors*/ ctx[4].message) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_7$3(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*$currentLang*/ 32 && t1_value !== (t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.name + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*$currentLang*/ 32 && input0_placeholder_value !== (input0_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg a nevét'
    			: 'Enter your name')) {
    				attr_dev(input0, "placeholder", input0_placeholder_value);
    			}

    			if (dirty & /*formErrors*/ 16 && input0_aria_invalid_value !== (input0_aria_invalid_value = /*formErrors*/ ctx[4].name ? 'true' : 'false')) {
    				attr_dev(input0, "aria-invalid", input0_aria_invalid_value);
    			}

    			if (dirty & /*formData*/ 1 && input0.value !== /*formData*/ ctx[0].name) {
    				set_input_value(input0, /*formData*/ ctx[0].name);
    			}

    			if (/*formErrors*/ ctx[4].name) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_6$4(ctx);
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*$currentLang*/ 32 && t5_value !== (t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.email + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*$currentLang*/ 32 && input1_placeholder_value !== (input1_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg email címét'
    			: 'Enter your email address')) {
    				attr_dev(input1, "placeholder", input1_placeholder_value);
    			}

    			if (dirty & /*formErrors*/ 16 && input1_aria_invalid_value !== (input1_aria_invalid_value = /*formErrors*/ ctx[4].email ? 'true' : 'false')) {
    				attr_dev(input1, "aria-invalid", input1_aria_invalid_value);
    			}

    			if (dirty & /*formData*/ 1 && input1.value !== /*formData*/ ctx[0].email) {
    				set_input_value(input1, /*formData*/ ctx[0].email);
    			}

    			if (/*formErrors*/ ctx[4].email) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_5$4(ctx);
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*$currentLang*/ 32 && t9_value !== (t9_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.phone + "")) set_data_dev(t9, t9_value);

    			if (dirty & /*$currentLang*/ 32 && input2_placeholder_value !== (input2_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg telefonszámát'
    			: 'Enter your phone number')) {
    				attr_dev(input2, "placeholder", input2_placeholder_value);
    			}

    			if (dirty & /*formData*/ 1) {
    				set_input_value(input2, /*formData*/ ctx[0].phone);
    			}

    			if (dirty & /*$currentLang*/ 32 && t12_value !== (t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.subject + "")) set_data_dev(t12, t12_value);

    			if (dirty & /*$currentLang*/ 32 && input3_placeholder_value !== (input3_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Adja meg a tárgyat'
    			: 'Enter the subject')) {
    				attr_dev(input3, "placeholder", input3_placeholder_value);
    			}

    			if (dirty & /*formErrors*/ 16 && input3_aria_invalid_value !== (input3_aria_invalid_value = /*formErrors*/ ctx[4].subject ? 'true' : 'false')) {
    				attr_dev(input3, "aria-invalid", input3_aria_invalid_value);
    			}

    			if (dirty & /*formData*/ 1 && input3.value !== /*formData*/ ctx[0].subject) {
    				set_input_value(input3, /*formData*/ ctx[0].subject);
    			}

    			if (/*formErrors*/ ctx[4].subject) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_4$6(ctx);
    					if_block3.c();
    					if_block3.m(div4, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (dirty & /*$currentLang*/ 32 && t16_value !== (t16_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.message + "")) set_data_dev(t16, t16_value);

    			if (dirty & /*$currentLang*/ 32 && textarea_placeholder_value !== (textarea_placeholder_value = /*$currentLang*/ ctx[5] === 'hu'
    			? 'Írja meg üzenetét'
    			: 'Enter your message')) {
    				attr_dev(textarea, "placeholder", textarea_placeholder_value);
    			}

    			if (dirty & /*formErrors*/ 16 && textarea_aria_invalid_value !== (textarea_aria_invalid_value = /*formErrors*/ ctx[4].message ? 'true' : 'false')) {
    				attr_dev(textarea, "aria-invalid", textarea_aria_invalid_value);
    			}

    			if (dirty & /*formData*/ 1) {
    				set_input_value(textarea, /*formData*/ ctx[0].message);
    			}

    			if (/*formErrors*/ ctx[4].message) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_3$7(ctx);
    					if_block4.c();
    					if_block4.m(div5, null);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (dirty & /*isSubmitting, $currentLang*/ 34 && t20_value !== (t20_value = (/*isSubmitting*/ ctx[1]
    			? '...'
    			: /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.button) + "")) set_data_dev(t20, t20_value);

    			if (dirty & /*isSubmitting*/ 2) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[1]);
    			}
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(form);
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$8.name,
    		type: "else",
    		source: "(288:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (278:6) {#if isSuccess}
    function create_if_block_1$b(ctx) {
    	let div;
    	let svg;
    	let path;
    	let t0;
    	let p;
    	let t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.success + "";
    	let t1;
    	let t2;
    	let if_block_anchor;
    	let if_block = /*errorMessage*/ ctx[3] && create_if_block_2$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			t2 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(path, "d", "M12 2C6.48 2 2 6.48 2 12C2 17.52 6.48 22 12 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 12 2ZM10 17L5 12L6.41 10.59L10 14.17L17.59 6.58L19 8L10 17Z");
    			add_location(path, file$g, 280, 12, 10478);
    			attr_dev(svg, "width", "64");
    			attr_dev(svg, "height", "64");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "#0088cc");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "class", "svelte-104mhdt");
    			add_location(svg, file$g, 279, 10, 10367);
    			attr_dev(p, "class", "svelte-104mhdt");
    			add_location(p, file$g, 282, 10, 10664);
    			attr_dev(div, "class", "success-message svelte-104mhdt");
    			add_location(div, file$g, 278, 8, 10327);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, svg);
    			append_dev(svg, path);
    			append_dev(div, t0);
    			append_dev(div, p);
    			append_dev(p, t1);
    			insert_dev(target, t2, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*$currentLang*/ 32 && t1_value !== (t1_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.success + "")) set_data_dev(t1, t1_value);

    			if (/*errorMessage*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$9(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t2);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$b.name,
    		type: "if",
    		source: "(278:6) {#if isSuccess}",
    		ctx
    	});

    	return block;
    }

    // (289:8) {#if errorMessage && !formErrors.name && !formErrors.email && !formErrors.subject && !formErrors.message}
    function create_if_block_7$3(ctx) {
    	let p;
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(/*errorMessage*/ ctx[3]);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-bottom", "1.5rem");
    			add_location(p, file$g, 289, 11, 11004);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$3.name,
    		type: "if",
    		source: "(289:8) {#if errorMessage && !formErrors.name && !formErrors.email && !formErrors.subject && !formErrors.message}",
    		ctx
    	});

    	return block;
    }

    // (303:12) {#if formErrors.name}
    function create_if_block_6$4(ctx) {
    	let p;
    	let t_1_value = /*formErrors*/ ctx[4].name + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(t_1_value);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			add_location(p, file$g, 303, 14, 11647);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].name + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$4.name,
    		type: "if",
    		source: "(303:12) {#if formErrors.name}",
    		ctx
    	});

    	return block;
    }

    // (319:15) {#if formErrors.email}
    function create_if_block_5$4(ctx) {
    	let p;
    	let t_1_value = /*formErrors*/ ctx[4].email + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(t_1_value);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			add_location(p, file$g, 319, 16, 12266);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].email + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$4.name,
    		type: "if",
    		source: "(319:15) {#if formErrors.email}",
    		ctx
    	});

    	return block;
    }

    // (345:13) {#if formErrors.subject}
    function create_if_block_4$6(ctx) {
    	let p;
    	let t_1_value = /*formErrors*/ ctx[4].subject + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(t_1_value);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			add_location(p, file$g, 345, 14, 13228);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].subject + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$6.name,
    		type: "if",
    		source: "(345:13) {#if formErrors.subject}",
    		ctx
    	});

    	return block;
    }

    // (360:13) {#if formErrors.message}
    function create_if_block_3$7(ctx) {
    	let p;
    	let t_1_value = /*formErrors*/ ctx[4].message + "";
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(t_1_value);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			add_location(p, file$g, 360, 14, 13805);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 16 && t_1_value !== (t_1_value = /*formErrors*/ ctx[4].message + "")) set_data_dev(t_1, t_1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$7.name,
    		type: "if",
    		source: "(360:13) {#if formErrors.message}",
    		ctx
    	});

    	return block;
    }

    // (285:8) {#if errorMessage}
    function create_if_block_2$9(ctx) {
    	let p;
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(/*errorMessage*/ ctx[3]);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "1rem");
    			add_location(p, file$g, 285, 11, 10761);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$9.name,
    		type: "if",
    		source: "(285:8) {#if errorMessage}",
    		ctx
    	});

    	return block;
    }

    // (374:7) {#if errorMessage && !isSuccess && (formErrors.name || formErrors.email || formErrors.subject || formErrors.message)}
    function create_if_block$d(ctx) {
    	let p;
    	let t_1;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t_1 = text(/*errorMessage*/ ctx[3]);
    			attr_dev(p, "class", "error-message svelte-104mhdt");
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "1.5rem");
    			add_location(p, file$g, 374, 11, 14274);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t_1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMessage*/ 8) set_data_dev(t_1, /*errorMessage*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$d.name,
    		type: "if",
    		source: "(374:7) {#if errorMessage && !isSuccess && (formErrors.name || formErrors.email || formErrors.subject || formErrors.message)}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$g(ctx) {
    	let section0;
    	let div0;
    	let h1;
    	let t0_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].title + "";
    	let t0;
    	let t1;
    	let p0;
    	let t2_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].subtitle + "";
    	let t2;
    	let t3;
    	let section1;
    	let div16;
    	let div15;
    	let div13;
    	let div3;
    	let div1;
    	let svg0;
    	let path0;
    	let t4;
    	let div2;
    	let h30;
    	let t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.title + "";
    	let t5;
    	let t6;
    	let p1;
    	let t7_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.content + "";
    	let t7;
    	let t8;
    	let div6;
    	let div4;
    	let svg1;
    	let path1;
    	let t9;
    	let div5;
    	let h31;
    	let t10_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.title + "";
    	let t10;
    	let t11;
    	let p2;
    	let a0;
    	let t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.content + "";
    	let t12;
    	let t13;
    	let div9;
    	let div7;
    	let svg2;
    	let path2;
    	let t14;
    	let div8;
    	let h32;
    	let t15_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.title + "";
    	let t15;
    	let t16;
    	let p3;
    	let a1;
    	let t17_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.content + "";
    	let t17;
    	let t18;
    	let div12;
    	let div10;
    	let svg3;
    	let path3;
    	let t19;
    	let div11;
    	let h33;
    	let t20_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.title + "";
    	let t20;
    	let t21;
    	let p4;
    	let raw_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.content + "";
    	let t22;
    	let div14;
    	let h2;
    	let t23_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.title + "";
    	let t23;
    	let t24;
    	let t25;
    	let t26;
    	let section2;
    	let div17;
    	let iframe;
    	let iframe_src_value;
    	let t27;
    	let button;

    	let t28_value = (/*$currentLang*/ ctx[5] === 'hu'
    	? 'Útvonaltervezés'
    	: 'Get Directions') + "";

    	let t28;
    	let t29;
    	let svg4;
    	let path4;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*isSuccess*/ ctx[2]) return create_if_block_1$b;
    		return create_else_block$8;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*errorMessage*/ ctx[3] && !/*isSuccess*/ ctx[2] && (/*formErrors*/ ctx[4].name || /*formErrors*/ ctx[4].email || /*formErrors*/ ctx[4].subject || /*formErrors*/ ctx[4].message) && create_if_block$d(ctx);

    	const block = {
    		c: function create() {
    			section0 = element("section");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p0 = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			section1 = element("section");
    			div16 = element("div");
    			div15 = element("div");
    			div13 = element("div");
    			div3 = element("div");
    			div1 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			t4 = space();
    			div2 = element("div");
    			h30 = element("h3");
    			t5 = text(t5_value);
    			t6 = space();
    			p1 = element("p");
    			t7 = text(t7_value);
    			t8 = space();
    			div6 = element("div");
    			div4 = element("div");
    			svg1 = svg_element("svg");
    			path1 = svg_element("path");
    			t9 = space();
    			div5 = element("div");
    			h31 = element("h3");
    			t10 = text(t10_value);
    			t11 = space();
    			p2 = element("p");
    			a0 = element("a");
    			t12 = text(t12_value);
    			t13 = space();
    			div9 = element("div");
    			div7 = element("div");
    			svg2 = svg_element("svg");
    			path2 = svg_element("path");
    			t14 = space();
    			div8 = element("div");
    			h32 = element("h3");
    			t15 = text(t15_value);
    			t16 = space();
    			p3 = element("p");
    			a1 = element("a");
    			t17 = text(t17_value);
    			t18 = space();
    			div12 = element("div");
    			div10 = element("div");
    			svg3 = svg_element("svg");
    			path3 = svg_element("path");
    			t19 = space();
    			div11 = element("div");
    			h33 = element("h3");
    			t20 = text(t20_value);
    			t21 = space();
    			p4 = element("p");
    			t22 = space();
    			div14 = element("div");
    			h2 = element("h2");
    			t23 = text(t23_value);
    			t24 = space();
    			if_block0.c();
    			t25 = space();
    			if (if_block1) if_block1.c();
    			t26 = space();
    			section2 = element("section");
    			div17 = element("div");
    			iframe = element("iframe");
    			t27 = space();
    			button = element("button");
    			t28 = text(t28_value);
    			t29 = space();
    			svg4 = svg_element("svg");
    			path4 = svg_element("path");
    			attr_dev(h1, "class", "svelte-104mhdt");
    			add_location(h1, file$g, 216, 2, 7308);
    			attr_dev(p0, "class", "svelte-104mhdt");
    			add_location(p0, file$g, 217, 2, 7349);
    			attr_dev(div0, "class", "container");
    			add_location(div0, file$g, 215, 0, 7282);
    			attr_dev(section0, "class", "contact-hero svelte-104mhdt");
    			add_location(section0, file$g, 214, 0, 7251);
    			attr_dev(path0, "d", "M12 2C8.13 2 5 5.13 5 9C5 14.25 12 22 12 22C12 22 19 14.25 19 9C19 5.13 15.87 2 12 2ZM12 11.5C10.62 11.5 9.5 10.38 9.5 9C9.5 7.62 10.62 6.5 12 6.5C13.38 6.5 14.5 7.62 14.5 9C14.5 10.38 13.38 11.5 12 11.5Z");
    			attr_dev(path0, "fill", "currentColor");
    			add_location(path0, file$g, 228, 12, 7701);
    			attr_dev(svg0, "width", "24");
    			attr_dev(svg0, "height", "24");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$g, 227, 10, 7593);
    			attr_dev(div1, "class", "icon svelte-104mhdt");
    			add_location(div1, file$g, 226, 8, 7564);
    			attr_dev(h30, "class", "svelte-104mhdt");
    			add_location(h30, file$g, 232, 10, 8015);
    			attr_dev(p1, "class", "svelte-104mhdt");
    			add_location(p1, file$g, 233, 10, 8072);
    			attr_dev(div2, "class", "info-content svelte-104mhdt");
    			add_location(div2, file$g, 231, 8, 7978);
    			attr_dev(div3, "class", "info-card svelte-104mhdt");
    			add_location(div3, file$g, 225, 6, 7532);
    			attr_dev(path1, "d", "M6.62 10.79C8.06 13.62 10.38 15.94 13.21 17.38L15.41 15.18C15.69 14.9 16.08 14.82 16.43 14.93C17.55 15.3 18.75 15.5 20 15.5C20.55 15.5 21 15.95 21 16.5V20C21 20.55 20.55 21 20 21C10.61 21 3 13.39 3 4C3 3.45 3.45 3 4 3H7.5C8.05 3 8.5 3.45 8.5 4C8.5 5.25 8.7 6.45 9.07 7.57C9.18 7.92 9.1 8.31 8.82 8.59L6.62 10.79Z");
    			attr_dev(path1, "fill", "currentColor");
    			add_location(path1, file$g, 240, 12, 8323);
    			attr_dev(svg1, "width", "24");
    			attr_dev(svg1, "height", "24");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg1, file$g, 239, 10, 8215);
    			attr_dev(div4, "class", "icon svelte-104mhdt");
    			add_location(div4, file$g, 238, 8, 8186);
    			attr_dev(h31, "class", "svelte-104mhdt");
    			add_location(h31, file$g, 244, 10, 8745);
    			attr_dev(a0, "href", "tel:+36705550588");
    			attr_dev(a0, "class", "contact-link svelte-104mhdt");
    			add_location(a0, file$g, 245, 13, 8803);
    			attr_dev(p2, "class", "svelte-104mhdt");
    			add_location(p2, file$g, 245, 10, 8800);
    			attr_dev(div5, "class", "info-content svelte-104mhdt");
    			add_location(div5, file$g, 243, 8, 8708);
    			attr_dev(div6, "class", "info-card svelte-104mhdt");
    			add_location(div6, file$g, 237, 6, 8154);
    			attr_dev(path2, "d", "M20 4H4C2.9 4 2.01 4.9 2.01 6L2 18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6C22 4.9 21.1 4 20 4ZM20 8L12 13L4 8V6L12 11L20 6V8Z");
    			attr_dev(path2, "fill", "currentColor");
    			add_location(path2, file$g, 252, 12, 9101);
    			attr_dev(svg2, "width", "24");
    			attr_dev(svg2, "height", "24");
    			attr_dev(svg2, "viewBox", "0 0 24 24");
    			attr_dev(svg2, "fill", "none");
    			attr_dev(svg2, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg2, file$g, 251, 10, 8993);
    			attr_dev(div7, "class", "icon svelte-104mhdt");
    			add_location(div7, file$g, 250, 8, 8964);
    			attr_dev(h32, "class", "svelte-104mhdt");
    			add_location(h32, file$g, 256, 10, 9342);
    			attr_dev(a1, "href", "mailto:info@zima-auto.com");
    			attr_dev(a1, "class", "contact-link svelte-104mhdt");
    			add_location(a1, file$g, 257, 13, 9400);
    			attr_dev(p3, "class", "svelte-104mhdt");
    			add_location(p3, file$g, 257, 10, 9397);
    			attr_dev(div8, "class", "info-content svelte-104mhdt");
    			add_location(div8, file$g, 255, 8, 9305);
    			attr_dev(div9, "class", "info-card svelte-104mhdt");
    			add_location(div9, file$g, 249, 6, 8932);
    			attr_dev(path3, "d", "M11.99 2C6.47 2 2 6.48 2 12C2 17.52 6.47 22 11.99 22C17.52 22 22 17.52 22 12C22 6.48 17.52 2 11.99 2ZM12 20C7.58 20 4 16.42 4 12C4 7.58 7.58 4 12 4C16.42 4 20 7.58 20 12C20 16.42 16.42 20 12 20ZM12.5 7H11V13L16.25 16.15L17 14.92L12.5 12.25V7Z");
    			attr_dev(path3, "fill", "currentColor");
    			add_location(path3, file$g, 264, 12, 9707);
    			attr_dev(svg3, "width", "24");
    			attr_dev(svg3, "height", "24");
    			attr_dev(svg3, "viewBox", "0 0 24 24");
    			attr_dev(svg3, "fill", "none");
    			attr_dev(svg3, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg3, file$g, 263, 10, 9599);
    			attr_dev(div10, "class", "icon svelte-104mhdt");
    			add_location(div10, file$g, 262, 8, 9570);
    			attr_dev(h33, "class", "svelte-104mhdt");
    			add_location(h33, file$g, 268, 10, 10059);
    			attr_dev(p4, "class", "svelte-104mhdt");
    			add_location(p4, file$g, 269, 10, 10114);
    			attr_dev(div11, "class", "info-content svelte-104mhdt");
    			add_location(div11, file$g, 267, 8, 10022);
    			attr_dev(div12, "class", "info-card svelte-104mhdt");
    			add_location(div12, file$g, 261, 6, 9538);
    			attr_dev(div13, "class", "contact-info svelte-104mhdt");
    			add_location(div13, file$g, 224, 4, 7499);
    			attr_dev(h2, "class", "svelte-104mhdt");
    			add_location(h2, file$g, 275, 6, 10252);
    			attr_dev(div14, "class", "contact-form-container svelte-104mhdt");
    			add_location(div14, file$g, 274, 4, 10209);
    			attr_dev(div15, "class", "contact-grid svelte-104mhdt");
    			add_location(div15, file$g, 223, 2, 7468);
    			attr_dev(div16, "class", "container");
    			add_location(div16, file$g, 222, 0, 7442);
    			attr_dev(section1, "class", "contact-section svelte-104mhdt");
    			add_location(section1, file$g, 221, 0, 7408);
    			if (!src_url_equal(iframe.src, iframe_src_value = "https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d2700.102580768995!2d19.230113876877105!3d47.40994027117247!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x4741c1ece824d30f%3A0x632898beef8d5983!2sZima%20Auto%20Airport%20Parking%20-%20Aut%C3%B3szerv%C3%ADz%20-%20Gumiszerv%C3%ADz%20-%20K%C3%A9zi%20aut%C3%B3mos%C3%B3!5e0!3m2!1sen!2shu!4v1745609320883!5m2!1sen!2shu")) attr_dev(iframe, "src", iframe_src_value);
    			attr_dev(iframe, "width", "100%");
    			attr_dev(iframe, "height", "450");
    			set_style(iframe, "border", "0");
    			iframe.allowFullscreen = "";
    			attr_dev(iframe, "loading", "lazy");
    			attr_dev(iframe, "referrerpolicy", "no-referrer-when-downgrade");
    			attr_dev(iframe, "title", "Zima Auto location");
    			attr_dev(iframe, "class", "svelte-104mhdt");
    			add_location(iframe, file$g, 382, 4, 14476);
    			attr_dev(path4, "d", "M9 18l6-6-6-6");
    			add_location(path4, file$g, 398, 8, 15430);
    			attr_dev(svg4, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg4, "width", "16");
    			attr_dev(svg4, "height", "16");
    			attr_dev(svg4, "viewBox", "0 0 24 24");
    			attr_dev(svg4, "fill", "none");
    			attr_dev(svg4, "stroke", "currentColor");
    			attr_dev(svg4, "stroke-width", "2");
    			attr_dev(svg4, "stroke-linecap", "round");
    			attr_dev(svg4, "stroke-linejoin", "round");
    			add_location(svg4, file$g, 397, 6, 15240);
    			attr_dev(button, "class", "directions-link svelte-104mhdt");
    			add_location(button, file$g, 392, 4, 15079);
    			attr_dev(div17, "class", "map-container svelte-104mhdt");
    			add_location(div17, file$g, 381, 2, 14444);
    			attr_dev(section2, "class", "map-section svelte-104mhdt");
    			add_location(section2, file$g, 380, 0, 14412);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section0, anchor);
    			append_dev(section0, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, p0);
    			append_dev(p0, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, section1, anchor);
    			append_dev(section1, div16);
    			append_dev(div16, div15);
    			append_dev(div15, div13);
    			append_dev(div13, div3);
    			append_dev(div3, div1);
    			append_dev(div1, svg0);
    			append_dev(svg0, path0);
    			append_dev(div3, t4);
    			append_dev(div3, div2);
    			append_dev(div2, h30);
    			append_dev(h30, t5);
    			append_dev(div2, t6);
    			append_dev(div2, p1);
    			append_dev(p1, t7);
    			append_dev(div13, t8);
    			append_dev(div13, div6);
    			append_dev(div6, div4);
    			append_dev(div4, svg1);
    			append_dev(svg1, path1);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, h31);
    			append_dev(h31, t10);
    			append_dev(div5, t11);
    			append_dev(div5, p2);
    			append_dev(p2, a0);
    			append_dev(a0, t12);
    			append_dev(div13, t13);
    			append_dev(div13, div9);
    			append_dev(div9, div7);
    			append_dev(div7, svg2);
    			append_dev(svg2, path2);
    			append_dev(div9, t14);
    			append_dev(div9, div8);
    			append_dev(div8, h32);
    			append_dev(h32, t15);
    			append_dev(div8, t16);
    			append_dev(div8, p3);
    			append_dev(p3, a1);
    			append_dev(a1, t17);
    			append_dev(div13, t18);
    			append_dev(div13, div12);
    			append_dev(div12, div10);
    			append_dev(div10, svg3);
    			append_dev(svg3, path3);
    			append_dev(div12, t19);
    			append_dev(div12, div11);
    			append_dev(div11, h33);
    			append_dev(h33, t20);
    			append_dev(div11, t21);
    			append_dev(div11, p4);
    			p4.innerHTML = raw_value;
    			append_dev(div15, t22);
    			append_dev(div15, div14);
    			append_dev(div14, h2);
    			append_dev(h2, t23);
    			append_dev(div14, t24);
    			if_block0.m(div14, null);
    			append_dev(div14, t25);
    			if (if_block1) if_block1.m(div14, null);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, section2, anchor);
    			append_dev(section2, div17);
    			append_dev(div17, iframe);
    			append_dev(div17, t27);
    			append_dev(div17, button);
    			append_dev(button, t28);
    			append_dev(button, t29);
    			append_dev(button, svg4);
    			append_dev(svg4, path4);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", openGoogleMapsDirections, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentLang*/ 32 && t0_value !== (t0_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*$currentLang*/ 32 && t2_value !== (t2_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].subtitle + "")) set_data_dev(t2, t2_value);
    			if (dirty & /*$currentLang*/ 32 && t5_value !== (t5_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.title + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*$currentLang*/ 32 && t7_value !== (t7_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].address.content + "")) set_data_dev(t7, t7_value);
    			if (dirty & /*$currentLang*/ 32 && t10_value !== (t10_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.title + "")) set_data_dev(t10, t10_value);
    			if (dirty & /*$currentLang*/ 32 && t12_value !== (t12_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].phone.content + "")) set_data_dev(t12, t12_value);
    			if (dirty & /*$currentLang*/ 32 && t15_value !== (t15_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.title + "")) set_data_dev(t15, t15_value);
    			if (dirty & /*$currentLang*/ 32 && t17_value !== (t17_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].email.content + "")) set_data_dev(t17, t17_value);
    			if (dirty & /*$currentLang*/ 32 && t20_value !== (t20_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.title + "")) set_data_dev(t20, t20_value);
    			if (dirty & /*$currentLang*/ 32 && raw_value !== (raw_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].hours.content + "")) p4.innerHTML = raw_value;			if (dirty & /*$currentLang*/ 32 && t23_value !== (t23_value = /*content*/ ctx[6][/*$currentLang*/ ctx[5]].form.title + "")) set_data_dev(t23, t23_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div14, t25);
    				}
    			}

    			if (/*errorMessage*/ ctx[3] && !/*isSuccess*/ ctx[2] && (/*formErrors*/ ctx[4].name || /*formErrors*/ ctx[4].email || /*formErrors*/ ctx[4].subject || /*formErrors*/ ctx[4].message)) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$d(ctx);
    					if_block1.c();
    					if_block1.m(div14, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*$currentLang*/ 32 && t28_value !== (t28_value = (/*$currentLang*/ ctx[5] === 'hu'
    			? 'Útvonaltervezés'
    			: 'Get Directions') + "")) set_data_dev(t28, t28_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section0);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(section1);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(section2);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$g.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function openGoogleMapsDirections() {
    	// Using the specific URL that initiates directions to Zima Auto
    	window.open('https://www.google.com/maps/place/Zima+Auto+Airport+Parking+-+Aut%C3%B3szerv%C3%ADz+-+Gumiszerv%C3%ADz+-+K%C3%A9zi+aut%C3%B3mos%C3%B3/@47.4099403,19.2301139,17z/data=!3m1!4b1!4m6!3m5!1s0x4741c1ece824d30f:0x632898beef8d5983!8m2!3d47.4099403!4d19.2326888!16s%2Fg%2F11vyx0730g?entry=ttu&g_ep=EgoyMDI1MDQyMy4wIKXMDSoASAFQAw%3D%3D', '_blank');
    }

    function instance$g($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(5, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Contact', slots, []);
    	let { navigate } = $$props;

    	// Ensure ScrollTrigger is installed (npm install gsap scrolltrigger)
    	// and imported if you want the map animation to trigger on scroll.
    	// If you don't want scroll-triggered map animation, remove these lines
    	// and the scrollTrigger property from the map's gsap.from call.
    	// import { ScrollTrigger } from 'gsap/ScrollTrigger';
    	// gsap.registerPlugin(ScrollTrigger);
    	let lang;

    	// showDirectionsPopup and related functions are removed
    	// as we are now directly linking to Google Maps directions
    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		lang = value;
    	});

    	// Form data
    	let formData = {
    		name: '',
    		email: '',
    		phone: '',
    		subject: '',
    		message: ''
    	};

    	// Contact content translations - UPDATED OPENING HOURS FORMAT BASED ON SCREENSHOT
    	const content = {
    		hu: {
    			title: 'KAPCSOLAT',
    			subtitle: 'Vegye fel velünk a kapcsolatot, és segítünk mindenben!',
    			address: {
    				title: 'CÍMÜNK',
    				content: 'Vecsés Széchényi utca 62 mellett, Hrsz 0182/55, 2220'
    			},
    			phone: {
    				title: 'TELEFON',
    				content: '06 70 555 0588'
    			},
    			email: {
    				title: 'EMAIL',
    				content: 'info@zima-auto.com'
    			},
    			hours: {
    				title: 'NYITVATARTÁS',
    				// Updated content to match screenshot format
    				content: '<strong>Parkoló:</strong><br>24/7<br><br><strong>Kézi Autómosó:</strong><br>H-Szo (08:00-18:00)<br><br><strong>Autó Szerviz:</strong><br>H-Szo (08:00-17:00)<br><br><strong>Gumiszerviz:</strong><br>H-Szo (08:00-17:00)'
    			},
    			form: {
    				title: 'KÜLDJÖN ÜZENETET',
    				name: 'Név',
    				email: 'Email',
    				phone: 'Telefonszám',
    				subject: 'Tárgy',
    				message: 'Üzenet',
    				button: 'KÜLDÉS',
    				success: 'Köszönjük üzenetét! Hamarosan válaszolunk.'
    			}
    		},
    		en: {
    			title: 'CONTACT',
    			subtitle: 'Get in touch with us and we\'ll help with anything you need!',
    			address: {
    				title: 'ADDRESS',
    				content: 'Next to Vecsés Széchényi Street 62, Plot 0182/55, 2220'
    			},
    			phone: {
    				title: 'PHONE',
    				content: '06 70 555 0588'
    			},
    			email: {
    				title: 'EMAIL',
    				content: 'info@zima-auto.com'
    			},
    			hours: {
    				title: 'BUSINESS HOURS',
    				// Updated content to match screenshot format (translated)
    				content: '<strong>Parking:</strong><br>24/7<br><br><strong>Car Wash:</strong><br>Mon-Sat (08:00-18:00)<br><br><strong>Auto Service:</strong><br>Mon-Sat (08:00-17:00)<br><br><strong>Tire Service:</strong><br>Mon-Sat (08:00-17:00)'
    			},
    			form: {
    				title: 'SEND A MESSAGE',
    				name: 'Name',
    				email: 'Email',
    				phone: 'Phone',
    				subject: 'Subject',
    				message: 'Message',
    				button: 'SEND',
    				success: 'Thank you for your message! We\'ll get back to you soon.'
    			}
    		}
    	};

    	// Form submission handling
    	let isSubmitting = false;

    	let isSuccess = false;
    	let errorMessage = '';
    	let formErrors = {}; // Added formErrors object for client-side validation

    	// Function to validate form before submission
    	function validateForm() {
    		let isValid = true;
    		$$invalidate(4, formErrors = {}); // Reset errors

    		if (!formData.name.trim()) {
    			$$invalidate(
    				4,
    				formErrors.name = $currentLang === 'hu'
    				? 'Kérjük adja meg a nevét'
    				: 'Please enter your name',
    				formErrors
    			);

    			isValid = false;
    		}

    		if (!formData.email.trim()) {
    			$$invalidate(
    				4,
    				formErrors.email = $currentLang === 'hu'
    				? 'Kérjük adja meg email címét'
    				: 'Please enter your email address',
    				formErrors
    			);

    			isValid = false;
    		} else if (!(/^[^\s@]+@[^\s@]+\.[^\s@]+$/).test(formData.email)) {
    			$$invalidate(
    				4,
    				formErrors.email = $currentLang === 'hu'
    				? 'Érvénytelen email cím'
    				: 'Invalid email address',
    				formErrors
    			);

    			isValid = false;
    		}

    		if (!formData.subject.trim()) {
    			$$invalidate(
    				4,
    				formErrors.subject = $currentLang === 'hu'
    				? 'Kérjük adja meg a tárgyat'
    				: 'Please enter a subject',
    				formErrors
    			);

    			isValid = false;
    		}

    		if (!formData.message.trim()) {
    			$$invalidate(
    				4,
    				formErrors.message = $currentLang === 'hu'
    				? 'Kérjük írja meg üzenetét'
    				: 'Please enter your message',
    				formErrors
    			);

    			isValid = false;
    		}

    		return isValid;
    	}

    	async function handleSubmit() {
    		if (!validateForm()) {
    			$$invalidate(3, errorMessage = $currentLang === 'hu'
    			? 'Kérjük javítsa a hibákat az űrlapon.'
    			: 'Please correct the errors in the form.');

    			$$invalidate(2, isSuccess = false); // Ensure success message is hidden
    			return;
    		}

    		$$invalidate(1, isSubmitting = true);
    		$$invalidate(3, errorMessage = ''); // Clear previous errors

    		try {
    			const contactData = {
    				service: 'contactForm',
    				customerName: formData.name,
    				customerEmail: formData.email,
    				customerPhone: formData.phone || '',
    				subject: formData.subject || 'Contact Form Inquiry',
    				message: formData.message,
    				adminEmail: 'ahmedhasimov@zima-auto.com', // Updated admin email
    				
    			};

    			console.log('Sending contact form data to backend:', contactData);

    			const response = await fetch('https://zima-auto-backend.fly.dev/api/send-contact-email', {
    				method: 'POST',
    				headers: { 'Content-Type': 'application/json' },
    				body: JSON.stringify(contactData)
    			});

    			const result = await response.json();

    			if (response.ok) {
    				console.log('Contact form submitted successfully:', result);

    				// Reset form after successful submission
    				$$invalidate(0, formData = {
    					name: '',
    					email: '',
    					phone: '',
    					subject: '',
    					message: ''
    				});

    				$$invalidate(4, formErrors = {}); // Also clear form errors on success

    				// Use navigate function for client-side routing to thank you page
    				navigate('thankyou');
    			} else {
    				console.error('Backend reported failure:', response.status, result.message);

    				$$invalidate(3, errorMessage = result.message || ($currentLang === 'hu'
    				? 'Hiba történt az üzenet küldése során. Kérjük, próbálja újra később.'
    				: 'An error occurred while sending your message. Please try again later.'));

    				$$invalidate(2, isSuccess = false);
    			}
    		} catch(error) {
    			console.error('Error submitting contact form:', error);

    			$$invalidate(3, errorMessage = $currentLang === 'hu'
    			? 'Hiba történt a szerverhez való kapcsolódás során. Kérjük, próbálja újra később.'
    			: 'An error occurred while connecting to the server. Please try again later.');

    			$$invalidate(2, isSuccess = false);
    		} finally {
    			$$invalidate(1, isSubmitting = false);
    		}
    	}

    	$$self.$$.on_mount.push(function () {
    		if (navigate === undefined && !('navigate' in $$props || $$self.$$.bound[$$self.$$.props['navigate']])) {
    			console_1$6.warn("<Contact> was created without expected prop 'navigate'");
    		}
    	});

    	const writable_props = ['navigate'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$6.warn(`<Contact> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formData.name = this.value;
    		$$invalidate(0, formData);
    	}

    	function input1_input_handler() {
    		formData.email = this.value;
    		$$invalidate(0, formData);
    	}

    	function input2_input_handler() {
    		formData.phone = this.value;
    		$$invalidate(0, formData);
    	}

    	function input3_input_handler() {
    		formData.subject = this.value;
    		$$invalidate(0, formData);
    	}

    	function textarea_input_handler() {
    		formData.message = this.value;
    		$$invalidate(0, formData);
    	}

    	$$self.$$set = $$props => {
    		if ('navigate' in $$props) $$invalidate(8, navigate = $$props.navigate);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		t,
    		gsap: gsapWithCSS,
    		navigate,
    		lang,
    		formData,
    		content,
    		isSubmitting,
    		isSuccess,
    		errorMessage,
    		formErrors,
    		validateForm,
    		handleSubmit,
    		openGoogleMapsDirections,
    		$currentLang
    	});

    	$$self.$inject_state = $$props => {
    		if ('navigate' in $$props) $$invalidate(8, navigate = $$props.navigate);
    		if ('lang' in $$props) lang = $$props.lang;
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    		if ('isSubmitting' in $$props) $$invalidate(1, isSubmitting = $$props.isSubmitting);
    		if ('isSuccess' in $$props) $$invalidate(2, isSuccess = $$props.isSuccess);
    		if ('errorMessage' in $$props) $$invalidate(3, errorMessage = $$props.errorMessage);
    		if ('formErrors' in $$props) $$invalidate(4, formErrors = $$props.formErrors);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		formData,
    		isSubmitting,
    		isSuccess,
    		errorMessage,
    		formErrors,
    		$currentLang,
    		content,
    		handleSubmit,
    		navigate,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		textarea_input_handler
    	];
    }

    class Contact extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$g, create_fragment$g, safe_not_equal, { navigate: 8 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Contact",
    			options,
    			id: create_fragment$g.name
    		});
    	}

    	get navigate() {
    		throw new Error("<Contact>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set navigate(value) {
    		throw new Error("<Contact>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/LoadingSpinner.svelte generated by Svelte v3.59.2 */

    const file$f = "src/components/LoadingSpinner.svelte";

    function create_fragment$f(ctx) {
    	let div2;
    	let div1;
    	let div0;

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			attr_dev(div0, "class", "spinner-inner svelte-8cxzyj");
    			add_location(div0, file$f, 7, 4, 211);
    			attr_dev(div1, "class", "spinner svelte-8cxzyj");
    			set_style(div1, "width", /*size*/ ctx[0]);
    			set_style(div1, "height", /*size*/ ctx[0]);
    			set_style(div1, "border-color", /*color*/ ctx[1]);
    			add_location(div1, file$f, 6, 2, 123);
    			attr_dev(div2, "class", "spinner-container svelte-8cxzyj");
    			add_location(div2, file$f, 5, 0, 89);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div1);
    			append_dev(div1, div0);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*size*/ 1) {
    				set_style(div1, "width", /*size*/ ctx[0]);
    			}

    			if (dirty & /*size*/ 1) {
    				set_style(div1, "height", /*size*/ ctx[0]);
    			}

    			if (dirty & /*color*/ 2) {
    				set_style(div1, "border-color", /*color*/ ctx[1]);
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$f.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$f($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('LoadingSpinner', slots, []);
    	let { size = '1.5rem' } = $$props;
    	let { color = 'var(--primary)' } = $$props;
    	const writable_props = ['size', 'color'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<LoadingSpinner> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    	};

    	$$self.$capture_state = () => ({ size, color });

    	$$self.$inject_state = $$props => {
    		if ('size' in $$props) $$invalidate(0, size = $$props.size);
    		if ('color' in $$props) $$invalidate(1, color = $$props.color);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [size, color];
    }

    class LoadingSpinner extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$f, create_fragment$f, safe_not_equal, { size: 0, color: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "LoadingSpinner",
    			options,
    			id: create_fragment$f.name
    		});
    	}

    	get size() {
    		throw new Error("<LoadingSpinner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set size(value) {
    		throw new Error("<LoadingSpinner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get color() {
    		throw new Error("<LoadingSpinner>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set color(value) {
    		throw new Error("<LoadingSpinner>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/ServiceSelection.svelte generated by Svelte v3.59.2 */
    const file$e = "src/components/ServiceSelection.svelte";

    function get_each_context$3(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[8] = list[i];
    	child_ctx[10] = i;
    	return child_ctx;
    }

    // (52:8) {#each services as service, i}
    function create_each_block$3(ctx) {
    	let div2;
    	let div0;
    	let raw_value = /*service*/ ctx[8].svgIcon + "";
    	let t0;
    	let h3;
    	let t1_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].services[/*service*/ ctx[8].id].title + "";
    	let t1;
    	let t2;
    	let p;
    	let t3_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].services[/*service*/ ctx[8].id].description + "";
    	let t3;
    	let t4;
    	let div1;
    	let span;

    	let t5_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Foglalás'
    	: 'Book Now') + "";

    	let t5;
    	let t6;
    	let svg;
    	let path;
    	let t7;
    	let mounted;
    	let dispose;

    	function click_handler() {
    		return /*click_handler*/ ctx[6](/*service*/ ctx[8]);
    	}

    	function keydown_handler(...args) {
    		return /*keydown_handler*/ ctx[7](/*service*/ ctx[8], ...args);
    	}

    	const block = {
    		c: function create() {
    			div2 = element("div");
    			div0 = element("div");
    			t0 = space();
    			h3 = element("h3");
    			t1 = text(t1_value);
    			t2 = space();
    			p = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			span = element("span");
    			t5 = text(t5_value);
    			t6 = space();
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t7 = space();
    			attr_dev(div0, "class", "service-icon svelte-ppy20d");
    			add_location(div0, file$e, 59, 12, 15113);
    			attr_dev(h3, "class", "svelte-ppy20d");
    			add_location(h3, file$e, 62, 12, 15209);
    			attr_dev(p, "class", "svelte-ppy20d");
    			add_location(p, file$e, 63, 12, 15280);
    			add_location(span, file$e, 65, 14, 15398);
    			attr_dev(path, "d", "M5 12H19M19 12L12 5M19 12L12 19");
    			attr_dev(path, "stroke", "currentColor");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			add_location(path, file$e, 67, 16, 15586);
    			attr_dev(svg, "width", "16");
    			attr_dev(svg, "height", "16");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$e, 66, 14, 15474);
    			attr_dev(div1, "class", "service-action svelte-ppy20d");
    			add_location(div1, file$e, 64, 12, 15355);
    			attr_dev(div2, "class", "service-card svelte-ppy20d");
    			attr_dev(div2, "tabindex", "0");
    			attr_dev(div2, "role", "button");
    			add_location(div2, file$e, 52, 10, 14861);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			div0.innerHTML = raw_value;
    			append_dev(div2, t0);
    			append_dev(div2, h3);
    			append_dev(h3, t1);
    			append_dev(div2, t2);
    			append_dev(div2, p);
    			append_dev(p, t3);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, span);
    			append_dev(span, t5);
    			append_dev(div1, t6);
    			append_dev(div1, svg);
    			append_dev(svg, path);
    			append_dev(div2, t7);

    			if (!mounted) {
    				dispose = [
    					listen_dev(div2, "click", click_handler, false, false, false, false),
    					listen_dev(div2, "keydown", keydown_handler, false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*content, currentLang*/ 3 && t1_value !== (t1_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].services[/*service*/ ctx[8].id].title + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*content, currentLang*/ 3 && t3_value !== (t3_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].services[/*service*/ ctx[8].id].description + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*currentLang*/ 2 && t5_value !== (t5_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Foglalás'
    			: 'Book Now') + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div2);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$3.name,
    		type: "each",
    		source: "(52:8) {#each services as service, i}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$e(ctx) {
    	let section;
    	let div1;
    	let h2;
    	let t0_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].serviceSelection.title + "";
    	let t0;
    	let t1;
    	let p;
    	let t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].serviceSelection.description + "";
    	let t2;
    	let t3;
    	let div0;
    	let each_value = /*services*/ ctx[2];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$3(get_each_context$3(ctx, each_value, i));
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div1 = element("div");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(h2, "class", "section-title svelte-ppy20d");
    			add_location(h2, file$e, 47, 6, 14577);
    			attr_dev(p, "class", "section-subtitle svelte-ppy20d");
    			add_location(p, file$e, 48, 6, 14660);
    			attr_dev(div0, "class", "services-grid svelte-ppy20d");
    			toggle_class(div0, "visible", /*servicesLoaded*/ ctx[3]);
    			add_location(div0, file$e, 50, 6, 14753);
    			attr_dev(div1, "class", "container");
    			add_location(div1, file$e, 46, 4, 14547);
    			attr_dev(section, "class", "service-selection-section svelte-ppy20d");
    			add_location(section, file$e, 45, 2, 14499);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div1);
    			append_dev(div1, h2);
    			append_dev(h2, t0);
    			append_dev(div1, t1);
    			append_dev(div1, p);
    			append_dev(p, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div0, null);
    				}
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*content, currentLang*/ 3 && t0_value !== (t0_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].serviceSelection.title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*content, currentLang*/ 3 && t2_value !== (t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].serviceSelection.description + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*selectService, services, currentLang, content*/ 23) {
    				each_value = /*services*/ ctx[2];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$3(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$3(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			destroy_each(each_blocks, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$e.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$e($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ServiceSelection', slots, []);
    	let { content = {} } = $$props;
    	let { currentLang = 'hu' } = $$props;
    	let { onSelectService } = $$props;

    	// Define service data
    	const services = [
    		{
    			id: 'airportParking',
    			svgIcon: `<svg fill="#ffffff" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M12,6H9A1,1,0,0,0,8,7V17a1,1,0,0,0,2,0V14h2a4,4,0,0,0,0-8ZM12,12H10V8h2a2,2,0,0,1,0,4ZM19,2H5A3,3,0,0,0,2,5V19a3,3,0,0,0,3,3H19a3,3,0,0,0,3-3V5A3,3,0,0,0,19,2Zm1,17a1,1,0,0,1-1,1H5a1,1,0,0,1-1-1V5A1,1,0,0,1,5,4H19a1,1,0,0,1,1,1Z"></path></g></svg>`
    		},
    		{
    			id: 'carWash',
    			svgIcon: `<svg fill="#ffffff" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" x="0px" y="0px" viewBox="0 0 512 512" style="enable-background:new 0 0 512 512;" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <path d="M142.25,206.819c-11.982,0.247-23.234-6.299-28.755-17.521l-2.751-5.591H62.71l1.296-5.894 c-5.764-0.319-11.242-2.802-15.533-7.128c-4.972-5.008-8.189-12.11-9.732-21.491l-14.374,65.334l0.249,60.473 C10.504,278.339,0,291.007,0,306.138c0,17.674,14.326,32,32,32h22.252c0-39.307,31.979-71.286,71.286-71.286 c12.595,0,24.428,3.297,34.707,9.052v-69.417L142.25,206.819z"></path> </g> </g> <g> <g> <path d="M301.995,74.561c-4.888-8.729-14.137-14.15-24.14-14.15H136.613c5.117,8.867,4.418,20.507,2.632,30.824h39.416 c8.615-10.736,21.831-17.628,36.636-17.628c14.804,0,28.021,6.892,36.636,17.628h24.074l50.407,90.015 c-0.493-4.596,0.054-9.945,2.447-16.113c2.611-6.727,8.117-12.181,14.736-16.29L301.995,74.561z"></path> </g> </g> <g> <g> <path d="M352.07,260.154c-3.421-4.743-6.068-9.242-8.122-13.501l-40.47,13.681c-11.896,4.025-24.553,0.473-32.751-8.072 c0,67.969,0.052,26.197,0.052,85.876h55.885c0-27.503,15.665-51.4,38.532-63.283C360.825,271.131,356.463,266.245,352.07,260.154z "></path> </g> </g> <g> <g> <path d="M490.667,275.966c0-4.949,0-10.028,0-15.137h-23.202c-11.436,0-20.706-9.27-20.706-20.706 c0-11.436,9.27-20.706,20.706-20.706h20.006c-7.529-20.927-27.547-35.896-51.066-35.896h-20.637 c3.383,11.767,5.348,26.998-1.26,39.26c-5.568,10.331-4.45,31.472-4.45,36.857c0,2.834-0.471,5.526-1.302,8.034 c34.198,5.222,60.48,34.833,60.48,70.468c3.943,0,6.995,0,10.765,0c17.672,0,32-14.328,32-32 C512,292.206,503.094,280.36,490.667,275.966z"></path> </g> </g> <g> <g> <path d="M125.539,289.327c-26.957,0.001-48.81,21.854-48.81,48.811s21.853,48.81,48.81,48.81c13.359,0,25.459-5.371,34.272-14.066 v-69.488C150.997,294.698,138.897,289.327,125.539,289.327z M125.539,357.908c-10.919,0-19.77-8.851-19.77-19.77 s8.851-19.77,19.77-19.77c10.919,0,19.77,8.851,19.77,19.77S136.458,357.908,125.539,357.908z"></path> </g> </g> <g> <g> <path d="M397.949,289.328c-26.957,0-48.81,21.853-48.81,48.81c0,26.957,21.852,48.81,48.81,48.81 c26.957,0,48.81-21.853,48.81-48.81C446.758,311.181,424.906,289.328,397.949,289.328z M397.949,357.908 c-10.919,0-19.77-8.851-19.77-19.77s8.851-19.77,19.77-19.77s19.77,8.851,19.77,19.77S408.868,357.908,397.949,357.908z"></path> </g> </g> <g> <g> <path d="M384.574,159.738c-2.448-2.26-6.1-3.212-10.227-3.212c-11.621,0-26.995,7.553-29.773,14.712 c-1.873,4.827-1.758,8.322-0.671,11.21c13.144,0.327,24.716,8.792,28.945,21.305c4.753,14.058-1.07,29.178-13.161,36.697 c1.569,3.091,3.544,6.362,6.055,9.844c8.994,12.472,16.122,16.696,20.858,16.696c4.271,0,6.597-3.434,6.597-7.353 c0-6.78-1.437-30.186,6.469-44.854C407.572,200.115,393.916,168.361,384.574,159.738z"></path> </g> </g> <g> <g> <path d="M123.24,72.004C120.8,59.525,92.948,52.038,84.177,57.639c-13.97,8.921-3.438,18.865-9.36,29.381 c-5.923,10.516-20.068,17.661-20.289,46.903c-0.154,20.329,5.579,27.099,10.73,27.099c2.259,0,4.406-1.303,5.895-3.335 c2.548-3.478,8.601-12.716,16.538-20.826l-1.148-2.332c-7.641-15.526-1.226-34.374,14.301-42.016 c6.617-3.257,14.104-4.104,21.46-2.291C123.718,82.948,124.069,76.249,123.24,72.004z"></path> </g> </g> <g> <g> <path d="M356.879,209.151c-0.001-0.003-0.002-0.007-0.003-0.01c-2.563-7.571-10.85-11.669-18.409-9.099 c-14.502,4.902-23.759,8.033-38.712,13.087c-4.507-7.356-15.44-25.202-20.63-33.671c-7.251-11.835-20.379-19.185-34.258-19.185 c-83.287,0-60.216-0.155-94.254,0.474c-4.401-8.943-18.447-37.486-22.879-46.493c-3.565-7.248-12.34-10.118-19.448-6.62 c-7.199,3.543-10.163,12.249-6.621,19.447c16.505,33.54,11.631,23.638,26.954,54.773c2.49,5.06,7.758,8.245,13.302,8.11 c37.258-0.689,34.271-0.64,35.182-0.64c0,0.256-0.435,84.692-0.435,249.492c0,9.627,7.805,17.431,17.431,17.431 c9.625,0,17.431-7.804,17.431-17.431c0-14.798,0-110.297,0-125.829h7.526c0,15.538,0,110.994,0,125.829 c0,9.627,7.805,17.431,17.431,17.431c9.627,0,17.431-7.804,17.431-17.431c0-54.87-0.049-180.103-0.051-239.359 c0-0.709,0.471-1.331,1.153-1.524c0.682-0.193,1.41,0.09,1.781,0.694c3.083,5.025,9.717,15.869,24.234,39.564 c3.537,5.771,10.603,8.352,17.041,6.174c31.192-10.545,16.238-5.49,49.694-16.801 C355.383,224.992,359.442,216.736,356.879,209.151z"></path> </g> </g> <g> <g> <circle cx="215.299" cy="120.568" r="30.709"></circle> </g> </g> </g></svg>`
    		},
    		{
    			id: 'autoService',
    			svgIcon: `<svg width="35" height="35" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
          <path d="M14.7 6.3a1 1 0 0 0 0 1.4l1.6 1.6a1 1 0 0 0 1.4 0l3.77-3.77a6 6 0 0 1-7.94 7.94l-6.91 6.91a2.12 2.12 0 0 1-3-3l6.91-6.91a6 6 0 0 1 7.94-7.94l-3.76 3.76z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" />
        </svg>`
    		},
    		{
    			id: 'tireService',
    			svgIcon: `<svg fill="#ffffff" height="238px" width="238px" version="1.1" id="Layer_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 512 512" xml:space="preserve"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"> <g> <g> <g> <path d="M494.916,254.43C494.336,119.185,419.934,7.603,325.521,0.384l-0.008-0.008C322.278,0.128,319.019,0,315.742,0H196.275 C152.226,0,111.872,22.852,80.64,60.646l2.628-0.657l59.46-16.998c2.406-0.674,4.992-0.282,7.074,1.109l20.872,13.901 L191.539,44.1c2.543-1.707,5.811-1.903,8.55-0.538l29.739,14.865c-3.456,4.497-6.801,9.173-10.001,14.089l-22.946-11.469 l-21.478,14.319c-2.867,1.911-6.596,1.911-9.463,0l-22.315-14.882L87.689,76.467L64.87,82.176 c-3.072,4.736-6.007,9.643-8.823,14.703l9.097,7.441l20.19,13.423l20.873-13.909c2.867-1.92,6.596-1.92,9.463,0l20.873,13.901 l20.864-13.901c2.543-1.707,5.811-1.903,8.55-0.538l30.174,15.087c-2.116,5.231-4.105,10.615-5.982,16.094l-27.401-13.696 L141.269,135.1c-2.867,1.911-6.596,1.911-9.464,0l-20.864-13.909L90.069,135.1c-2.867,1.911-6.596,1.911-9.464,0l-25.6-17.067 l-6.972-5.7c-12.066,25.318-20.992,53.896-26.095,84.582l6.784-6.716l24.909-25.506c1.596-1.621,3.78-2.552,6.059-2.56 c2.185,0.068,4.471,0.887,6.084,2.5l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558 c3.328-3.337,8.73-3.337,12.066,0l10.761,10.761c-1.365,6.494-2.594,13.073-3.635,19.78c-0.742-0.393-1.502-0.785-2.125-1.408 l-11.034-11.034L142.575,202.3c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567L91.375,202.3 c-3.337,3.328-8.738,3.328-12.066,0L59.81,182.801l-18.978,19.43l-22.34,22.127c-0.247,2.816-0.469,5.641-0.648,8.491 l12.151,7.296l28.058,14.003L79.309,232.9c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558 c2.765-2.765,7.066-3.294,10.419-1.289l29.841,17.903c-0.034,2.159-0.094,4.309-0.094,6.485c0,4.531,0.085,9.028,0.23,13.5 l-33.05-19.831l-20.881,20.898c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-19.567,19.567 c-2.594,2.594-6.554,3.251-9.856,1.596l-34.133-17.067l-4.651-2.79c-0.009,1.237-0.06,2.458-0.06,3.695 c0,29.653,3.584,58.129,10.112,84.642l25.455-38.178c1.417-2.125,3.712-3.507,6.255-3.763c2.56-0.239,5.069,0.657,6.878,2.466 l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0l19.567,19.558l19.567-19.558c3.328-3.337,8.73-3.337,12.066,0 l5.717,5.709c1.109,8.738,2.526,17.306,4.19,25.702c-1.792-0.239-3.533-0.905-4.907-2.278l-11.034-11.034l-19.567,19.567 c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-19.567,19.567c-3.337,3.328-8.738,3.328-12.066,0l-18.244-18.244 L33.297,362.24c3.499,10.906,7.518,21.402,12.015,31.42l8.875-7.603l16.589-16.623c3.328-3.336,8.73-3.336,12.066,0 l19.567,19.558l19.567-19.558c3.328-3.336,8.73-3.336,12.066,0l18.236,18.236l11.298-16.939 c2.381-3.575,7.066-4.821,10.914-2.901l14.797,7.398c2.705,8.124,5.709,15.966,8.934,23.552l-24.627-12.314l-12.885,19.328 c-1.417,2.125-3.721,3.507-6.263,3.763c-2.586,0.222-5.069-0.657-6.869-2.458l-19.567-19.567L108.442,407.1 c-3.337,3.328-8.738,3.328-12.066,0l-19.567-19.567l-11.034,11.034l-12.8,10.974c9.779,18.577,21.308,35.157,34.193,49.34 l10.948-5.478l25.156-16.768c2.867-1.92,6.596-1.92,9.463,0l20.873,13.901l20.864-13.901c2.867-1.92,6.596-1.92,9.463,0 l20.873,13.901l15.386-10.249c3.174,4.847,6.502,9.464,9.924,13.892L209.536,467.9c-2.867,1.911-6.596,1.911-9.464,0 l-20.864-13.909L158.336,467.9c-2.867,1.911-6.596,1.911-9.464,0l-20.864-13.909L107.136,467.9 c-0.29,0.196-0.597,0.375-0.913,0.529l-6.366,3.183C127.718,497.126,160.794,512,196.275,512h119.467 c2.944,0,5.939-0.119,8.969-0.35h0.009c0.213,0,0.435,0,0.649-0.017c4.198-0.324,8.644-0.939,13.508-1.835 c75.699-13.892,137.464-95.036,152.576-203.315c2.159-16.521,3.328-33.485,3.473-50.483 C494.925,255.991,494.916,254.438,494.916,254.43z M474.547,304.188c-14.319,102.519-72.149,178.671-142.14,189.278 c-2.611,0.401-5.239,0.853-7.799,1.075c-0.179-0.017-0.35-0.051-0.529-0.068c-2.492-0.247-4.966-0.597-7.424-1.05 c-0.862-0.162-1.707-0.367-2.568-0.546c-1.801-0.384-3.593-0.802-5.367-1.289c-0.939-0.265-1.877-0.538-2.807-0.828 c-1.724-0.538-3.439-1.118-5.146-1.758c-0.87-0.316-1.749-0.631-2.611-0.981c-1.963-0.794-3.9-1.656-5.828-2.577 c-0.555-0.265-1.126-0.503-1.681-0.776c-2.517-1.254-5.018-2.62-7.475-4.088c-0.299-0.179-0.58-0.384-0.879-0.563 c-2.142-1.314-4.258-2.697-6.349-4.164c-0.623-0.435-1.246-0.905-1.86-1.357c-1.792-1.306-3.567-2.662-5.316-4.079 c-0.614-0.495-1.229-0.998-1.835-1.51c-1.852-1.553-3.678-3.174-5.478-4.855c-0.427-0.393-0.853-0.776-1.28-1.178 c-6.886-6.571-13.406-14.037-19.507-22.315c-0.205-0.282-0.41-0.572-0.623-0.853c-1.852-2.551-3.678-5.171-5.453-7.868 c-0.179-0.273-0.35-0.538-0.529-0.802c-7.859-12.049-14.908-25.506-20.992-40.132c-0.401-0.973-0.802-1.937-1.195-2.918 c-1.903-4.71-3.703-9.54-5.393-14.472c-0.017-0.034-0.026-0.068-0.034-0.102c-1.69-4.915-3.268-9.933-4.745-15.053 c-0.017-0.043-0.026-0.085-0.043-0.128c-1.434-4.984-2.756-10.078-3.985-15.249c-0.111-0.461-0.213-0.939-0.324-1.399 c-1.152-4.949-2.219-9.975-3.174-15.078c-0.034-0.196-0.077-0.384-0.111-0.58c-0.947-5.103-1.775-10.3-2.517-15.539 c-0.137-0.93-0.256-1.86-0.375-2.79c-0.666-4.966-1.254-9.975-1.732-15.053c-0.026-0.29-0.06-0.58-0.085-0.879 c-0.478-5.205-0.819-10.479-1.084-15.795c-0.06-1.229-0.111-2.466-0.162-3.703c-0.222-5.35-0.367-10.726-0.367-16.162 c0-3.968,0.06-7.919,0.171-11.836c0.043-1.254,0.119-2.483,0.171-3.729c0.102-2.662,0.196-5.325,0.35-7.97 c0.102-1.647,0.247-3.268,0.367-4.907c0.162-2.202,0.299-4.42,0.495-6.613c0.179-1.963,0.41-3.9,0.614-5.854 c0.188-1.835,0.358-3.686,0.572-5.504c0.23-1.92,0.512-3.806,0.776-5.717c0.247-1.818,0.469-3.652,0.734-5.461 c0.282-1.852,0.614-3.678,0.922-5.513c0.299-1.818,0.58-3.661,0.904-5.461c0.341-1.869,0.734-3.703,1.101-5.555 c0.341-1.732,0.666-3.482,1.033-5.197c0.41-1.937,0.87-3.823,1.314-5.734c0.375-1.596,0.717-3.217,1.109-4.796 c0.478-1.946,1.007-3.857,1.519-5.777c0.401-1.502,0.777-3.029,1.195-4.514c0.538-1.903,1.118-3.763,1.681-5.632 c0.444-1.468,0.862-2.953,1.323-4.403c0.58-1.843,1.212-3.635,1.818-5.453c0.486-1.434,0.947-2.901,1.451-4.318 c0.674-1.911,1.399-3.763,2.099-5.641c0.486-1.271,0.939-2.569,1.434-3.823c0.776-1.971,1.596-3.891,2.398-5.82 c0.469-1.118,0.913-2.261,1.391-3.362c0.828-1.903,1.698-3.746,2.552-5.606c0.503-1.084,0.981-2.202,1.502-3.277 c0.862-1.818,1.775-3.575,2.671-5.35c0.546-1.067,1.058-2.159,1.613-3.208c0.922-1.749,1.877-3.448,2.833-5.154 c0.563-1.015,1.109-2.057,1.69-3.063c0.956-1.655,1.946-3.26,2.935-4.872c0.606-0.998,1.195-2.022,1.809-2.995 c1.007-1.587,2.048-3.115,3.081-4.659c0.631-0.947,1.246-1.911,1.886-2.842c1.067-1.536,2.167-3.012,3.26-4.497 c0.64-0.87,1.263-1.766,1.911-2.62c1.118-1.468,2.27-2.876,3.422-4.292c0.648-0.811,1.289-1.647,1.946-2.432 c1.178-1.399,2.381-2.731,3.584-4.079c0.666-0.742,1.314-1.519,1.988-2.244c1.203-1.297,2.44-2.534,3.678-3.78 c0.691-0.7,1.374-1.442,2.082-2.125c1.229-1.195,2.492-2.321,3.746-3.465c0.734-0.666,1.451-1.357,2.185-2.005 c1.28-1.109,2.586-2.15,3.883-3.2c0.742-0.606,1.468-1.237,2.219-1.818c1.323-1.024,2.679-1.971,4.028-2.935 c0.742-0.538,1.485-1.109,2.236-1.621c1.331-0.913,2.697-1.741,4.053-2.586c0.794-0.495,1.579-1.033,2.372-1.502 c1.357-0.802,2.739-1.527,4.113-2.261c0.819-0.444,1.63-0.913,2.449-1.331c1.391-0.7,2.807-1.314,4.216-1.954 c0.828-0.375,1.655-0.785,2.492-1.135c1.408-0.589,2.842-1.101,4.267-1.621c0.853-0.316,1.707-0.666,2.569-0.956 c1.417-0.478,2.859-0.862,4.284-1.271c0.896-0.256,1.783-0.546,2.679-0.776c1.417-0.358,2.859-0.623,4.284-0.913 c0.93-0.196,1.86-0.418,2.79-0.58c1.425-0.247,2.867-0.401,4.301-0.58c0.905-0.111,1.792-0.256,2.697-0.333 c85.248,7.1,152.329,110.993,152.866,236.851l0.009,1.604C477.722,272.171,476.604,288.427,474.547,304.188z"></path> <path d="M252.855,151.971c-0.282-0.273-0.538-0.572-0.785-0.887l-3.081-4.019c-11.708,30.541-18.586,67.959-18.586,108.928 c0,40.747,6.801,77.995,18.389,108.442l3.763-4.105c17.493-17.263,29.047-59.076,29.047-104.337 C281.604,210.74,270.05,168.927,252.855,151.971z"></path> <path d="M332.806,68.262c-30.49,0-57.378,23.39-75.981,60.954l8.448,11.042c20.309,20.48,33.399,65.784,33.399,115.738 c0,50.313-13.278,95.906-33.835,116.173l-8.61,9.404c18.62,38.272,45.764,62.157,76.578,62.157 c57.421,0,102.4-82.458,102.4-187.733S390.227,68.262,332.806,68.262z"></path> </g> </g> </g> </g></svg>`
    		}
    	];

    	// Animation state
    	let servicesLoaded = false;

    	// Function to select a service
    	function selectService(serviceId) {
    		// Call the parent component's function with the selected service ID
    		onSelectService(serviceId);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (onSelectService === undefined && !('onSelectService' in $$props || $$self.$$.bound[$$self.$$.props['onSelectService']])) {
    			console.warn("<ServiceSelection> was created without expected prop 'onSelectService'");
    		}
    	});

    	const writable_props = ['content', 'currentLang', 'onSelectService'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ServiceSelection> was created with unknown prop '${key}'`);
    	});

    	const click_handler = service => selectService(service.id);
    	const keydown_handler = (service, e) => e.key === 'Enter' && selectService(service.id);

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('onSelectService' in $$props) $$invalidate(5, onSelectService = $$props.onSelectService);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		gsap: gsapWithCSS,
    		content,
    		currentLang,
    		onSelectService,
    		services,
    		servicesLoaded,
    		selectService
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('onSelectService' in $$props) $$invalidate(5, onSelectService = $$props.onSelectService);
    		if ('servicesLoaded' in $$props) $$invalidate(3, servicesLoaded = $$props.servicesLoaded);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		content,
    		currentLang,
    		services,
    		servicesLoaded,
    		selectService,
    		onSelectService,
    		click_handler,
    		keydown_handler
    	];
    }

    class ServiceSelection extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$e, create_fragment$e, safe_not_equal, {
    			content: 0,
    			currentLang: 1,
    			onSelectService: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ServiceSelection",
    			options,
    			id: create_fragment$e.name
    		});
    	}

    	get content() {
    		throw new Error("<ServiceSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<ServiceSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<ServiceSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<ServiceSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get onSelectService() {
    		throw new Error("<ServiceSelection>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set onSelectService(value) {
    		throw new Error("<ServiceSelection>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/PersonalInfoForm.svelte generated by Svelte v3.59.2 */
    const file$d = "src/components/PersonalInfoForm.svelte";

    // (38:6) {#if formErrors.lastName}
    function create_if_block_3$6(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[1].lastName + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-nvslk4");
    			add_location(p, file$d, 38, 8, 983);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 2 && t_value !== (t_value = /*formErrors*/ ctx[1].lastName + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$6.name,
    		type: "if",
    		source: "(38:6) {#if formErrors.lastName}",
    		ctx
    	});

    	return block;
    }

    // (52:6) {#if formErrors.firstName}
    function create_if_block_2$8(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[1].firstName + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-nvslk4");
    			add_location(p, file$d, 52, 8, 1440);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 2 && t_value !== (t_value = /*formErrors*/ ctx[1].firstName + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$8.name,
    		type: "if",
    		source: "(52:6) {#if formErrors.firstName}",
    		ctx
    	});

    	return block;
    }

    // (67:6) {#if formErrors.email}
    function create_if_block_1$a(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[1].email + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-nvslk4");
    			add_location(p, file$d, 67, 8, 1898);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 2 && t_value !== (t_value = /*formErrors*/ ctx[1].email + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$a.name,
    		type: "if",
    		source: "(67:6) {#if formErrors.email}",
    		ctx
    	});

    	return block;
    }

    // (81:6) {#if formErrors.phone}
    function create_if_block$c(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[1].phone + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-nvslk4");
    			add_location(p, file$d, 81, 8, 2334);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 2 && t_value !== (t_value = /*formErrors*/ ctx[1].phone + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$c.name,
    		type: "if",
    		source: "(81:6) {#if formErrors.phone}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$d(ctx) {
    	let div6;
    	let h3;
    	let t0_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.title + "";
    	let t0;
    	let t1;
    	let div2;
    	let div0;
    	let label0;
    	let t2_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.lastName + "";
    	let t2;
    	let t3;
    	let input0;
    	let input0_placeholder_value;
    	let t4;
    	let t5;
    	let div1;
    	let label1;
    	let t6_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.firstName + "";
    	let t6;
    	let t7;
    	let input1;
    	let input1_placeholder_value;
    	let t8;
    	let t9;
    	let div5;
    	let div3;
    	let label2;
    	let t10_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.email + "";
    	let t10;
    	let t11;
    	let input2;
    	let input2_placeholder_value;
    	let t12;
    	let t13;
    	let div4;
    	let label3;
    	let t14_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.phone + "";
    	let t14;
    	let t15;
    	let input3;
    	let input3_placeholder_value;
    	let t16;
    	let mounted;
    	let dispose;
    	let if_block0 = /*formErrors*/ ctx[1].lastName && create_if_block_3$6(ctx);
    	let if_block1 = /*formErrors*/ ctx[1].firstName && create_if_block_2$8(ctx);
    	let if_block2 = /*formErrors*/ ctx[1].email && create_if_block_1$a(ctx);
    	let if_block3 = /*formErrors*/ ctx[1].phone && create_if_block$c(ctx);

    	const block = {
    		c: function create() {
    			div6 = element("div");
    			h3 = element("h3");
    			t0 = text(t0_value);
    			t1 = space();
    			div2 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			t2 = text(t2_value);
    			t3 = space();
    			input0 = element("input");
    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			div1 = element("div");
    			label1 = element("label");
    			t6 = text(t6_value);
    			t7 = space();
    			input1 = element("input");
    			t8 = space();
    			if (if_block1) if_block1.c();
    			t9 = space();
    			div5 = element("div");
    			div3 = element("div");
    			label2 = element("label");
    			t10 = text(t10_value);
    			t11 = space();
    			input2 = element("input");
    			t12 = space();
    			if (if_block2) if_block2.c();
    			t13 = space();
    			div4 = element("div");
    			label3 = element("label");
    			t14 = text(t14_value);
    			t15 = space();
    			input3 = element("input");
    			t16 = space();
    			if (if_block3) if_block3.c();
    			attr_dev(h3, "class", "svelte-nvslk4");
    			add_location(h3, file$d, 25, 2, 518);
    			attr_dev(label0, "for", "lastName");
    			attr_dev(label0, "class", "svelte-nvslk4");
    			add_location(label0, file$d, 29, 6, 642);
    			attr_dev(input0, "type", "text");
    			attr_dev(input0, "id", "lastName");
    			input0.required = true;

    			attr_dev(input0, "placeholder", input0_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg vezetéknevét'
    			: 'Enter your last name');

    			attr_dev(input0, "class", "svelte-nvslk4");
    			add_location(input0, file$d, 30, 6, 735);
    			attr_dev(div0, "class", "form-group svelte-nvslk4");
    			add_location(div0, file$d, 28, 4, 611);
    			attr_dev(label1, "for", "firstName");
    			attr_dev(label1, "class", "svelte-nvslk4");
    			add_location(label1, file$d, 43, 6, 1093);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "firstName");
    			input1.required = true;

    			attr_dev(input1, "placeholder", input1_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg keresztnevét'
    			: 'Enter your first name');

    			attr_dev(input1, "class", "svelte-nvslk4");
    			add_location(input1, file$d, 44, 6, 1188);
    			attr_dev(div1, "class", "form-group svelte-nvslk4");
    			add_location(div1, file$d, 42, 4, 1062);
    			attr_dev(div2, "class", "form-row svelte-nvslk4");
    			add_location(div2, file$d, 27, 2, 584);
    			attr_dev(label2, "for", "email");
    			attr_dev(label2, "class", "svelte-nvslk4");
    			add_location(label2, file$d, 59, 6, 1585);
    			attr_dev(input2, "type", "email");
    			attr_dev(input2, "id", "email");

    			attr_dev(input2, "placeholder", input2_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg email címét'
    			: 'Enter your email address');

    			attr_dev(input2, "class", "svelte-nvslk4");
    			add_location(input2, file$d, 60, 6, 1672);
    			attr_dev(div3, "class", "form-group svelte-nvslk4");
    			add_location(div3, file$d, 58, 4, 1554);
    			attr_dev(label3, "for", "phone");
    			attr_dev(label3, "class", "svelte-nvslk4");
    			add_location(label3, file$d, 72, 6, 2005);
    			attr_dev(input3, "type", "tel");
    			attr_dev(input3, "id", "phone");
    			input3.required = true;

    			attr_dev(input3, "placeholder", input3_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg telefonszámát'
    			: 'Enter your phone number');

    			attr_dev(input3, "class", "svelte-nvslk4");
    			add_location(input3, file$d, 73, 6, 2092);
    			attr_dev(div4, "class", "form-group svelte-nvslk4");
    			add_location(div4, file$d, 71, 4, 1974);
    			attr_dev(div5, "class", "form-row svelte-nvslk4");
    			add_location(div5, file$d, 57, 2, 1527);
    			attr_dev(div6, "class", "form-section svelte-nvslk4");
    			add_location(div6, file$d, 24, 0, 489);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div6, anchor);
    			append_dev(div6, h3);
    			append_dev(h3, t0);
    			append_dev(div6, t1);
    			append_dev(div6, div2);
    			append_dev(div2, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t2);
    			append_dev(div0, t3);
    			append_dev(div0, input0);
    			set_input_value(input0, /*formData*/ ctx[0].lastName);
    			append_dev(div0, t4);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div2, t5);
    			append_dev(div2, div1);
    			append_dev(div1, label1);
    			append_dev(label1, t6);
    			append_dev(div1, t7);
    			append_dev(div1, input1);
    			set_input_value(input1, /*formData*/ ctx[0].firstName);
    			append_dev(div1, t8);
    			if (if_block1) if_block1.m(div1, null);
    			append_dev(div6, t9);
    			append_dev(div6, div5);
    			append_dev(div5, div3);
    			append_dev(div3, label2);
    			append_dev(label2, t10);
    			append_dev(div3, t11);
    			append_dev(div3, input2);
    			set_input_value(input2, /*formData*/ ctx[0].email);
    			append_dev(div3, t12);
    			if (if_block2) if_block2.m(div3, null);
    			append_dev(div5, t13);
    			append_dev(div5, div4);
    			append_dev(div4, label3);
    			append_dev(label3, t14);
    			append_dev(div4, t15);
    			append_dev(div4, input3);
    			set_input_value(input3, /*formData*/ ctx[0].phone);
    			append_dev(div4, t16);
    			if (if_block3) if_block3.m(div4, null);

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[5]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[6]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[7]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[8])
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*content, currentLang*/ 12 && t0_value !== (t0_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*content, currentLang*/ 12 && t2_value !== (t2_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.lastName + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*currentLang*/ 8 && input0_placeholder_value !== (input0_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg vezetéknevét'
    			: 'Enter your last name')) {
    				attr_dev(input0, "placeholder", input0_placeholder_value);
    			}

    			if (dirty & /*formData*/ 1 && input0.value !== /*formData*/ ctx[0].lastName) {
    				set_input_value(input0, /*formData*/ ctx[0].lastName);
    			}

    			if (/*formErrors*/ ctx[1].lastName) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_3$6(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*content, currentLang*/ 12 && t6_value !== (t6_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.firstName + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*currentLang*/ 8 && input1_placeholder_value !== (input1_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg keresztnevét'
    			: 'Enter your first name')) {
    				attr_dev(input1, "placeholder", input1_placeholder_value);
    			}

    			if (dirty & /*formData*/ 1 && input1.value !== /*formData*/ ctx[0].firstName) {
    				set_input_value(input1, /*formData*/ ctx[0].firstName);
    			}

    			if (/*formErrors*/ ctx[1].firstName) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_2$8(ctx);
    					if_block1.c();
    					if_block1.m(div1, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if (dirty & /*content, currentLang*/ 12 && t10_value !== (t10_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.email + "")) set_data_dev(t10, t10_value);

    			if (dirty & /*currentLang*/ 8 && input2_placeholder_value !== (input2_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg email címét'
    			: 'Enter your email address')) {
    				attr_dev(input2, "placeholder", input2_placeholder_value);
    			}

    			if (dirty & /*formData*/ 1 && input2.value !== /*formData*/ ctx[0].email) {
    				set_input_value(input2, /*formData*/ ctx[0].email);
    			}

    			if (/*formErrors*/ ctx[1].email) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_1$a(ctx);
    					if_block2.c();
    					if_block2.m(div3, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (dirty & /*content, currentLang*/ 12 && t14_value !== (t14_value = /*content*/ ctx[2][/*currentLang*/ ctx[3]].bookingForm.personalInfo.phone + "")) set_data_dev(t14, t14_value);

    			if (dirty & /*currentLang*/ 8 && input3_placeholder_value !== (input3_placeholder_value = /*currentLang*/ ctx[3] === 'hu'
    			? 'Adja meg telefonszámát'
    			: 'Enter your phone number')) {
    				attr_dev(input3, "placeholder", input3_placeholder_value);
    			}

    			if (dirty & /*formData*/ 1) {
    				set_input_value(input3, /*formData*/ ctx[0].phone);
    			}

    			if (/*formErrors*/ ctx[1].phone) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block$c(ctx);
    					if_block3.c();
    					if_block3.m(div4, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div6);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$d.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$d($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PersonalInfoForm', slots, []);

    	let { formData = {
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: ''
    	} } = $$props;

    	let { formErrors = {
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: ''
    	} } = $$props;

    	let { content = {} } = $$props;
    	let { currentLang = 'hu' } = $$props;
    	const isSubmitting = false;
    	const writable_props = ['formData', 'formErrors', 'content', 'currentLang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<PersonalInfoForm> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formData.lastName = this.value;
    		$$invalidate(0, formData);
    	}

    	function input1_input_handler() {
    		formData.firstName = this.value;
    		$$invalidate(0, formData);
    	}

    	function input2_input_handler() {
    		formData.email = this.value;
    		$$invalidate(0, formData);
    	}

    	function input3_input_handler() {
    		formData.phone = this.value;
    		$$invalidate(0, formData);
    	}

    	$$self.$$set = $$props => {
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    		if ('formErrors' in $$props) $$invalidate(1, formErrors = $$props.formErrors);
    		if ('content' in $$props) $$invalidate(2, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(3, currentLang = $$props.currentLang);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		LoadingSpinner,
    		formData,
    		formErrors,
    		content,
    		currentLang,
    		isSubmitting
    	});

    	$$self.$inject_state = $$props => {
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    		if ('formErrors' in $$props) $$invalidate(1, formErrors = $$props.formErrors);
    		if ('content' in $$props) $$invalidate(2, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(3, currentLang = $$props.currentLang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		formData,
    		formErrors,
    		content,
    		currentLang,
    		isSubmitting,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler
    	];
    }

    class PersonalInfoForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$d, create_fragment$d, safe_not_equal, {
    			formData: 0,
    			formErrors: 1,
    			content: 2,
    			currentLang: 3,
    			isSubmitting: 4
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PersonalInfoForm",
    			options,
    			id: create_fragment$d.name
    		});
    	}

    	get formData() {
    		throw new Error("<PersonalInfoForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formData(value) {
    		throw new Error("<PersonalInfoForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formErrors() {
    		throw new Error("<PersonalInfoForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formErrors(value) {
    		throw new Error("<PersonalInfoForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content() {
    		throw new Error("<PersonalInfoForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<PersonalInfoForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<PersonalInfoForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<PersonalInfoForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get isSubmitting() {
    		return this.$$.ctx[4];
    	}

    	set isSubmitting(value) {
    		throw new Error("<PersonalInfoForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/PriceCalculator.svelte generated by Svelte v3.59.2 */

    const { console: console_1$5 } = globals;

    const file$c = "src/components/PriceCalculator.svelte";

    // (166:4) {#if formData.carWashPackage !== 'none' && carWashStandardPrice > 0}
    function create_if_block_1$9(ctx) {
    	let p0;
    	let span0;

    	let t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Autómosó díj (alap)'
    	: 'Car Wash Fee (Standard)') + "";

    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*formatCurrency*/ ctx[9](/*carWashStandardPrice*/ ctx[4]) + "";
    	let t3;
    	let t4;
    	let t5;
    	let p1;
    	let span2;

    	let t6_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Autómosó díj (kedvezményes)'
    	: 'Car Wash Fee (Discounted)') + "";

    	let t6;
    	let t7;
    	let t8;
    	let span3;
    	let t9_value = /*formatCurrency*/ ctx[9](/*carWashDiscountedPrice*/ ctx[6]) + "";
    	let t9;
    	let if_block = /*carWashDiscountAmount*/ ctx[5] > 0 && create_if_block_2$7(ctx);

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			if (if_block) if_block.c();
    			t5 = space();
    			p1 = element("p");
    			span2 = element("span");
    			t6 = text(t6_value);
    			t7 = text(":");
    			t8 = space();
    			span3 = element("span");
    			t9 = text(t9_value);
    			attr_dev(span0, "class", "svelte-7wej0u");
    			add_location(span0, file$c, 167, 8, 6582);
    			attr_dev(span1, "class", "svelte-7wej0u");
    			add_location(span1, file$c, 168, 8, 6683);
    			attr_dev(p0, "class", "car-wash-price svelte-7wej0u");
    			add_location(p0, file$c, 166, 6, 6547);
    			attr_dev(span2, "class", "svelte-7wej0u");
    			add_location(span2, file$c, 177, 8, 7037);
    			attr_dev(span3, "class", "svelte-7wej0u");
    			add_location(span3, file$c, 178, 8, 7148);
    			attr_dev(p1, "class", "svelte-7wej0u");
    			add_location(p1, file$c, 176, 6, 7025);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			append_dev(p0, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(p0, t2);
    			append_dev(p0, span1);
    			append_dev(span1, t3);
    			insert_dev(target, t4, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, span2);
    			append_dev(span2, t6);
    			append_dev(span2, t7);
    			append_dev(p1, t8);
    			append_dev(p1, span3);
    			append_dev(span3, t9);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLanguage*/ 2 && t0_value !== (t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Autómosó díj (alap)'
    			: 'Car Wash Fee (Standard)') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*carWashStandardPrice*/ 16 && t3_value !== (t3_value = /*formatCurrency*/ ctx[9](/*carWashStandardPrice*/ ctx[4]) + "")) set_data_dev(t3, t3_value);

    			if (/*carWashDiscountAmount*/ ctx[5] > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_2$7(ctx);
    					if_block.c();
    					if_block.m(t5.parentNode, t5);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*currentLanguage*/ 2 && t6_value !== (t6_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Autómosó díj (kedvezményes)'
    			: 'Car Wash Fee (Discounted)') + "")) set_data_dev(t6, t6_value);

    			if (dirty & /*carWashDiscountedPrice*/ 64 && t9_value !== (t9_value = /*formatCurrency*/ ctx[9](/*carWashDiscountedPrice*/ ctx[6]) + "")) set_data_dev(t9, t9_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t4);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(p1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$9.name,
    		type: "if",
    		source: "(166:4) {#if formData.carWashPackage !== 'none' && carWashStandardPrice > 0}",
    		ctx
    	});

    	return block;
    }

    // (171:6) {#if carWashDiscountAmount > 0}
    function create_if_block_2$7(ctx) {
    	let p;
    	let span0;

    	let t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Autómosó kedvezmény (20%)'
    	: 'Car Wash Discount (20%)') + "";

    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3;
    	let t4_value = /*formatCurrency*/ ctx[9](/*carWashDiscountAmount*/ ctx[5]) + "";
    	let t4;

    	const block = {
    		c: function create() {
    			p = element("p");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text("- ");
    			t4 = text(t4_value);
    			attr_dev(span0, "class", "svelte-7wej0u");
    			add_location(span0, file$c, 172, 10, 6806);
    			set_style(span1, "color", "#e53e3e");
    			attr_dev(span1, "class", "svelte-7wej0u");
    			add_location(span1, file$c, 173, 10, 6915);
    			attr_dev(p, "class", "svelte-7wej0u");
    			add_location(p, file$c, 171, 8, 6792);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(p, t2);
    			append_dev(p, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLanguage*/ 2 && t0_value !== (t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Autómosó kedvezmény (20%)'
    			: 'Car Wash Discount (20%)') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*carWashDiscountAmount*/ 32 && t4_value !== (t4_value = /*formatCurrency*/ ctx[9](/*carWashDiscountAmount*/ ctx[5]) + "")) set_data_dev(t4, t4_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$7.name,
    		type: "if",
    		source: "(171:6) {#if carWashDiscountAmount > 0}",
    		ctx
    	});

    	return block;
    }

    // (188:4) {#if hasValidDates && currentDays <= 0}
    function create_if_block$b(ctx) {
    	let p;

    	let t_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Érvénytelen dátum vagy időtartam. Kérjük, ellenőrizze az érkezési és távozási időpontokat.'
    	: 'Invalid date or duration. Please check arrival and departure dates/times.') + "";

    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-7wej0u");
    			set_style(p, "text-align", "center");
    			set_style(p, "margin-top", "1rem");
    			add_location(p, file$c, 188, 6, 7456);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLanguage*/ 2 && t_value !== (t_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Érvénytelen dátum vagy időtartam. Kérjük, ellenőrizze az érkezési és távozási időpontokat.'
    			: 'Invalid date or duration. Please check arrival and departure dates/times.') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$b.name,
    		type: "if",
    		source: "(188:4) {#if hasValidDates && currentDays <= 0}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$c(ctx) {
    	let div1;
    	let div0;
    	let p0;
    	let span0;

    	let t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Időtartam'
    	: 'Duration') + "";

    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3;
    	let t4;
    	let t5_value = (/*currentLanguage*/ ctx[1] === 'hu' ? 'nap' : 'days') + "";
    	let t5;
    	let t6;
    	let p1;
    	let span2;

    	let t7_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Parkolás díj'
    	: 'Parking Total') + "";

    	let t7;
    	let t8;
    	let t9;
    	let span3;
    	let t10_value = /*formatCurrency*/ ctx[9](/*parkingTotal*/ ctx[3]) + "";
    	let t10;
    	let t11;
    	let t12;
    	let p2;
    	let span4;

    	let t13_value = (/*currentLanguage*/ ctx[1] === 'hu'
    	? 'Végösszeg'
    	: 'Total') + "";

    	let t13;
    	let t14;
    	let t15;
    	let span5;
    	let t16_value = /*formatCurrency*/ ctx[9](/*totalPrice*/ ctx[7]) + "";
    	let t16;
    	let t17;
    	let if_block0 = /*formData*/ ctx[0].carWashPackage !== 'none' && /*carWashStandardPrice*/ ctx[4] > 0 && create_if_block_1$9(ctx);
    	let if_block1 = /*hasValidDates*/ ctx[8] && /*currentDays*/ ctx[2] <= 0 && create_if_block$b(ctx);

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			p0 = element("p");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(/*currentDays*/ ctx[2]);
    			t4 = space();
    			t5 = text(t5_value);
    			t6 = space();
    			p1 = element("p");
    			span2 = element("span");
    			t7 = text(t7_value);
    			t8 = text(":");
    			t9 = space();
    			span3 = element("span");
    			t10 = text(t10_value);
    			t11 = space();
    			if (if_block0) if_block0.c();
    			t12 = space();
    			p2 = element("p");
    			span4 = element("span");
    			t13 = text(t13_value);
    			t14 = text(":");
    			t15 = space();
    			span5 = element("span");
    			t16 = text(t16_value);
    			t17 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(span0, "class", "svelte-7wej0u");
    			add_location(span0, file$c, 156, 6, 6163);
    			attr_dev(span1, "class", "svelte-7wej0u");
    			add_location(span1, file$c, 157, 6, 6237);
    			attr_dev(p0, "class", "svelte-7wej0u");
    			add_location(p0, file$c, 155, 4, 6153);
    			attr_dev(span2, "class", "svelte-7wej0u");
    			add_location(span2, file$c, 161, 6, 6332);
    			attr_dev(span3, "class", "svelte-7wej0u");
    			add_location(span3, file$c, 162, 6, 6414);
    			attr_dev(p1, "class", "svelte-7wej0u");
    			add_location(p1, file$c, 160, 4, 6322);
    			attr_dev(span4, "class", "svelte-7wej0u");
    			add_location(span4, file$c, 183, 6, 7263);
    			attr_dev(span5, "class", "total-price svelte-7wej0u");
    			add_location(span5, file$c, 184, 6, 7334);
    			attr_dev(p2, "class", "total-price-line svelte-7wej0u");
    			add_location(p2, file$c, 182, 4, 7228);
    			attr_dev(div0, "class", "price-calculation svelte-7wej0u");
    			add_location(div0, file$c, 154, 2, 6117);
    			attr_dev(div1, "class", "price-summary svelte-7wej0u");
    			add_location(div1, file$c, 153, 0, 6087);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div0, p0);
    			append_dev(p0, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(p0, t2);
    			append_dev(p0, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    			append_dev(div0, t6);
    			append_dev(div0, p1);
    			append_dev(p1, span2);
    			append_dev(span2, t7);
    			append_dev(span2, t8);
    			append_dev(p1, t9);
    			append_dev(p1, span3);
    			append_dev(span3, t10);
    			append_dev(div0, t11);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(div0, t12);
    			append_dev(div0, p2);
    			append_dev(p2, span4);
    			append_dev(span4, t13);
    			append_dev(span4, t14);
    			append_dev(p2, t15);
    			append_dev(p2, span5);
    			append_dev(span5, t16);
    			append_dev(div0, t17);
    			if (if_block1) if_block1.m(div0, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*currentLanguage*/ 2 && t0_value !== (t0_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Időtartam'
    			: 'Duration') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*currentDays*/ 4) set_data_dev(t3, /*currentDays*/ ctx[2]);
    			if (dirty & /*currentLanguage*/ 2 && t5_value !== (t5_value = (/*currentLanguage*/ ctx[1] === 'hu' ? 'nap' : 'days') + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*currentLanguage*/ 2 && t7_value !== (t7_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Parkolás díj'
    			: 'Parking Total') + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*parkingTotal*/ 8 && t10_value !== (t10_value = /*formatCurrency*/ ctx[9](/*parkingTotal*/ ctx[3]) + "")) set_data_dev(t10, t10_value);

    			if (/*formData*/ ctx[0].carWashPackage !== 'none' && /*carWashStandardPrice*/ ctx[4] > 0) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$9(ctx);
    					if_block0.c();
    					if_block0.m(div0, t12);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*currentLanguage*/ 2 && t13_value !== (t13_value = (/*currentLanguage*/ ctx[1] === 'hu'
    			? 'Végösszeg'
    			: 'Total') + "")) set_data_dev(t13, t13_value);

    			if (dirty & /*totalPrice*/ 128 && t16_value !== (t16_value = /*formatCurrency*/ ctx[9](/*totalPrice*/ ctx[7]) + "")) set_data_dev(t16, t16_value);

    			if (/*hasValidDates*/ ctx[8] && /*currentDays*/ ctx[2] <= 0) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$b(ctx);
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$c.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$c($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('PriceCalculator', slots, []);

    	let { formData = {
    		// Default structure for safety
    		startDate: null,
    		endDate: null,
    		startTime: null,
    		endTime: null,
    		carWashPackage: 'none'
    	} } = $$props;

    	let { calculateDays } = $$props;
    	const content = {}; // Receive the content object from parent component

    	// Get the currently selected language from the store, don't use a prop
    	let currentLanguage;

    	currentLang.subscribe(value => {
    		$$invalidate(1, currentLanguage = value);
    	});

    	// --- Event Dispatcher ---
    	const dispatch = createEventDispatcher();

    	// --- Pricing Data (Hardcoded) ---
    	const parkingPrices = [
    		{ days: 1, normal: 7500, discount: 5500 },
    		{ days: 2, normal: 8200, discount: 6200 },
    		{ days: 3, normal: 9000, discount: 7000 },
    		{ days: 4, normal: 9800, discount: 8000 },
    		{ days: 5, normal: 10500, discount: 8600 },
    		{ days: 6, normal: 11200, discount: 9500 },
    		{ days: 7, normal: 12500, discount: 10500 },
    		{ days: 8, normal: 14000, discount: 11000 },
    		{ days: 9, normal: 15500, discount: 11500 },
    		{ days: 10, normal: 16000, discount: 12000 },
    		{ days: 11, normal: 17000, discount: 12400 },
    		{ days: 12, normal: 17600, discount: 12900 },
    		{ days: 13, normal: 18000, discount: 13500 },
    		{ days: 14, normal: 18500, discount: 13900 },
    		{ days: 15, normal: 19000, discount: 14300 },
    		{ days: 16, normal: 19500, discount: 14700 },
    		{ days: 17, normal: 20000, discount: 15000 },
    		{ days: 18, normal: 20500, discount: 15400 },
    		{ days: 19, normal: 21000, discount: 15800 },
    		{ days: 20, normal: 21500, discount: 16200 },
    		{ days: 21, normal: 22000, discount: 16600 },
    		{ days: 22, normal: 22500, discount: 17000 },
    		{ days: 23, normal: 23000, discount: 17400 },
    		{ days: 24, normal: 23500, discount: 17800 },
    		{ days: 25, normal: 24000, discount: 18200 },
    		{ days: 26, normal: 24500, discount: 18600 },
    		{ days: 27, normal: 25000, discount: 19000 },
    		{ days: 28, normal: 25500, discount: 19500 },
    		{ days: 29, normal: 26000, discount: 19500 },
    		{ days: 30, normal: 26000, discount: 19500 }
    	]; // Prices beyond 30 days use the 30-day price based on calculation logic

    	const carWashPricing = {
    		none: 0,
    		smartInteriorExterior: 8900,
    		premiumInteriorExterior: 11900
    	};

    	// --- Reactive Variables ---
    	let currentDays = 0;

    	let parkingTotal = 0;
    	let carWashStandardPrice = 0;
    	let carWashDiscountAmount = 0;
    	let carWashDiscountedPrice = 0;
    	let totalPrice = 0;
    	let hasValidDates = false; // Tracks if date/time inputs have values

    	// --- Dispatch Price Update ---
    	function dispatchPriceUpdate() {
    		// Ensure all values are numbers before dispatching
    		const dataToDispatch = {
    			parkingDays: currentDays,
    			parkingTotal: parkingTotal || 0,
    			carWashStandard: carWashStandardPrice || 0,
    			carWashDiscount: carWashDiscountAmount || 0,
    			carWashDiscounted: carWashDiscountedPrice || 0,
    			totalPrice: totalPrice || 0,
    			hasValidDates,
    			isValidDuration: currentDays > 0, // Flag indicating calculated days > 0
    			
    		};

    		dispatch('priceUpdated', dataToDispatch);
    	}

    	// --- Core Calculation Logic ---
    	function calculatePrices() {
    		// Calculate days using the function passed from the parent
    		if (typeof calculateDays === 'function') {
    			$$invalidate(2, currentDays = calculateDays());
    		} else {
    			$$invalidate(2, currentDays = 0);
    			console.error("PriceCalculator: 'calculateDays' prop is not a function!");
    		}

    		// Check if essential date/time data is present
    		$$invalidate(8, hasValidDates = !!(formData.startDate && formData.endDate && formData.startTime && formData.endTime));

    		// Parking Total Calculation
    		$$invalidate(3, parkingTotal = 0); // Reset

    		if (currentDays > 0) {
    			// Find the correct price tier, or use the last one if days exceed the defined tiers
    			let priceTier = parkingPrices[Math.min(currentDays, parkingPrices.length) - 1];

    			// Use the 'discount' price from the tier
    			$$invalidate(3, parkingTotal = priceTier ? priceTier.discount : 0);
    		} else {
    			$$invalidate(3, parkingTotal = 0); // Explicitly zero if duration is not positive
    		}

    		// Car Wash Price Calculation
    		const packageKey = formData.carWashPackage || 'none';

    		$$invalidate(4, carWashStandardPrice = carWashPricing[packageKey] ?? 0); // Use nullish coalescing

    		// Calculate discount only if a valid package is selected
    		if (carWashStandardPrice > 0) {
    			$$invalidate(5, carWashDiscountAmount = Math.round(carWashStandardPrice * 0.20)); // 20% discount
    			$$invalidate(6, carWashDiscountedPrice = carWashStandardPrice - carWashDiscountAmount);
    		} else {
    			$$invalidate(5, carWashDiscountAmount = 0);
    			$$invalidate(6, carWashDiscountedPrice = 0);
    		}

    		// Total Price Calculation
    		$$invalidate(7, totalPrice = (parkingTotal || 0) + (carWashDiscountedPrice || 0));
    	}

    	// --- Lifecycle Hooks ---
    	onMount(() => {
    		// Perform initial calculation when component mounts
    		calculatePrices();

    		// Dispatch initial prices after the first calculation
    		dispatchPriceUpdate();
    	});

    	// Use afterUpdate to ensure DOM is potentially updated *before* dispatching new prices.
    	afterUpdate(() => {
    		// The reactive block ($:) already calls calculatePrices.
    		// We just need to dispatch the results after Svelte has processed updates.
    		dispatchPriceUpdate();
    	});

    	// --- Formatting Function ---
    	function formatCurrency(amount) {
    		const numericAmount = typeof amount === 'number' ? amount : 0;

    		// Format based on current language
    		return new Intl.NumberFormat(currentLanguage === 'hu' ? 'hu-HU' : 'en-US',
    		{
    				style: 'currency',
    				currency: 'HUF',
    				minimumFractionDigits: 0,
    				maximumFractionDigits: 0
    			}).format(numericAmount);
    	}

    	$$self.$$.on_mount.push(function () {
    		if (calculateDays === undefined && !('calculateDays' in $$props || $$self.$$.bound[$$self.$$.props['calculateDays']])) {
    			console_1$5.warn("<PriceCalculator> was created without expected prop 'calculateDays'");
    		}
    	});

    	const writable_props = ['formData', 'calculateDays'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$5.warn(`<PriceCalculator> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    		if ('calculateDays' in $$props) $$invalidate(10, calculateDays = $$props.calculateDays);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		createEventDispatcher,
    		afterUpdate,
    		currentLang,
    		formData,
    		calculateDays,
    		content,
    		currentLanguage,
    		dispatch,
    		parkingPrices,
    		carWashPricing,
    		currentDays,
    		parkingTotal,
    		carWashStandardPrice,
    		carWashDiscountAmount,
    		carWashDiscountedPrice,
    		totalPrice,
    		hasValidDates,
    		dispatchPriceUpdate,
    		calculatePrices,
    		formatCurrency
    	});

    	$$self.$inject_state = $$props => {
    		if ('formData' in $$props) $$invalidate(0, formData = $$props.formData);
    		if ('calculateDays' in $$props) $$invalidate(10, calculateDays = $$props.calculateDays);
    		if ('currentLanguage' in $$props) $$invalidate(1, currentLanguage = $$props.currentLanguage);
    		if ('currentDays' in $$props) $$invalidate(2, currentDays = $$props.currentDays);
    		if ('parkingTotal' in $$props) $$invalidate(3, parkingTotal = $$props.parkingTotal);
    		if ('carWashStandardPrice' in $$props) $$invalidate(4, carWashStandardPrice = $$props.carWashStandardPrice);
    		if ('carWashDiscountAmount' in $$props) $$invalidate(5, carWashDiscountAmount = $$props.carWashDiscountAmount);
    		if ('carWashDiscountedPrice' in $$props) $$invalidate(6, carWashDiscountedPrice = $$props.carWashDiscountedPrice);
    		if ('totalPrice' in $$props) $$invalidate(7, totalPrice = $$props.totalPrice);
    		if ('hasValidDates' in $$props) $$invalidate(8, hasValidDates = $$props.hasValidDates);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*formData, calculateDays*/ 1025) {
    			// --- Reactivity ---
    			// Recalculate whenever relevant formData or the language changes
    			{
    				// Check if formData and calculateDays exist before calculating
    				if (formData && typeof calculateDays === 'function') {
    					calculatePrices();
    				}
    			}
    		}
    	};

    	return [
    		formData,
    		currentLanguage,
    		currentDays,
    		parkingTotal,
    		carWashStandardPrice,
    		carWashDiscountAmount,
    		carWashDiscountedPrice,
    		totalPrice,
    		hasValidDates,
    		formatCurrency,
    		calculateDays,
    		content
    	];
    }

    class PriceCalculator extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$c, create_fragment$c, safe_not_equal, {
    			formData: 0,
    			calculateDays: 10,
    			content: 11
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "PriceCalculator",
    			options,
    			id: create_fragment$c.name
    		});
    	}

    	get formData() {
    		throw new Error("<PriceCalculator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formData(value) {
    		throw new Error("<PriceCalculator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get calculateDays() {
    		throw new Error("<PriceCalculator>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set calculateDays(value) {
    		throw new Error("<PriceCalculator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content() {
    		return this.$$.ctx[11];
    	}

    	set content(value) {
    		throw new Error("<PriceCalculator>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/AirportParkingForm.svelte generated by Svelte v3.59.2 */
    const file$b = "src/components/AirportParkingForm.svelte";

    // (288:8) {#if formErrors.licensePlate}
    function create_if_block_1$8(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[3].licensePlate + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-7i8bq0");
    			add_location(p, file$b, 288, 10, 9088);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 8 && t_value !== (t_value = /*formErrors*/ ctx[3].licensePlate + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$8.name,
    		type: "if",
    		source: "(288:8) {#if formErrors.licensePlate}",
    		ctx
    	});

    	return block;
    }

    // (304:8) {#if formErrors.passengers}
    function create_if_block$a(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[3].passengers + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-7i8bq0");
    			add_location(p, file$b, 304, 10, 9630);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 8 && t_value !== (t_value = /*formErrors*/ ctx[3].passengers + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$a.name,
    		type: "if",
    		source: "(304:8) {#if formErrors.passengers}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$b(ctx) {
    	let form;
    	let h2;

    	let t0_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'REPÜLŐTÉRI PARKOLÁS FOGLALÁS'
    	: 'AIRPORT PARKING BOOKING') + "";

    	let t0;
    	let t1;
    	let div12;
    	let div0;
    	let h30;
    	let t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.dateRange + "";
    	let t2;
    	let t3;
    	let div3;
    	let div1;
    	let label0;
    	let t4_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.startDate + "";
    	let t4;
    	let t5;
    	let input0;
    	let t6;
    	let div2;
    	let label1;

    	let t7_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Érkezési idő'
    	: 'Arrival time') + "";

    	let t7;
    	let t8;
    	let input1;
    	let t9;
    	let div6;
    	let div4;
    	let label2;
    	let t10_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.endDate + "";
    	let t10;
    	let t11;
    	let input2;
    	let input2_min_value;
    	let t12;
    	let div5;
    	let label3;

    	let t13_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Távozási idő'
    	: 'Departure time') + "";

    	let t13;
    	let t14;
    	let input3;
    	let t15;
    	let div9;
    	let div7;
    	let label4;
    	let t16_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.licensePlate + "";
    	let t16;
    	let t17;
    	let input4;
    	let input4_placeholder_value;
    	let t18;
    	let t19;
    	let div8;
    	let label5;
    	let t20_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.passengers + "";
    	let t20;
    	let t21;
    	let input5;
    	let input5_placeholder_value;
    	let t22;
    	let t23;
    	let div11;
    	let h31;
    	let t24_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.addCarWash + "";
    	let t24;
    	let t25;
    	let div10;
    	let label6;
    	let t26_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.title + "";
    	let t26;
    	let t27;
    	let select;
    	let option0;
    	let t28_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.none + "";
    	let t28;
    	let option1;
    	let t29_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.smartInteriorExterior + "";
    	let t29;
    	let option2;
    	let t30_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.premiumInteriorExterior + "";
    	let t30;
    	let t31;
    	let pricecalculator;
    	let t32;
    	let personalinfoform;
    	let updating_formData;
    	let updating_formErrors;
    	let t33;
    	let div13;
    	let button;

    	let t34_value = (/*isSubmitting*/ ctx[4]
    	? /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.processing
    	: /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit) + "";

    	let t34;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*formErrors*/ ctx[3].licensePlate && create_if_block_1$8(ctx);
    	let if_block1 = /*formErrors*/ ctx[3].passengers && create_if_block$a(ctx);

    	pricecalculator = new PriceCalculator({
    			props: {
    				formData: /*formData*/ ctx[2],
    				calculateDays: /*calculateDays*/ ctx[7],
    				content: /*content*/ ctx[0],
    				currentLang: /*currentLang*/ ctx[1]
    			},
    			$$inline: true
    		});

    	pricecalculator.$on("priceUpdated", /*handlePriceUpdate*/ ctx[8]);

    	function personalinfoform_formData_binding(value) {
    		/*personalinfoform_formData_binding*/ ctx[17](value);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		/*personalinfoform_formErrors_binding*/ ctx[18](value);
    	}

    	let personalinfoform_props = {
    		content: /*content*/ ctx[0],
    		currentLang: /*currentLang*/ ctx[1]
    	};

    	if (/*formData*/ ctx[2] !== void 0) {
    		personalinfoform_props.formData = /*formData*/ ctx[2];
    	}

    	if (/*formErrors*/ ctx[3] !== void 0) {
    		personalinfoform_props.formErrors = /*formErrors*/ ctx[3];
    	}

    	personalinfoform = new PersonalInfoForm({
    			props: personalinfoform_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalinfoform, 'formData', personalinfoform_formData_binding));
    	binding_callbacks.push(() => bind(personalinfoform, 'formErrors', personalinfoform_formErrors_binding));

    	const block = {
    		c: function create() {
    			form = element("form");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			div12 = element("div");
    			div0 = element("div");
    			h30 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div3 = element("div");
    			div1 = element("div");
    			label0 = element("label");
    			t4 = text(t4_value);
    			t5 = space();
    			input0 = element("input");
    			t6 = space();
    			div2 = element("div");
    			label1 = element("label");
    			t7 = text(t7_value);
    			t8 = space();
    			input1 = element("input");
    			t9 = space();
    			div6 = element("div");
    			div4 = element("div");
    			label2 = element("label");
    			t10 = text(t10_value);
    			t11 = space();
    			input2 = element("input");
    			t12 = space();
    			div5 = element("div");
    			label3 = element("label");
    			t13 = text(t13_value);
    			t14 = space();
    			input3 = element("input");
    			t15 = space();
    			div9 = element("div");
    			div7 = element("div");
    			label4 = element("label");
    			t16 = text(t16_value);
    			t17 = space();
    			input4 = element("input");
    			t18 = space();
    			if (if_block0) if_block0.c();
    			t19 = space();
    			div8 = element("div");
    			label5 = element("label");
    			t20 = text(t20_value);
    			t21 = space();
    			input5 = element("input");
    			t22 = space();
    			if (if_block1) if_block1.c();
    			t23 = space();
    			div11 = element("div");
    			h31 = element("h3");
    			t24 = text(t24_value);
    			t25 = space();
    			div10 = element("div");
    			label6 = element("label");
    			t26 = text(t26_value);
    			t27 = space();
    			select = element("select");
    			option0 = element("option");
    			t28 = text(t28_value);
    			option1 = element("option");
    			t29 = text(t29_value);
    			option2 = element("option");
    			t30 = text(t30_value);
    			t31 = space();
    			create_component(pricecalculator.$$.fragment);
    			t32 = space();
    			create_component(personalinfoform.$$.fragment);
    			t33 = space();
    			div13 = element("div");
    			button = element("button");
    			t34 = text(t34_value);
    			attr_dev(h2, "class", "form-title svelte-7i8bq0");
    			add_location(h2, file$b, 223, 2, 7061);
    			attr_dev(h30, "class", "svelte-7i8bq0");
    			add_location(h30, file$b, 226, 6, 7235);
    			attr_dev(div0, "class", "form-row svelte-7i8bq0");
    			add_location(div0, file$b, 225, 4, 7206);
    			attr_dev(label0, "for", "startDate");
    			attr_dev(label0, "class", "svelte-7i8bq0");
    			add_location(label0, file$b, 231, 8, 7386);
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "id", "startDate");
    			attr_dev(input0, "min", formatDate$1(/*today*/ ctx[5]));
    			attr_dev(input0, "max", formatDate$1(/*maxDate*/ ctx[6]));
    			input0.required = true;
    			attr_dev(input0, "class", "svelte-7i8bq0");
    			add_location(input0, file$b, 232, 8, 7485);
    			attr_dev(div1, "class", "form-group svelte-7i8bq0");
    			add_location(div1, file$b, 230, 6, 7353);
    			attr_dev(label1, "for", "startTime");
    			attr_dev(label1, "class", "svelte-7i8bq0");
    			add_location(label1, file$b, 243, 8, 7734);
    			attr_dev(input1, "type", "time");
    			attr_dev(input1, "id", "startTime");
    			input1.required = true;
    			attr_dev(input1, "class", "svelte-7i8bq0");
    			add_location(input1, file$b, 244, 8, 7830);
    			attr_dev(div2, "class", "form-group svelte-7i8bq0");
    			add_location(div2, file$b, 242, 6, 7701);
    			attr_dev(div3, "class", "form-row svelte-7i8bq0");
    			add_location(div3, file$b, 229, 4, 7324);
    			attr_dev(label2, "for", "endDate");
    			attr_dev(label2, "class", "svelte-7i8bq0");
    			add_location(label2, file$b, 255, 8, 8051);
    			attr_dev(input2, "type", "date");
    			attr_dev(input2, "id", "endDate");
    			attr_dev(input2, "min", input2_min_value = /*formData*/ ctx[2].startDate);
    			attr_dev(input2, "max", formatDate$1(/*maxDate*/ ctx[6]));
    			input2.required = true;
    			attr_dev(input2, "class", "svelte-7i8bq0");
    			add_location(input2, file$b, 256, 8, 8146);
    			attr_dev(div4, "class", "form-group svelte-7i8bq0");
    			add_location(div4, file$b, 254, 6, 8018);
    			attr_dev(label3, "for", "endTime");
    			attr_dev(label3, "class", "svelte-7i8bq0");
    			add_location(label3, file$b, 267, 8, 8392);
    			attr_dev(input3, "type", "time");
    			attr_dev(input3, "id", "endTime");
    			input3.required = true;
    			attr_dev(input3, "class", "svelte-7i8bq0");
    			add_location(input3, file$b, 268, 8, 8488);
    			attr_dev(div5, "class", "form-group svelte-7i8bq0");
    			add_location(div5, file$b, 266, 6, 8359);
    			attr_dev(div6, "class", "form-row svelte-7i8bq0");
    			add_location(div6, file$b, 253, 4, 7989);
    			attr_dev(label4, "for", "licensePlate");
    			attr_dev(label4, "class", "svelte-7i8bq0");
    			add_location(label4, file$b, 279, 8, 8705);
    			attr_dev(input4, "type", "text");
    			attr_dev(input4, "id", "licensePlate");
    			input4.required = true;

    			attr_dev(input4, "placeholder", input4_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg rendszámát'
    			: 'Enter your license plate');

    			attr_dev(input4, "class", "svelte-7i8bq0");
    			add_location(input4, file$b, 280, 8, 8810);
    			attr_dev(div7, "class", "form-group svelte-7i8bq0");
    			add_location(div7, file$b, 278, 6, 8672);
    			attr_dev(label5, "for", "passengers");
    			attr_dev(label5, "class", "svelte-7i8bq0");
    			add_location(label5, file$b, 293, 8, 9210);
    			attr_dev(input5, "type", "number");
    			attr_dev(input5, "id", "passengers");
    			attr_dev(input5, "min", "1");
    			attr_dev(input5, "max", "20");
    			input5.required = true;

    			attr_dev(input5, "placeholder", input5_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg az utasok számát'
    			: 'Enter number of passengers');

    			attr_dev(input5, "class", "svelte-7i8bq0");
    			add_location(input5, file$b, 294, 8, 9311);
    			attr_dev(div8, "class", "form-group svelte-7i8bq0");
    			add_location(div8, file$b, 292, 6, 9177);
    			attr_dev(div9, "class", "form-row svelte-7i8bq0");
    			add_location(div9, file$b, 277, 4, 8643);
    			attr_dev(h31, "class", "svelte-7i8bq0");
    			add_location(h31, file$b, 310, 6, 9774);
    			attr_dev(label6, "for", "carWashPackage");
    			attr_dev(label6, "class", "svelte-7i8bq0");
    			add_location(label6, file$b, 313, 8, 9884);
    			option0.__value = "none";
    			option0.value = option0.__value;
    			add_location(option0, file$b, 315, 10, 10075);
    			option1.__value = "smartInteriorExterior";
    			option1.value = option1.__value;
    			add_location(option1, file$b, 316, 10, 10185);
    			option2.__value = "premiumInteriorExterior";
    			option2.value = option2.__value;
    			add_location(option2, file$b, 317, 10, 10329);
    			attr_dev(select, "id", "carWashPackage");
    			attr_dev(select, "class", "svelte-7i8bq0");
    			if (/*formData*/ ctx[2].carWashPackage === void 0) add_render_callback(() => /*select_change_handler*/ ctx[16].call(select));
    			add_location(select, file$b, 314, 8, 9999);
    			attr_dev(div10, "class", "form-group svelte-7i8bq0");
    			add_location(div10, file$b, 312, 6, 9851);
    			attr_dev(div11, "class", "form-row car-wash-addon svelte-7i8bq0");
    			add_location(div11, file$b, 309, 4, 9730);
    			attr_dev(div12, "class", "form-section svelte-7i8bq0");
    			add_location(div12, file$b, 224, 2, 7175);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "btn btn-primary svelte-7i8bq0");
    			button.disabled = /*isSubmitting*/ ctx[4];
    			add_location(button, file$b, 341, 4, 11006);
    			attr_dev(div13, "class", "form-submit svelte-7i8bq0");
    			add_location(div13, file$b, 340, 2, 10976);
    			attr_dev(form, "class", "booking-form svelte-7i8bq0");
    			add_location(form, file$b, 222, 0, 6991);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, h2);
    			append_dev(h2, t0);
    			append_dev(form, t1);
    			append_dev(form, div12);
    			append_dev(div12, div0);
    			append_dev(div0, h30);
    			append_dev(h30, t2);
    			append_dev(div12, t3);
    			append_dev(div12, div3);
    			append_dev(div3, div1);
    			append_dev(div1, label0);
    			append_dev(label0, t4);
    			append_dev(div1, t5);
    			append_dev(div1, input0);
    			set_input_value(input0, /*formData*/ ctx[2].startDate);
    			append_dev(div3, t6);
    			append_dev(div3, div2);
    			append_dev(div2, label1);
    			append_dev(label1, t7);
    			append_dev(div2, t8);
    			append_dev(div2, input1);
    			set_input_value(input1, /*formData*/ ctx[2].startTime);
    			append_dev(div12, t9);
    			append_dev(div12, div6);
    			append_dev(div6, div4);
    			append_dev(div4, label2);
    			append_dev(label2, t10);
    			append_dev(div4, t11);
    			append_dev(div4, input2);
    			set_input_value(input2, /*formData*/ ctx[2].endDate);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, label3);
    			append_dev(label3, t13);
    			append_dev(div5, t14);
    			append_dev(div5, input3);
    			set_input_value(input3, /*formData*/ ctx[2].endTime);
    			append_dev(div12, t15);
    			append_dev(div12, div9);
    			append_dev(div9, div7);
    			append_dev(div7, label4);
    			append_dev(label4, t16);
    			append_dev(div7, t17);
    			append_dev(div7, input4);
    			set_input_value(input4, /*formData*/ ctx[2].licensePlate);
    			append_dev(div7, t18);
    			if (if_block0) if_block0.m(div7, null);
    			append_dev(div9, t19);
    			append_dev(div9, div8);
    			append_dev(div8, label5);
    			append_dev(label5, t20);
    			append_dev(div8, t21);
    			append_dev(div8, input5);
    			set_input_value(input5, /*formData*/ ctx[2].passengers);
    			append_dev(div8, t22);
    			if (if_block1) if_block1.m(div8, null);
    			append_dev(div12, t23);
    			append_dev(div12, div11);
    			append_dev(div11, h31);
    			append_dev(h31, t24);
    			append_dev(div11, t25);
    			append_dev(div11, div10);
    			append_dev(div10, label6);
    			append_dev(label6, t26);
    			append_dev(div10, t27);
    			append_dev(div10, select);
    			append_dev(select, option0);
    			append_dev(option0, t28);
    			append_dev(select, option1);
    			append_dev(option1, t29);
    			append_dev(select, option2);
    			append_dev(option2, t30);
    			select_option(select, /*formData*/ ctx[2].carWashPackage, true);
    			append_dev(div12, t31);
    			mount_component(pricecalculator, div12, null);
    			append_dev(form, t32);
    			mount_component(personalinfoform, form, null);
    			append_dev(form, t33);
    			append_dev(form, div13);
    			append_dev(div13, button);
    			append_dev(button, t34);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[11]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[12]),
    					listen_dev(input3, "input", /*input3_input_handler*/ ctx[13]),
    					listen_dev(input4, "input", /*input4_input_handler*/ ctx[14]),
    					listen_dev(input5, "input", /*input5_input_handler*/ ctx[15]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[16]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[9]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*currentLang*/ 2) && t0_value !== (t0_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'REPÜLŐTÉRI PARKOLÁS FOGLALÁS'
    			: 'AIRPORT PARKING BOOKING') + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t2_value !== (t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.dateRange + "")) set_data_dev(t2, t2_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t4_value !== (t4_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.startDate + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input0, /*formData*/ ctx[2].startDate);
    			}

    			if ((!current || dirty & /*currentLang*/ 2) && t7_value !== (t7_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Érkezési idő'
    			: 'Arrival time') + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input1, /*formData*/ ctx[2].startTime);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t10_value !== (t10_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.endDate + "")) set_data_dev(t10, t10_value);

    			if (!current || dirty & /*formData*/ 4 && input2_min_value !== (input2_min_value = /*formData*/ ctx[2].startDate)) {
    				attr_dev(input2, "min", input2_min_value);
    			}

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input2, /*formData*/ ctx[2].endDate);
    			}

    			if ((!current || dirty & /*currentLang*/ 2) && t13_value !== (t13_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Távozási idő'
    			: 'Departure time') + "")) set_data_dev(t13, t13_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input3, /*formData*/ ctx[2].endTime);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t16_value !== (t16_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.licensePlate + "")) set_data_dev(t16, t16_value);

    			if (!current || dirty & /*currentLang*/ 2 && input4_placeholder_value !== (input4_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg rendszámát'
    			: 'Enter your license plate')) {
    				attr_dev(input4, "placeholder", input4_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && input4.value !== /*formData*/ ctx[2].licensePlate) {
    				set_input_value(input4, /*formData*/ ctx[2].licensePlate);
    			}

    			if (/*formErrors*/ ctx[3].licensePlate) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_1$8(ctx);
    					if_block0.c();
    					if_block0.m(div7, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t20_value !== (t20_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.passengers + "")) set_data_dev(t20, t20_value);

    			if (!current || dirty & /*currentLang*/ 2 && input5_placeholder_value !== (input5_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg az utasok számát'
    			: 'Enter number of passengers')) {
    				attr_dev(input5, "placeholder", input5_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && to_number(input5.value) !== /*formData*/ ctx[2].passengers) {
    				set_input_value(input5, /*formData*/ ctx[2].passengers);
    			}

    			if (/*formErrors*/ ctx[3].passengers) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$a(ctx);
    					if_block1.c();
    					if_block1.m(div8, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t24_value !== (t24_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.addCarWash + "")) set_data_dev(t24, t24_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t26_value !== (t26_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.title + "")) set_data_dev(t26, t26_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t28_value !== (t28_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.none + "")) set_data_dev(t28, t28_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t29_value !== (t29_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.smartInteriorExterior + "")) set_data_dev(t29, t29_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t30_value !== (t30_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.airportParking.carWashOptions.premiumInteriorExterior + "")) set_data_dev(t30, t30_value);

    			if (dirty & /*formData*/ 4) {
    				select_option(select, /*formData*/ ctx[2].carWashPackage);
    			}

    			const pricecalculator_changes = {};
    			if (dirty & /*formData*/ 4) pricecalculator_changes.formData = /*formData*/ ctx[2];
    			if (dirty & /*content*/ 1) pricecalculator_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) pricecalculator_changes.currentLang = /*currentLang*/ ctx[1];
    			pricecalculator.$set(pricecalculator_changes);
    			const personalinfoform_changes = {};
    			if (dirty & /*content*/ 1) personalinfoform_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) personalinfoform_changes.currentLang = /*currentLang*/ ctx[1];

    			if (!updating_formData && dirty & /*formData*/ 4) {
    				updating_formData = true;
    				personalinfoform_changes.formData = /*formData*/ ctx[2];
    				add_flush_callback(() => updating_formData = false);
    			}

    			if (!updating_formErrors && dirty & /*formErrors*/ 8) {
    				updating_formErrors = true;
    				personalinfoform_changes.formErrors = /*formErrors*/ ctx[3];
    				add_flush_callback(() => updating_formErrors = false);
    			}

    			personalinfoform.$set(personalinfoform_changes);

    			if ((!current || dirty & /*isSubmitting, content, currentLang*/ 19) && t34_value !== (t34_value = (/*isSubmitting*/ ctx[4]
    			? /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.processing
    			: /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit) + "")) set_data_dev(t34, t34_value);

    			if (!current || dirty & /*isSubmitting*/ 16) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(pricecalculator.$$.fragment, local);
    			transition_in(personalinfoform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(pricecalculator.$$.fragment, local);
    			transition_out(personalinfoform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(pricecalculator);
    			destroy_component(personalinfoform);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$b.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function formatDate$1(date) {
    	const d = new Date(date);
    	let month = '' + (d.getMonth() + 1);
    	let day = '' + d.getDate();
    	const year = d.getFullYear();
    	if (month.length < 2) month = '0' + month;
    	if (day.length < 2) day = '0' + day;
    	return [year, month, day].join('-');
    }

    function parseDate(dateString) {
    	const [year, month, day] = dateString.split('-').map(Number);
    	return new Date(Date.UTC(year, month - 1, day));
    }

    function instance$b($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AirportParkingForm', slots, []);
    	let { content = {} } = $$props;
    	let { currentLang = 'hu' } = $$props;

    	// Initialize event dispatcher
    	const dispatch = createEventDispatcher();

    	// Calendar data
    	const today = new Date();

    	const maxDate = new Date();
    	maxDate.setMonth(maxDate.getMonth() + 3); // Allow bookings 3 months in advance

    	// Form data
    	let formData = {
    		// Airport parking specific
    		startDate: formatDate$1(today),
    		startTime: '12:00',
    		endDate: formatDate$1(today),
    		endTime: '12:00',
    		licensePlate: '',
    		passengers: '1',
    		carWashPackage: 'none',
    		// Personal info (will be bound from PersonalInfoForm)
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: ''
    	};

    	// Form validation
    	let formErrors = {
    		licensePlate: '',
    		passengers: '',
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: ''
    	};

    	let isSubmitting = false;

    	// Price calculation data - this will be updated by the PriceCalculator component
    	let calculatedPrices = {
    		parkingDays: 0,
    		parkingTotal: 0,
    		carWashStandard: 0,
    		carWashDiscount: 0,
    		carWashDiscounted: 0,
    		totalPrice: 0
    	};

    	// Calculate days correctly considering arrival/departure times
    	function calculateDays() {
    		if (!formData.startDate || !formData.endDate || !formData.startTime || !formData.endTime) return 0;

    		// Parse dates and times in a consistent manner (e.g., as UTC)
    		const start = new Date(`${formData.startDate}T${formData.startTime}:00Z`);

    		const end = new Date(`${formData.endDate}T${formData.endTime}:00Z`);

    		// Handle edge cases and validation
    		if (end <= start) {
    			if (formData.startDate === formData.endDate && formData.startTime >= formData.endTime) {
    				const todayStart = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0));
    				if (start >= todayStart) return 1;
    				return 0;
    			}

    			if (parseDate(formData.endDate) < parseDate(formData.startDate)) {
    				return 0;
    			}
    		}

    		const diffMilliseconds = end - start;
    		const diffHours = diffMilliseconds / (1000 * 60 * 60);
    		const days = Math.ceil(diffHours / 24);

    		// Ensure minimum 1 day if valid
    		const todayStart = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0));

    		if (days <= 0 && end > start && start >= todayStart) {
    			return 1;
    		}

    		return days > 0 ? days : 0;
    	}

    	// Form validation function
    	function validateForm() {
    		let isValid = true;

    		// Reset specific errors
    		$$invalidate(3, formErrors.licensePlate = '', formErrors);

    		$$invalidate(3, formErrors.passengers = '', formErrors);

    		// Validate service-specific fields
    		if (!formData.licensePlate.trim()) {
    			$$invalidate(3, formErrors.licensePlate = content[currentLang].bookingForm.airportParking.licensePlateRequired, formErrors);
    			isValid = false;
    		}

    		// Validate passengers is a number and within range
    		const numPassengers = parseInt(formData.passengers);

    		if (isNaN(numPassengers) || numPassengers < 1 || numPassengers > 20) {
    			$$invalidate(3, formErrors.passengers = content[currentLang].bookingForm.airportParking.passengersRequired, formErrors);
    			isValid = false;
    		}

    		// Basic validation for date range
    		const startDateTime = new Date(`${formData.startDate}T${formData.startTime}:00Z`);

    		const endDateTime = new Date(`${formData.endDate}T${formData.endTime}:00Z`);
    		const todayStart = new Date(Date.UTC(today.getFullYear(), today.getMonth(), today.getDate(), 0, 0, 0));

    		// Ensure start date is not in the past
    		if (startDateTime < todayStart) {
    			isValid = false;
    		}

    		// Ensure end date/time is not before start date/time
    		if (endDateTime < startDateTime) {
    			isValid = false;
    		}

    		// Ensure at least one day is booked
    		if (calculateDays() <= 0 && startDateTime < endDateTime) {
    			isValid = false;
    		}

    		return isValid;
    	}

    	// This function will be called when the PriceCalculator updates prices
    	function handlePriceUpdate(event) {
    		calculatedPrices = event.detail;
    	}

    	// Handle form submission
    	function handleSubmit() {
    		if (!validateForm()) {
    			// Scroll to the first error message if validation fails
    			setTimeout(
    				() => {
    					const firstError = document.querySelector('.error-message');

    					if (firstError) {
    						firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    					}
    				},
    				50
    			);

    			return;
    		}

    		$$invalidate(4, isSubmitting = true);

    		// Simulate API call
    		setTimeout(
    			() => {
    				// Create booking details object to pass to the parent component
    				const bookingDetails = {
    					service: 'airportParking',
    					name: `${formData.lastName} ${formData.firstName}`,
    					contact: {
    						email: formData.email,
    						phone: formData.phone
    					},
    					date: `${formData.startDate} ${formData.startTime} - ${formData.endDate} ${formData.endTime}`,
    					days: calculatedPrices.parkingDays,
    					licensePlate: formData.licensePlate,
    					passengers: formData.passengers
    				};

    				// For car wash package, if selected
    				if (formData.carWashPackage !== 'none') {
    					bookingDetails.carWashPackage = formData.carWashPackage;
    					bookingDetails.carWashPackageName = content[currentLang].bookingForm.airportParking.carWashOptions[formData.carWashPackage];

    					// Use the calculated prices from the PriceCalculator
    					bookingDetails.priceBreakdown = {
    						parkingTotal: calculatedPrices.parkingTotal,
    						carWashStandard: calculatedPrices.carWashStandard,
    						carWashDiscount: calculatedPrices.carWashDiscount,
    						carWashDiscounted: calculatedPrices.carWashDiscounted
    					};

    					bookingDetails.totalPrice = calculatedPrices.totalPrice;
    				} else {
    					// Only parking, no car wash - still use calculated price
    					bookingDetails.priceBreakdown = {
    						parkingTotal: calculatedPrices.parkingTotal,
    						carWashStandard: 0,
    						carWashDiscount: 0,
    						carWashDiscounted: 0
    					};

    					bookingDetails.totalPrice = calculatedPrices.totalPrice;
    				}

    				$$invalidate(4, isSubmitting = false);

    				// Dispatch event to notify parent component
    				dispatch('bookingComplete', bookingDetails);
    			},
    			1500
    		);
    	}

    	const writable_props = ['content', 'currentLang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<AirportParkingForm> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formData.startDate = this.value;
    		$$invalidate(2, formData);
    	}

    	function input1_input_handler() {
    		formData.startTime = this.value;
    		$$invalidate(2, formData);
    	}

    	function input2_input_handler() {
    		formData.endDate = this.value;
    		$$invalidate(2, formData);
    	}

    	function input3_input_handler() {
    		formData.endTime = this.value;
    		$$invalidate(2, formData);
    	}

    	function input4_input_handler() {
    		formData.licensePlate = this.value;
    		$$invalidate(2, formData);
    	}

    	function input5_input_handler() {
    		formData.passengers = to_number(this.value);
    		$$invalidate(2, formData);
    	}

    	function select_change_handler() {
    		formData.carWashPackage = select_value(this);
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formData_binding(value) {
    		formData = value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		formErrors = value;
    		$$invalidate(3, formErrors);
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		PersonalInfoForm,
    		PriceCalculator,
    		content,
    		currentLang,
    		dispatch,
    		today,
    		maxDate,
    		formData,
    		formErrors,
    		isSubmitting,
    		calculatedPrices,
    		formatDate: formatDate$1,
    		parseDate,
    		calculateDays,
    		validateForm,
    		handlePriceUpdate,
    		handleSubmit
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('formData' in $$props) $$invalidate(2, formData = $$props.formData);
    		if ('formErrors' in $$props) $$invalidate(3, formErrors = $$props.formErrors);
    		if ('isSubmitting' in $$props) $$invalidate(4, isSubmitting = $$props.isSubmitting);
    		if ('calculatedPrices' in $$props) calculatedPrices = $$props.calculatedPrices;
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		content,
    		currentLang,
    		formData,
    		formErrors,
    		isSubmitting,
    		today,
    		maxDate,
    		calculateDays,
    		handlePriceUpdate,
    		handleSubmit,
    		input0_input_handler,
    		input1_input_handler,
    		input2_input_handler,
    		input3_input_handler,
    		input4_input_handler,
    		input5_input_handler,
    		select_change_handler,
    		personalinfoform_formData_binding,
    		personalinfoform_formErrors_binding
    	];
    }

    class AirportParkingForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$b, create_fragment$b, safe_not_equal, { content: 0, currentLang: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AirportParkingForm",
    			options,
    			id: create_fragment$b.name
    		});
    	}

    	get content() {
    		throw new Error("<AirportParkingForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<AirportParkingForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<AirportParkingForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<AirportParkingForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/TimeSlotSelector.svelte generated by Svelte v3.59.2 */

    const { console: console_1$4 } = globals;
    const file$a = "src/components/TimeSlotSelector.svelte";

    function get_each_context$2(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    function get_each_context_1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (270:2) {:else}
    function create_else_block$7(ctx) {
    	let t0;
    	let div2;
    	let div0;
    	let h50;
    	let t1_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.timeSlots?.morning || (/*currentLang*/ ctx[2] === 'hu' ? 'Délelőtt' : 'Morning')) + "";
    	let t1;
    	let t2;
    	let t3;
    	let div1;
    	let h51;

    	let t4_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.timeSlots?.afternoon || (/*currentLang*/ ctx[2] === 'hu'
    	? 'Délután'
    	: 'Afternoon')) + "";

    	let t4;
    	let t5;
    	let t6;
    	let div6;
    	let div3;
    	let span0;
    	let t7;
    	let span1;

    	let t8_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.available || (/*currentLang*/ ctx[2] === 'hu'
    	? 'Elérhető'
    	: 'Available')) + "";

    	let t8;
    	let t9;
    	let div4;
    	let span2;
    	let t10;
    	let span3;

    	let t11_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.unavailable || (/*currentLang*/ ctx[2] === 'hu'
    	? 'Foglalt'
    	: 'Unavailable')) + "";

    	let t11;
    	let t12;
    	let div5;
    	let span4;
    	let t13;
    	let span5;

    	let t14_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.selected || (/*currentLang*/ ctx[2] === 'hu'
    	? 'Kiválasztott'
    	: 'Selected')) + "";

    	let t14;
    	let if_block0 = /*errorFetching*/ ctx[8] && create_if_block_8$2(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*displayableMorningSlots*/ ctx[9].length === 0) return create_if_block_6$3;
    		return create_else_block_3;
    	}

    	let current_block_type = select_block_type_1(ctx);
    	let if_block1 = current_block_type(ctx);

    	function select_block_type_3(ctx, dirty) {
    		if (/*displayableAfternoonSlots*/ ctx[10].length === 0) return create_if_block_4$5;
    		return create_else_block_1$1;
    	}

    	let current_block_type_1 = select_block_type_3(ctx);
    	let if_block2 = current_block_type_1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block0) if_block0.c();
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			h50 = element("h5");
    			t1 = text(t1_value);
    			t2 = space();
    			if_block1.c();
    			t3 = space();
    			div1 = element("div");
    			h51 = element("h5");
    			t4 = text(t4_value);
    			t5 = space();
    			if_block2.c();
    			t6 = space();
    			div6 = element("div");
    			div3 = element("div");
    			span0 = element("span");
    			t7 = space();
    			span1 = element("span");
    			t8 = text(t8_value);
    			t9 = space();
    			div4 = element("div");
    			span2 = element("span");
    			t10 = space();
    			span3 = element("span");
    			t11 = text(t11_value);
    			t12 = space();
    			div5 = element("div");
    			span4 = element("span");
    			t13 = space();
    			span5 = element("span");
    			t14 = text(t14_value);
    			attr_dev(h50, "class", "svelte-xhyfm");
    			add_location(h50, file$a, 277, 8, 10918);
    			attr_dev(div0, "class", "time-slot-group svelte-xhyfm");
    			add_location(div0, file$a, 276, 6, 10880);
    			attr_dev(h51, "class", "svelte-xhyfm");
    			add_location(h51, file$a, 304, 9, 12209);
    			attr_dev(div1, "class", "time-slot-group svelte-xhyfm");
    			add_location(div1, file$a, 303, 6, 12170);
    			attr_dev(div2, "class", "time-slots-container svelte-xhyfm");
    			add_location(div2, file$a, 275, 4, 10839);
    			attr_dev(span0, "class", "legend-indicator available-indicator svelte-xhyfm");
    			add_location(span0, file$a, 333, 8, 13540);
    			add_location(span1, file$a, 334, 8, 13607);
    			attr_dev(div3, "class", "legend-item svelte-xhyfm");
    			add_location(div3, file$a, 332, 6, 13506);
    			attr_dev(span2, "class", "legend-indicator unavailable-indicator svelte-xhyfm");
    			add_location(span2, file$a, 337, 8, 13783);
    			add_location(span3, file$a, 338, 8, 13852);
    			attr_dev(div4, "class", "legend-item svelte-xhyfm");
    			add_location(div4, file$a, 336, 6, 13749);
    			attr_dev(span4, "class", "legend-indicator selected-indicator svelte-xhyfm");
    			add_location(span4, file$a, 341, 8, 14031);
    			add_location(span5, file$a, 342, 8, 14097);
    			attr_dev(div5, "class", "legend-item svelte-xhyfm");
    			add_location(div5, file$a, 340, 6, 13997);
    			attr_dev(div6, "class", "legend svelte-xhyfm");
    			add_location(div6, file$a, 331, 4, 13479);
    		},
    		m: function mount(target, anchor) {
    			if (if_block0) if_block0.m(target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, div0);
    			append_dev(div0, h50);
    			append_dev(h50, t1);
    			append_dev(div0, t2);
    			if_block1.m(div0, null);
    			append_dev(div2, t3);
    			append_dev(div2, div1);
    			append_dev(div1, h51);
    			append_dev(h51, t4);
    			append_dev(div1, t5);
    			if_block2.m(div1, null);
    			insert_dev(target, t6, anchor);
    			insert_dev(target, div6, anchor);
    			append_dev(div6, div3);
    			append_dev(div3, span0);
    			append_dev(div3, t7);
    			append_dev(div3, span1);
    			append_dev(span1, t8);
    			append_dev(div6, t9);
    			append_dev(div6, div4);
    			append_dev(div4, span2);
    			append_dev(div4, t10);
    			append_dev(div4, span3);
    			append_dev(span3, t11);
    			append_dev(div6, t12);
    			append_dev(div6, div5);
    			append_dev(div5, span4);
    			append_dev(div5, t13);
    			append_dev(div5, span5);
    			append_dev(span5, t14);
    		},
    		p: function update(ctx, dirty) {
    			if (/*errorFetching*/ ctx[8]) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_8$2(ctx);
    					if_block0.c();
    					if_block0.m(t0.parentNode, t0);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if (dirty & /*content, currentLang*/ 6 && t1_value !== (t1_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.timeSlots?.morning || (/*currentLang*/ ctx[2] === 'hu' ? 'Délelőtt' : 'Morning')) + "")) set_data_dev(t1, t1_value);

    			if (current_block_type === (current_block_type = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(div0, null);
    				}
    			}

    			if (dirty & /*content, currentLang*/ 6 && t4_value !== (t4_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.timeSlots?.afternoon || (/*currentLang*/ ctx[2] === 'hu'
    			? 'Délután'
    			: 'Afternoon')) + "")) set_data_dev(t4, t4_value);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_3(ctx)) && if_block2) {
    				if_block2.p(ctx, dirty);
    			} else {
    				if_block2.d(1);
    				if_block2 = current_block_type_1(ctx);

    				if (if_block2) {
    					if_block2.c();
    					if_block2.m(div1, null);
    				}
    			}

    			if (dirty & /*content, currentLang*/ 6 && t8_value !== (t8_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.available || (/*currentLang*/ ctx[2] === 'hu'
    			? 'Elérhető'
    			: 'Available')) + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*content, currentLang*/ 6 && t11_value !== (t11_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.unavailable || (/*currentLang*/ ctx[2] === 'hu'
    			? 'Foglalt'
    			: 'Unavailable')) + "")) set_data_dev(t11, t11_value);

    			if (dirty & /*content, currentLang*/ 6 && t14_value !== (t14_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.legend?.selected || (/*currentLang*/ ctx[2] === 'hu'
    			? 'Kiválasztott'
    			: 'Selected')) + "")) set_data_dev(t14, t14_value);
    		},
    		d: function destroy(detaching) {
    			if (if_block0) if_block0.d(detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(div2);
    			if_block1.d();
    			if_block2.d();
    			if (detaching) detach_dev(t6);
    			if (detaching) detach_dev(div6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$7.name,
    		type: "else",
    		source: "(270:2) {:else}",
    		ctx
    	});

    	return block;
    }

    // (263:58) 
    function create_if_block_3$5(ctx) {
    	let div;
    	let span;
    	let t0;
    	let t1;
    	let button;

    	let t2_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Újra próbál'
    	: 'Try again') + "";

    	let t2;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span = element("span");
    			t0 = text(/*errorFetching*/ ctx[8]);
    			t1 = space();
    			button = element("button");
    			t2 = text(t2_value);
    			add_location(span, file$a, 264, 7, 10506);
    			attr_dev(button, "type", "button");
    			attr_dev(button, "class", "retry-button svelte-xhyfm");
    			add_location(button, file$a, 265, 7, 10542);
    			attr_dev(div, "class", "error-indicator svelte-xhyfm");
    			add_location(div, file$a, 263, 4, 10469);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span);
    			append_dev(span, t0);
    			append_dev(div, t1);
    			append_dev(div, button);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*fetchAvailableSlots*/ ctx[11], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorFetching*/ 256) set_data_dev(t0, /*errorFetching*/ ctx[8]);

    			if (dirty & /*currentLang*/ 4 && t2_value !== (t2_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Újra próbál'
    			: 'Try again') + "")) set_data_dev(t2, t2_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$5.name,
    		type: "if",
    		source: "(263:58) ",
    		ctx
    	});

    	return block;
    }

    // (258:22) 
    function create_if_block_2$6(ctx) {
    	let div1;
    	let div0;
    	let t0;
    	let span;

    	let t1_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Időpontok betöltése...'
    	: 'Loading available times...') + "";

    	let t1;

    	const block = {
    		c: function create() {
    			div1 = element("div");
    			div0 = element("div");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			attr_dev(div0, "class", "loading-spinner svelte-xhyfm");
    			add_location(div0, file$a, 259, 6, 10259);
    			attr_dev(span, "class", "svelte-xhyfm");
    			add_location(span, file$a, 260, 6, 10301);
    			attr_dev(div1, "class", "loading-indicator svelte-xhyfm");
    			add_location(div1, file$a, 258, 4, 10221);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div1, anchor);
    			append_dev(div1, div0);
    			append_dev(div1, t0);
    			append_dev(div1, span);
    			append_dev(span, t1);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t1_value !== (t1_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Időpontok betöltése...'
    			: 'Loading available times...') + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div1);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$6.name,
    		type: "if",
    		source: "(258:22) ",
    		ctx
    	});

    	return block;
    }

    // (254:2) {#if !date}
    function create_if_block_1$7(ctx) {
    	let div;

    	let t_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Kérjük, előbb válasszon dátumot'
    	: 'Please select a date first') + "";

    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(t_value);
    			attr_dev(div, "class", "info-message svelte-xhyfm");
    			add_location(div, file$a, 254, 4, 10060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t_value !== (t_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Kérjük, előbb válasszon dátumot'
    			: 'Please select a date first') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$7.name,
    		type: "if",
    		source: "(254:2) {#if !date}",
    		ctx
    	});

    	return block;
    }

    // (271:5) {#if errorFetching}
    function create_if_block_8$2(ctx) {
    	let div;
    	let t;

    	const block = {
    		c: function create() {
    			div = element("div");
    			t = text(/*errorFetching*/ ctx[8]);
    			attr_dev(div, "class", "warning-message svelte-xhyfm");
    			add_location(div, file$a, 271, 8, 10751);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorFetching*/ 256) set_data_dev(t, /*errorFetching*/ ctx[8]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$2.name,
    		type: "if",
    		source: "(271:5) {#if errorFetching}",
    		ctx
    	});

    	return block;
    }

    // (282:8) {:else}
    function create_else_block_3(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value_1 = /*displayableMorningSlots*/ ctx[9];
    	validate_each_argument(each_value_1);
    	const get_key = ctx => /*time*/ ctx[20];
    	validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);

    	for (let i = 0; i < each_value_1.length; i += 1) {
    		let child_ctx = get_each_context_1(ctx, each_value_1, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "time-slots svelte-xhyfm");
    			add_location(div, file$a, 282, 10, 11247);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedTime, displayableMorningSlots, unavailableTimeSlots, currentLang, selectTimeSlot*/ 4677) {
    				each_value_1 = /*displayableMorningSlots*/ ctx[9];
    				validate_each_argument(each_value_1);
    				validate_each_keys(ctx, each_value_1, get_each_context_1, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div, destroy_block, create_each_block_1, null, get_each_context_1);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_3.name,
    		type: "else",
    		source: "(282:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (280:8) {#if displayableMorningSlots.length === 0}
    function create_if_block_6$3(ctx) {
    	let p;

    	let t_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Nincs elérhető délelőtti időpont'
    	: 'No morning slots available') + "";

    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "no-slots-message svelte-xhyfm");
    			add_location(p, file$a, 280, 10, 11098);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t_value !== (t_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Nincs elérhető délelőtti időpont'
    			: 'No morning slots available') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$3.name,
    		type: "if",
    		source: "(280:8) {#if displayableMorningSlots.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (295:16) {:else}
    function create_else_block_4(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "status-indicator available-indicator svelte-xhyfm");
    			add_location(span, file$a, 295, 18, 11994);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_4.name,
    		type: "else",
    		source: "(295:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (293:16) {#if unavailableTimeSlots.includes(time)}
    function create_if_block_7$2(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "status-indicator unavailable-indicator svelte-xhyfm");
    			add_location(span, file$a, 293, 18, 11891);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$2.name,
    		type: "if",
    		source: "(293:16) {#if unavailableTimeSlots.includes(time)}",
    		ctx
    	});

    	return block;
    }

    // (284:12) {#each displayableMorningSlots as time (time)}
    function create_each_block_1(key_1, ctx) {
    	let button;
    	let t0_value = /*time*/ ctx[20] + "";
    	let t0;
    	let t1;
    	let show_if;
    	let t2;
    	let button_class_value;
    	let button_disabled_value;
    	let button_aria_label_value;
    	let mounted;
    	let dispose;

    	function select_block_type_2(ctx, dirty) {
    		if (dirty & /*unavailableTimeSlots, displayableMorningSlots*/ 576) show_if = null;
    		if (show_if == null) show_if = !!/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]);
    		if (show_if) return create_if_block_7$2;
    		return create_else_block_4;
    	}

    	let current_block_type = select_block_type_2(ctx, -1);
    	let if_block = current_block_type(ctx);

    	function click_handler() {
    		return /*click_handler*/ ctx[14](/*time*/ ctx[20]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			attr_dev(button, "type", "button");

    			attr_dev(button, "class", button_class_value = "time-slot " + (/*selectedTime*/ ctx[0] === /*time*/ ctx[20]
    			? 'selected'
    			: '') + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? 'unavailable'
    			: '') + " svelte-xhyfm");

    			button.disabled = button_disabled_value = /*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]);

    			attr_dev(button, "aria-label", button_aria_label_value = "" + (/*time*/ ctx[20] + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? /*currentLang*/ ctx[2] === 'hu'
    				? '- nem elérhető'
    				: '- unavailable'
    			: '')));

    			add_location(button, file$a, 284, 14, 11345);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			if_block.m(button, null);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*displayableMorningSlots*/ 512 && t0_value !== (t0_value = /*time*/ ctx[20] + "")) set_data_dev(t0, t0_value);

    			if (current_block_type !== (current_block_type = select_block_type_2(ctx, dirty))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, t2);
    				}
    			}

    			if (dirty & /*selectedTime, displayableMorningSlots, unavailableTimeSlots*/ 577 && button_class_value !== (button_class_value = "time-slot " + (/*selectedTime*/ ctx[0] === /*time*/ ctx[20]
    			? 'selected'
    			: '') + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? 'unavailable'
    			: '') + " svelte-xhyfm")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*unavailableTimeSlots, displayableMorningSlots*/ 576 && button_disabled_value !== (button_disabled_value = /*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]))) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty & /*displayableMorningSlots, unavailableTimeSlots, currentLang*/ 580 && button_aria_label_value !== (button_aria_label_value = "" + (/*time*/ ctx[20] + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? /*currentLang*/ ctx[2] === 'hu'
    				? '- nem elérhető'
    				: '- unavailable'
    			: '')))) {
    				attr_dev(button, "aria-label", button_aria_label_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block_1.name,
    		type: "each",
    		source: "(284:12) {#each displayableMorningSlots as time (time)}",
    		ctx
    	});

    	return block;
    }

    // (309:8) {:else}
    function create_else_block_1$1(ctx) {
    	let div;
    	let each_blocks = [];
    	let each_1_lookup = new Map();
    	let each_value = /*displayableAfternoonSlots*/ ctx[10];
    	validate_each_argument(each_value);
    	const get_key = ctx => /*time*/ ctx[20];
    	validate_each_keys(ctx, each_value, get_each_context$2, get_key);

    	for (let i = 0; i < each_value.length; i += 1) {
    		let child_ctx = get_each_context$2(ctx, each_value, i);
    		let key = get_key(child_ctx);
    		each_1_lookup.set(key, each_blocks[i] = create_each_block$2(key, child_ctx));
    	}

    	const block = {
    		c: function create() {
    			div = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			attr_dev(div, "class", "time-slots svelte-xhyfm");
    			add_location(div, file$a, 309, 10, 12544);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div, null);
    				}
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*selectedTime, displayableAfternoonSlots, unavailableTimeSlots, currentLang, selectTimeSlot*/ 5189) {
    				each_value = /*displayableAfternoonSlots*/ ctx[10];
    				validate_each_argument(each_value);
    				validate_each_keys(ctx, each_value, get_each_context$2, get_key);
    				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value, each_1_lookup, div, destroy_block, create_each_block$2, null, get_each_context$2);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1$1.name,
    		type: "else",
    		source: "(309:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (307:8) {#if displayableAfternoonSlots.length === 0}
    function create_if_block_4$5(ctx) {
    	let p;

    	let t_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Nincs elérhető délutáni időpont'
    	: 'No afternoon slots available') + "";

    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "no-slots-message svelte-xhyfm");
    			add_location(p, file$a, 307, 10, 12394);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t_value !== (t_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Nincs elérhető délutáni időpont'
    			: 'No afternoon slots available') + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$5.name,
    		type: "if",
    		source: "(307:8) {#if displayableAfternoonSlots.length === 0}",
    		ctx
    	});

    	return block;
    }

    // (322:16) {:else}
    function create_else_block_2$1(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "status-indicator available-indicator svelte-xhyfm");
    			add_location(span, file$a, 322, 18, 13294);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2$1.name,
    		type: "else",
    		source: "(322:16) {:else}",
    		ctx
    	});

    	return block;
    }

    // (320:16) {#if unavailableTimeSlots.includes(time)}
    function create_if_block_5$3(ctx) {
    	let span;

    	const block = {
    		c: function create() {
    			span = element("span");
    			attr_dev(span, "class", "status-indicator unavailable-indicator svelte-xhyfm");
    			add_location(span, file$a, 320, 18, 13191);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, span, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$3.name,
    		type: "if",
    		source: "(320:16) {#if unavailableTimeSlots.includes(time)}",
    		ctx
    	});

    	return block;
    }

    // (311:13) {#each displayableAfternoonSlots as time (time)}
    function create_each_block$2(key_1, ctx) {
    	let button;
    	let t0_value = /*time*/ ctx[20] + "";
    	let t0;
    	let t1;
    	let show_if;
    	let t2;
    	let button_class_value;
    	let button_disabled_value;
    	let button_aria_label_value;
    	let mounted;
    	let dispose;

    	function select_block_type_4(ctx, dirty) {
    		if (dirty & /*unavailableTimeSlots, displayableAfternoonSlots*/ 1088) show_if = null;
    		if (show_if == null) show_if = !!/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]);
    		if (show_if) return create_if_block_5$3;
    		return create_else_block_2$1;
    	}

    	let current_block_type = select_block_type_4(ctx, -1);
    	let if_block = current_block_type(ctx);

    	function click_handler_1() {
    		return /*click_handler_1*/ ctx[15](/*time*/ ctx[20]);
    	}

    	const block = {
    		key: key_1,
    		first: null,
    		c: function create() {
    			button = element("button");
    			t0 = text(t0_value);
    			t1 = space();
    			if_block.c();
    			t2 = space();
    			attr_dev(button, "type", "button");

    			attr_dev(button, "class", button_class_value = "time-slot " + (/*selectedTime*/ ctx[0] === /*time*/ ctx[20]
    			? 'selected'
    			: '') + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? 'unavailable'
    			: '') + " svelte-xhyfm");

    			button.disabled = button_disabled_value = /*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]);

    			attr_dev(button, "aria-label", button_aria_label_value = "" + (/*time*/ ctx[20] + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? /*currentLang*/ ctx[2] === 'hu'
    				? '- nem elérhető'
    				: '- unavailable'
    			: '')));

    			add_location(button, file$a, 311, 14, 12645);
    			this.first = button;
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, button, anchor);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			if_block.m(button, null);
    			append_dev(button, t2);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", click_handler_1, false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, dirty) {
    			ctx = new_ctx;
    			if (dirty & /*displayableAfternoonSlots*/ 1024 && t0_value !== (t0_value = /*time*/ ctx[20] + "")) set_data_dev(t0, t0_value);

    			if (current_block_type !== (current_block_type = select_block_type_4(ctx, dirty))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(button, t2);
    				}
    			}

    			if (dirty & /*selectedTime, displayableAfternoonSlots, unavailableTimeSlots*/ 1089 && button_class_value !== (button_class_value = "time-slot " + (/*selectedTime*/ ctx[0] === /*time*/ ctx[20]
    			? 'selected'
    			: '') + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? 'unavailable'
    			: '') + " svelte-xhyfm")) {
    				attr_dev(button, "class", button_class_value);
    			}

    			if (dirty & /*unavailableTimeSlots, displayableAfternoonSlots*/ 1088 && button_disabled_value !== (button_disabled_value = /*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20]))) {
    				prop_dev(button, "disabled", button_disabled_value);
    			}

    			if (dirty & /*displayableAfternoonSlots, unavailableTimeSlots, currentLang*/ 1092 && button_aria_label_value !== (button_aria_label_value = "" + (/*time*/ ctx[20] + " " + (/*unavailableTimeSlots*/ ctx[6].includes(/*time*/ ctx[20])
    			? /*currentLang*/ ctx[2] === 'hu'
    				? '- nem elérhető'
    				: '- unavailable'
    			: '')))) {
    				attr_dev(button, "aria-label", button_aria_label_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(button);
    			if_block.d();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$2.name,
    		type: "each",
    		source: "(311:13) {#each displayableAfternoonSlots as time (time)}",
    		ctx
    	});

    	return block;
    }

    // (348:2) {#if errorMessage}
    function create_if_block$9(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*errorMessage*/ ctx[3]);
    			attr_dev(p, "class", "error-message svelte-xhyfm");
    			add_location(p, file$a, 348, 4, 14280);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errorMessage*/ 8) set_data_dev(t, /*errorMessage*/ ctx[3]);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$9.name,
    		type: "if",
    		source: "(348:2) {#if errorMessage}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$a(ctx) {
    	let div;
    	let h4;

    	let t0_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.[/*formType*/ ctx[4]]?.time || (/*currentLang*/ ctx[2] === 'hu'
    	? 'Időpont kiválasztása'
    	: 'Select a time')) + "";

    	let t0;
    	let t1;
    	let t2;

    	function select_block_type(ctx, dirty) {
    		if (!/*date*/ ctx[5]) return create_if_block_1$7;
    		if (/*isLoading*/ ctx[7]) return create_if_block_2$6;
    		if (/*errorFetching*/ ctx[8] && !/*unavailableTimeSlots*/ ctx[6].length) return create_if_block_3$5;
    		return create_else_block$7;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type(ctx);
    	let if_block1 = /*errorMessage*/ ctx[3] && create_if_block$9(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			h4 = element("h4");
    			t0 = text(t0_value);
    			t1 = space();
    			if_block0.c();
    			t2 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(h4, "class", "svelte-xhyfm");
    			add_location(h4, file$a, 249, 2, 9899);
    			attr_dev(div, "class", "form-row svelte-xhyfm");
    			add_location(div, file$a, 248, 0, 9874);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h4);
    			append_dev(h4, t0);
    			append_dev(div, t1);
    			if_block0.m(div, null);
    			append_dev(div, t2);
    			if (if_block1) if_block1.m(div, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*content, currentLang, formType*/ 22 && t0_value !== (t0_value = (/*content*/ ctx[1]?.[/*currentLang*/ ctx[2]]?.bookingForm?.[/*formType*/ ctx[4]]?.time || (/*currentLang*/ ctx[2] === 'hu'
    			? 'Időpont kiválasztása'
    			: 'Select a time')) + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if_block0.d(1);
    				if_block0 = current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(div, t2);
    				}
    			}

    			if (/*errorMessage*/ ctx[3]) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block$9(ctx);
    					if_block1.c();
    					if_block1.m(div, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if_block0.d();
    			if (if_block1) if_block1.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$a.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function getTodaysDateString() {
    	const today = new Date();
    	const year = today.getFullYear();
    	const month = (today.getMonth() + 1).toString().padStart(2, '0');
    	const day = today.getDate().toString().padStart(2, '0');
    	return `${year}-${month}-${day}`;
    }

    // Simple string hash function (remains the same)
    function simpleHash(str) {
    	let hash = 0;

    	for (let i = 0; i < str.length; i++) {
    		const char = str.charCodeAt(i);
    		hash = (hash << 5) - hash + char;
    		hash = hash & hash;
    	}

    	return hash;
    }

    // Create a seeded random number generator (remains the same)
    function createSeededRandom(seed) {
    	return function () {
    		const x = Math.sin(seed++) * 10000;
    		return x - Math.floor(x);
    	};
    }

    function instance$a($$self, $$props, $$invalidate) {
    	let { $$slots: slots$1 = {}, $$scope } = $$props;
    	validate_slots('TimeSlotSelector', slots$1, []);
    	let { selectedTime = '' } = $$props;
    	let { content = {} } = $$props;
    	let { currentLang = 'hu' } = $$props;
    	let { errorMessage = '' } = $$props;
    	let { formType = '' } = $$props;
    	let { date = '' } = $$props;

    	// Define the dispatch function
    	const dispatch = createEventDispatcher();

    	// Business hours configuration (matches server-side configuration)
    	const businessHours = {
    		// Format: [opening hour, closing hour] in 24-hour format
    		'carWash': [8, 18], // 8:00 - 18:00
    		'autoService': [8, 17], // 8:00 - 17:00
    		'tireService': [8, 17], // 8:00 - 17:00
    		'airportParking': [0, 24], // 24/7 service
    		
    	};

    	// Generate time slots based on business hours for the service type
    	function generateTimeSlots(service) {
    		const slots = { morning: [], afternoon: [] };
    		const [openingHour, closingHour] = businessHours[service] || [8, 17]; // Default to 8-17

    		// Handle 24h service edge case (0 to 24 means 0 to 23:xx)
    		const endHour = closingHour === 24 ? 23 : closingHour - 1;

    		for (let hour = openingHour; hour <= endHour; hour++) {
    			const time00 = `${hour.toString().padStart(2, '0')}:00`;
    			const time30 = `${hour.toString().padStart(2, '0')}:30`;

    			if (hour < closingHour) {
    				// Ensure we don't go past closing hour exactly
    				if (hour < 12) {
    					slots.morning.push(time00);

    					// Add 30 min slot unless it's exactly the closing hour
    					if (hour < closingHour - 1 || hour === closingHour - 1 && businessHours[service]?.[1] % 1 !== 0.5) {
    						// Special check for 24h service to include 23:30
    						if (closingHour === 24 || hour < closingHour - 1 || hour === closingHour - 1 && businessHours[service]?.[1] % 1 === 0) {
    							slots.morning.push(time30);
    						}
    					}
    				} else {
    					slots.afternoon.push(time00);

    					// Add 30 min slot unless it's exactly the closing hour
    					if (closingHour === 24 || hour < closingHour - 1 || hour === closingHour - 1 && businessHours[service]?.[1] % 1 === 0) {
    						slots.afternoon.push(time30);
    					}
    				}
    			}
    		}

    		// Special case for 24hr service to include 23:30 if needed, handled above now
    		// Ensure closingHour:00 is not added if businessHours ends on the hour like 17:00
    		return slots;
    	}

    	// State for available/unavailable slots
    	let allTimeSlots = { morning: [], afternoon: [] };

    	let unavailableTimeSlots = [];
    	let isLoading = false;
    	let errorFetching = '';

    	// NEW: State for slots filtered for display (hiding past slots for today)
    	let displayableMorningSlots = [];

    	let displayableAfternoonSlots = [];

    	// This block focuses only on filtering based on the current time for today.
    	// --- End Reactive block ---
    	// Function to fetch available slots from the backend (remains the same)
    	async function fetchAvailableSlots() {
    		if (!date || !formType) return;
    		$$invalidate(7, isLoading = true);
    		$$invalidate(8, errorFetching = '');

    		try {
    			const serviceMap = {
    				carWash: 'carWash',
    				autoService: 'autoService',
    				tireService: 'tireService'
    			};

    			const service = serviceMap[formType] || formType;
    			console.log(`Workspaceing unavailable slots for: ${service} on ${date}`);
    			const apiUrl = `/api/available-slots?date=${date}&service=${service}`;

    			const response = await fetch(apiUrl, {
    				credentials: 'include',
    				headers: {
    					'Content-Type': 'application/json',
    					'Accept': 'application/json'
    				}
    			});

    			if (!response.ok) {
    				console.error('API response not OK:', response.status, response.statusText);

    				// Don't throw error here if you want mock data fallback
    				// throw new Error(`API returned status ${response.status}`);
    				$$invalidate(8, errorFetching = `API returned status ${response.status}. Using mock data.`); // Set error message

    				// Use mock data on API failure
    				$$invalidate(6, unavailableTimeSlots = generateMockUnavailableSlots(date, formType));

    				console.log('Using mock unavailable time slots due to API error:', unavailableTimeSlots);
    			} else {
    				const data = await response.json();
    				console.log('Received data from API:', data);

    				if (data.success) {
    					$$invalidate(6, unavailableTimeSlots = data.unavailableSlots || []);
    					console.log('Received unavailable time slots:', unavailableTimeSlots);

    					// Clear selection if it became unavailable
    					if (selectedTime && unavailableTimeSlots.includes(selectedTime)) {
    						$$invalidate(0, selectedTime = '');
    						dispatch('timeSelected', '');
    					}
    				} else {
    					console.error('API returned error:', data.message);
    					$$invalidate(8, errorFetching = data.message || 'Failed to fetch available slots');
    					$$invalidate(6, unavailableTimeSlots = generateMockUnavailableSlots(date, formType)); // Use mock data on logical API error
    					console.log('Using mock unavailable time slots due to API logic error:', unavailableTimeSlots);
    				}
    			}
    		} catch(err) {
    			console.error('Error fetching available time slots:', err);
    			$$invalidate(8, errorFetching = 'Could not connect to server. Using mock data instead.');

    			// Use mock data on network/fetch error
    			$$invalidate(6, unavailableTimeSlots = generateMockUnavailableSlots(date, formType));

    			console.log('Using mock unavailable time slots due to fetch catch:', unavailableTimeSlots);

    			// Clear selection if it became unavailable (based on mock data)
    			if (selectedTime && unavailableTimeSlots.includes(selectedTime)) {
    				$$invalidate(0, selectedTime = '');
    				dispatch('timeSelected', '');
    			}
    		} finally {
    			$$invalidate(7, isLoading = false);
    		}
    	}

    	// Mock function to generate unavailable slots (remains the same)
    	function generateMockUnavailableSlots(dateStr, service) {
    		const seed = simpleHash(`${dateStr}-${service}`);
    		const rng = createSeededRandom(seed);

    		const unavailableSlotsCount = {
    			'carWash': 5,
    			'autoService': 10,
    			'tireService': 8
    		};

    		const count = unavailableSlotsCount[service] || 7;

    		// Important: Mock should operate on ALL potential slots, not just displayable ones
    		const allGeneratedSlots = [
    			...generateTimeSlots(service).morning,
    			...generateTimeSlots(service).afternoon
    		];

    		const unavailable = [];

    		for (let i = 0; i < count; i++) {
    			if (allGeneratedSlots.length === 0) break;
    			const index = Math.floor(rng() * allGeneratedSlots.length);
    			unavailable.push(allGeneratedSlots[index]);
    			allGeneratedSlots.splice(index, 1);
    		}

    		return unavailable;
    	}

    	// Function to update the selected time and dispatch an event (remains the same)
    	function selectTimeSlot(time) {
    		if (unavailableTimeSlots.includes(time)) return;
    		$$invalidate(0, selectedTime = time);
    		dispatch('timeSelected', time);
    	}

    	// Also fetch on mount (existing logic)
    	onMount(() => {
    		console.log('TimeSlotSelector mounted. Date:', date, 'Form type:', formType);

    		if (date && formType) {
    			fetchAvailableSlots();
    		}
    	}); // Initial calculation of displayable slots happens via the main reactive block ($:)

    	const writable_props = ['selectedTime', 'content', 'currentLang', 'errorMessage', 'formType', 'date'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$4.warn(`<TimeSlotSelector> was created with unknown prop '${key}'`);
    	});

    	const click_handler = time => selectTimeSlot(time);
    	const click_handler_1 = time => selectTimeSlot(time);

    	$$self.$$set = $$props => {
    		if ('selectedTime' in $$props) $$invalidate(0, selectedTime = $$props.selectedTime);
    		if ('content' in $$props) $$invalidate(1, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(2, currentLang = $$props.currentLang);
    		if ('errorMessage' in $$props) $$invalidate(3, errorMessage = $$props.errorMessage);
    		if ('formType' in $$props) $$invalidate(4, formType = $$props.formType);
    		if ('date' in $$props) $$invalidate(5, date = $$props.date);
    	};

    	$$self.$capture_state = () => ({
    		selectedTime,
    		content,
    		currentLang,
    		errorMessage,
    		formType,
    		date,
    		createEventDispatcher,
    		onMount,
    		dispatch,
    		businessHours,
    		generateTimeSlots,
    		allTimeSlots,
    		unavailableTimeSlots,
    		isLoading,
    		errorFetching,
    		displayableMorningSlots,
    		displayableAfternoonSlots,
    		getTodaysDateString,
    		fetchAvailableSlots,
    		generateMockUnavailableSlots,
    		simpleHash,
    		createSeededRandom,
    		selectTimeSlot
    	});

    	$$self.$inject_state = $$props => {
    		if ('selectedTime' in $$props) $$invalidate(0, selectedTime = $$props.selectedTime);
    		if ('content' in $$props) $$invalidate(1, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(2, currentLang = $$props.currentLang);
    		if ('errorMessage' in $$props) $$invalidate(3, errorMessage = $$props.errorMessage);
    		if ('formType' in $$props) $$invalidate(4, formType = $$props.formType);
    		if ('date' in $$props) $$invalidate(5, date = $$props.date);
    		if ('allTimeSlots' in $$props) $$invalidate(13, allTimeSlots = $$props.allTimeSlots);
    		if ('unavailableTimeSlots' in $$props) $$invalidate(6, unavailableTimeSlots = $$props.unavailableTimeSlots);
    		if ('isLoading' in $$props) $$invalidate(7, isLoading = $$props.isLoading);
    		if ('errorFetching' in $$props) $$invalidate(8, errorFetching = $$props.errorFetching);
    		if ('displayableMorningSlots' in $$props) $$invalidate(9, displayableMorningSlots = $$props.displayableMorningSlots);
    		if ('displayableAfternoonSlots' in $$props) $$invalidate(10, displayableAfternoonSlots = $$props.displayableAfternoonSlots);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*formType, date, allTimeSlots*/ 8240) {
    			// --- End Helper ---
    			// --- Reactive block for recalculating displayable slots ---
    			{
    				// Regenerate all slots based on business hours whenever formType changes
    				$$invalidate(13, allTimeSlots = generateTimeSlots(formType));

    				const todayString = getTodaysDateString();
    				const isToday = date === todayString; // Check if selected date is today
    				let filterHour = -1;
    				let filterMinute = -1;

    				if (isToday) {
    					const now = new Date();
    					filterHour = now.getHours();
    					filterMinute = now.getMinutes();
    					console.log(`Filtering past slots for today (${date}). Current time: ${filterHour}:${filterMinute.toString().padStart(2, '0')}`);
    				} // console.log('Selected date is not today, showing all generated slots for date:', date);

    				// Filter function: returns true if the slot should be displayed
    				const filterSlot = time => {
    					if (!isToday) return true; // Not today, show all generated slots
    					const [hour, minute] = time.split(':').map(Number);

    					// Keep the slot if its start time is >= current time
    					return hour > filterHour || hour === filterHour && minute >= filterMinute;
    				};

    				// Apply filter to get the slots we actually want to display
    				$$invalidate(9, displayableMorningSlots = allTimeSlots.morning.filter(filterSlot));

    				$$invalidate(10, displayableAfternoonSlots = allTimeSlots.afternoon.filter(filterSlot));
    			} // Note: Fetching available slots (isLoading, unavailableTimeSlots)
    			// is handled by the separate `$: if (date)` block below.
    		}

    		if ($$self.$$.dirty & /*date, formType*/ 48) {
    			// Fetch available slots when the date changes (existing logic)
    			if (date && formType) {
    				// Added formType check as it influences slots
    				console.log('Date or FormType changed, fetching slots for date:', date, 'and type:', formType);

    				fetchAvailableSlots();
    			}
    		}
    	};

    	return [
    		selectedTime,
    		content,
    		currentLang,
    		errorMessage,
    		formType,
    		date,
    		unavailableTimeSlots,
    		isLoading,
    		errorFetching,
    		displayableMorningSlots,
    		displayableAfternoonSlots,
    		fetchAvailableSlots,
    		selectTimeSlot,
    		allTimeSlots,
    		click_handler,
    		click_handler_1
    	];
    }

    class TimeSlotSelector extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$a, create_fragment$a, safe_not_equal, {
    			selectedTime: 0,
    			content: 1,
    			currentLang: 2,
    			errorMessage: 3,
    			formType: 4,
    			date: 5
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TimeSlotSelector",
    			options,
    			id: create_fragment$a.name
    		});
    	}

    	get selectedTime() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set selectedTime(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get errorMessage() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set errorMessage(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get formType() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set formType(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get date() {
    		throw new Error("<TimeSlotSelector>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set date(value) {
    		throw new Error("<TimeSlotSelector>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/CarWashForm.svelte generated by Svelte v3.59.2 */
    const file$9 = "src/components/CarWashForm.svelte";

    // (136:8) {#if formErrors.bookingDate}
    function create_if_block_2$5(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[3].bookingDate + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-hafe94");
    			add_location(p, file$9, 136, 10, 4060);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 8 && t_value !== (t_value = /*formErrors*/ ctx[3].bookingDate + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$5.name,
    		type: "if",
    		source: "(136:8) {#if formErrors.bookingDate}",
    		ctx
    	});

    	return block;
    }

    // (187:8) {#if formErrors.acceptPrivacy}
    function create_if_block_1$6(ctx) {
    	let p;
    	let t_value = /*formErrors*/ ctx[3].acceptPrivacy + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-hafe94");
    			add_location(p, file$9, 187, 10, 5646);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*formErrors*/ 8 && t_value !== (t_value = /*formErrors*/ ctx[3].acceptPrivacy + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$6.name,
    		type: "if",
    		source: "(187:8) {#if formErrors.acceptPrivacy}",
    		ctx
    	});

    	return block;
    }

    // (198:8) {:else}
    function create_else_block$6(ctx) {
    	let t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 3 && t_value !== (t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$6.name,
    		type: "else",
    		source: "(198:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (195:8) {#if isSubmitting}
    function create_if_block$8(ctx) {
    	let loadingspinner;
    	let t0;
    	let span;

    	let t1_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Feldolgozás...'
    	: 'Processing...') + "";

    	let t1;
    	let current;

    	loadingspinner = new LoadingSpinner({
    			props: { size: "1rem", color: "white" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loadingspinner.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			add_location(span, file$9, 196, 10, 5939);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loadingspinner, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			append_dev(span, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentLang*/ 2) && t1_value !== (t1_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Feldolgozás...'
    			: 'Processing...') + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadingspinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadingspinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loadingspinner, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$8.name,
    		type: "if",
    		source: "(195:8) {#if isSubmitting}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$9(ctx) {
    	let form;
    	let h2;

    	let t0_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'AUTÓMOSÁS IDŐPONTFOGLALÁS'
    	: 'CAR WASH BOOKING') + "";

    	let t0;
    	let t1;
    	let div1;
    	let h30;

    	let t2_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.dateTime || (/*currentLang*/ ctx[1] === 'hu'
    	? 'Időpont kiválasztása'
    	: 'Select Date & Time')) + "";

    	let t2;
    	let t3;
    	let div0;
    	let label0;
    	let t4_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || (/*currentLang*/ ctx[1] === 'hu' ? 'Dátum' : 'Date')) + "";
    	let t4;
    	let t5;
    	let input0;
    	let t6;
    	let t7;
    	let timeslotselector;
    	let t8;
    	let personalinfoform;
    	let updating_formData;
    	let updating_formErrors;
    	let t9;
    	let div3;
    	let h31;

    	let t10_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.notes || (/*currentLang*/ ctx[1] === 'hu'
    	? 'További megjegyzések'
    	: 'Additional Notes')) + "";

    	let t10;
    	let t11;
    	let div2;
    	let textarea;
    	let textarea_placeholder_value;
    	let t12;
    	let div5;
    	let div4;
    	let label1;
    	let input1;
    	let t13;
    	let span;

    	let t14_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Elfogadom az '
    	: 'I accept the ') + "";

    	let t14;
    	let t15;
    	let a;

    	let t16_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Adatvédelmi irányelveket'
    	: 'Privacy Policy') + "";

    	let t16;
    	let t17;
    	let t18;
    	let div6;
    	let button;
    	let current_block_type_index;
    	let if_block2;
    	let current;
    	let mounted;
    	let dispose;
    	let if_block0 = /*formErrors*/ ctx[3].bookingDate && create_if_block_2$5(ctx);

    	timeslotselector = new TimeSlotSelector({
    			props: {
    				selectedTime: /*formData*/ ctx[2].bookingTime,
    				content: /*content*/ ctx[0],
    				currentLang: /*currentLang*/ ctx[1],
    				errorMessage: /*formErrors*/ ctx[3].bookingTime,
    				formType: "carWash",
    				date: /*formData*/ ctx[2].bookingDate
    			},
    			$$inline: true
    		});

    	timeslotselector.$on("timeSelected", /*handleTimeSelected*/ ctx[7]);

    	function personalinfoform_formData_binding(value) {
    		/*personalinfoform_formData_binding*/ ctx[10](value);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		/*personalinfoform_formErrors_binding*/ ctx[11](value);
    	}

    	let personalinfoform_props = {
    		content: /*content*/ ctx[0],
    		currentLang: /*currentLang*/ ctx[1],
    		isSubmitting: /*isSubmitting*/ ctx[4]
    	};

    	if (/*formData*/ ctx[2] !== void 0) {
    		personalinfoform_props.formData = /*formData*/ ctx[2];
    	}

    	if (/*formErrors*/ ctx[3] !== void 0) {
    		personalinfoform_props.formErrors = /*formErrors*/ ctx[3];
    	}

    	personalinfoform = new PersonalInfoForm({
    			props: personalinfoform_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalinfoform, 'formData', personalinfoform_formData_binding));
    	binding_callbacks.push(() => bind(personalinfoform, 'formErrors', personalinfoform_formErrors_binding));
    	let if_block1 = /*formErrors*/ ctx[3].acceptPrivacy && create_if_block_1$6(ctx);
    	const if_block_creators = [create_if_block$8, create_else_block$6];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isSubmitting*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			form = element("form");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");
    			label0 = element("label");
    			t4 = text(t4_value);
    			t5 = space();
    			input0 = element("input");
    			t6 = space();
    			if (if_block0) if_block0.c();
    			t7 = space();
    			create_component(timeslotselector.$$.fragment);
    			t8 = space();
    			create_component(personalinfoform.$$.fragment);
    			t9 = space();
    			div3 = element("div");
    			h31 = element("h3");
    			t10 = text(t10_value);
    			t11 = space();
    			div2 = element("div");
    			textarea = element("textarea");
    			t12 = space();
    			div5 = element("div");
    			div4 = element("div");
    			label1 = element("label");
    			input1 = element("input");
    			t13 = space();
    			span = element("span");
    			t14 = text(t14_value);
    			t15 = space();
    			a = element("a");
    			t16 = text(t16_value);
    			t17 = space();
    			if (if_block1) if_block1.c();
    			t18 = space();
    			div6 = element("div");
    			button = element("button");
    			if_block2.c();
    			attr_dev(h2, "class", "form-title svelte-hafe94");
    			add_location(h2, file$9, 119, 4, 3289);
    			attr_dev(h30, "class", "svelte-hafe94");
    			add_location(h30, file$9, 121, 6, 3428);
    			attr_dev(label0, "for", "booking-date");
    			attr_dev(label0, "class", "svelte-hafe94");
    			add_location(label0, file$9, 123, 8, 3610);
    			attr_dev(input0, "id", "booking-date");
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "min", formatDate(/*today*/ ctx[5]));
    			attr_dev(input0, "max", formatDate(/*maxDate*/ ctx[6]));
    			input0.required = true;
    			attr_dev(input0, "class", "svelte-hafe94");
    			toggle_class(input0, "error", /*formErrors*/ ctx[3].bookingDate);
    			add_location(input0, file$9, 126, 8, 3765);
    			attr_dev(div0, "class", "date-time-selector");
    			add_location(div0, file$9, 122, 6, 3569);
    			attr_dev(div1, "class", "form-section svelte-hafe94");
    			add_location(div1, file$9, 120, 4, 3395);
    			attr_dev(h31, "class", "svelte-hafe94");
    			add_location(h31, file$9, 160, 6, 4654);
    			attr_dev(textarea, "id", "notes");
    			attr_dev(textarea, "rows", "4");

    			attr_dev(textarea, "placeholder", textarea_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'További megjegyzések (opcionális)'
    			: 'Additional notes (optional)');

    			attr_dev(textarea, "class", "svelte-hafe94");
    			add_location(textarea, file$9, 162, 8, 4823);
    			attr_dev(div2, "class", "form-group svelte-hafe94");
    			add_location(div2, file$9, 161, 6, 4790);
    			attr_dev(div3, "class", "form-section svelte-hafe94");
    			add_location(div3, file$9, 159, 4, 4621);
    			attr_dev(input1, "type", "checkbox");
    			input1.required = true;
    			attr_dev(input1, "class", "svelte-hafe94");
    			add_location(input1, file$9, 174, 10, 5200);
    			attr_dev(a, "href", "/privacy");
    			attr_dev(a, "class", "privacy-link svelte-hafe94");
    			add_location(a, file$9, 181, 12, 5419);
    			add_location(span, file$9, 179, 10, 5329);
    			attr_dev(label1, "class", "checkbox-label svelte-hafe94");
    			add_location(label1, file$9, 173, 8, 5159);
    			attr_dev(div4, "class", "form-group privacy-checkbox svelte-hafe94");
    			add_location(div4, file$9, 172, 6, 5109);
    			attr_dev(div5, "class", "form-section svelte-hafe94");
    			add_location(div5, file$9, 171, 4, 5076);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "submit-button svelte-hafe94");
    			button.disabled = /*isSubmitting*/ ctx[4];
    			add_location(button, file$9, 193, 6, 5778);
    			attr_dev(div6, "class", "form-actions svelte-hafe94");
    			add_location(div6, file$9, 192, 4, 5745);
    			attr_dev(form, "class", "booking-form svelte-hafe94");
    			add_location(form, file$9, 118, 2, 3217);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, h2);
    			append_dev(h2, t0);
    			append_dev(form, t1);
    			append_dev(form, div1);
    			append_dev(div1, h30);
    			append_dev(h30, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);
    			append_dev(div0, label0);
    			append_dev(label0, t4);
    			append_dev(div0, t5);
    			append_dev(div0, input0);
    			set_input_value(input0, /*formData*/ ctx[2].bookingDate);
    			append_dev(div0, t6);
    			if (if_block0) if_block0.m(div0, null);
    			append_dev(form, t7);
    			mount_component(timeslotselector, form, null);
    			append_dev(form, t8);
    			mount_component(personalinfoform, form, null);
    			append_dev(form, t9);
    			append_dev(form, div3);
    			append_dev(div3, h31);
    			append_dev(h31, t10);
    			append_dev(div3, t11);
    			append_dev(div3, div2);
    			append_dev(div2, textarea);
    			set_input_value(textarea, /*formData*/ ctx[2].notes);
    			append_dev(form, t12);
    			append_dev(form, div5);
    			append_dev(div5, div4);
    			append_dev(div4, label1);
    			append_dev(label1, input1);
    			input1.checked = /*formData*/ ctx[2].acceptPrivacy;
    			append_dev(label1, t13);
    			append_dev(label1, span);
    			append_dev(span, t14);
    			append_dev(span, t15);
    			append_dev(span, a);
    			append_dev(a, t16);
    			append_dev(div4, t17);
    			if (if_block1) if_block1.m(div4, null);
    			append_dev(form, t18);
    			append_dev(form, div6);
    			append_dev(div6, button);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[9]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[12]),
    					listen_dev(input1, "change", /*input1_change_handler*/ ctx[13]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[8]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*currentLang*/ 2) && t0_value !== (t0_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'AUTÓMOSÁS IDŐPONTFOGLALÁS'
    			: 'CAR WASH BOOKING') + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t2_value !== (t2_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.dateTime || (/*currentLang*/ ctx[1] === 'hu'
    			? 'Időpont kiválasztása'
    			: 'Select Date & Time')) + "")) set_data_dev(t2, t2_value);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t4_value !== (t4_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || (/*currentLang*/ ctx[1] === 'hu' ? 'Dátum' : 'Date')) + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input0, /*formData*/ ctx[2].bookingDate);
    			}

    			if (!current || dirty & /*formErrors*/ 8) {
    				toggle_class(input0, "error", /*formErrors*/ ctx[3].bookingDate);
    			}

    			if (/*formErrors*/ ctx[3].bookingDate) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_2$5(ctx);
    					if_block0.c();
    					if_block0.m(div0, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			const timeslotselector_changes = {};
    			if (dirty & /*formData*/ 4) timeslotselector_changes.selectedTime = /*formData*/ ctx[2].bookingTime;
    			if (dirty & /*content*/ 1) timeslotselector_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) timeslotselector_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*formErrors*/ 8) timeslotselector_changes.errorMessage = /*formErrors*/ ctx[3].bookingTime;
    			if (dirty & /*formData*/ 4) timeslotselector_changes.date = /*formData*/ ctx[2].bookingDate;
    			timeslotselector.$set(timeslotselector_changes);
    			const personalinfoform_changes = {};
    			if (dirty & /*content*/ 1) personalinfoform_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) personalinfoform_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*isSubmitting*/ 16) personalinfoform_changes.isSubmitting = /*isSubmitting*/ ctx[4];

    			if (!updating_formData && dirty & /*formData*/ 4) {
    				updating_formData = true;
    				personalinfoform_changes.formData = /*formData*/ ctx[2];
    				add_flush_callback(() => updating_formData = false);
    			}

    			if (!updating_formErrors && dirty & /*formErrors*/ 8) {
    				updating_formErrors = true;
    				personalinfoform_changes.formErrors = /*formErrors*/ ctx[3];
    				add_flush_callback(() => updating_formErrors = false);
    			}

    			personalinfoform.$set(personalinfoform_changes);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t10_value !== (t10_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.notes || (/*currentLang*/ ctx[1] === 'hu'
    			? 'További megjegyzések'
    			: 'Additional Notes')) + "")) set_data_dev(t10, t10_value);

    			if (!current || dirty & /*currentLang*/ 2 && textarea_placeholder_value !== (textarea_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'További megjegyzések (opcionális)'
    			: 'Additional notes (optional)')) {
    				attr_dev(textarea, "placeholder", textarea_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4) {
    				set_input_value(textarea, /*formData*/ ctx[2].notes);
    			}

    			if (dirty & /*formData*/ 4) {
    				input1.checked = /*formData*/ ctx[2].acceptPrivacy;
    			}

    			if ((!current || dirty & /*currentLang*/ 2) && t14_value !== (t14_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Elfogadom az '
    			: 'I accept the ') + "")) set_data_dev(t14, t14_value);

    			if ((!current || dirty & /*currentLang*/ 2) && t16_value !== (t16_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Adatvédelmi irányelveket'
    			: 'Privacy Policy') + "")) set_data_dev(t16, t16_value);

    			if (/*formErrors*/ ctx[3].acceptPrivacy) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_1$6(ctx);
    					if_block1.c();
    					if_block1.m(div4, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block2 = if_blocks[current_block_type_index];

    				if (!if_block2) {
    					if_block2 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block2.c();
    				} else {
    					if_block2.p(ctx, dirty);
    				}

    				transition_in(if_block2, 1);
    				if_block2.m(button, null);
    			}

    			if (!current || dirty & /*isSubmitting*/ 16) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timeslotselector.$$.fragment, local);
    			transition_in(personalinfoform.$$.fragment, local);
    			transition_in(if_block2);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timeslotselector.$$.fragment, local);
    			transition_out(personalinfoform.$$.fragment, local);
    			transition_out(if_block2);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			if (if_block0) if_block0.d();
    			destroy_component(timeslotselector);
    			destroy_component(personalinfoform);
    			if (if_block1) if_block1.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$9.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function formatDate(date) {
    	const d = new Date(date);
    	let month = '' + (d.getMonth() + 1);
    	let day = '' + d.getDate();
    	const year = d.getFullYear();
    	if (month.length < 2) month = '0' + month;
    	if (day.length < 2) day = '0' + day;
    	return [year, month, day].join('-');
    }

    function instance$9($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CarWashForm', slots, []);
    	let { content = {} } = $$props;
    	let { currentLang = 'hu' } = $$props;

    	// Initialize event dispatcher
    	const dispatch = createEventDispatcher();

    	// Calendar data
    	const today = new Date();

    	const maxDate = new Date();
    	maxDate.setMonth(maxDate.getMonth() + 3); // Allow bookings 3 months in advance

    	// Form data
    	let formData = {
    		// Car wash specific
    		bookingDate: formatDate(today),
    		bookingTime: '',
    		// Personal info (will be bound from PersonalInfoForm)
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: '',
    		notes: '',
    		acceptPrivacy: false
    	};

    	// Form validation
    	let formErrors = {
    		bookingTime: '',
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: '',
    		acceptPrivacy: ''
    	};

    	let isSubmitting = false;

    	// Handle time selection from TimeSlotSelector
    	function handleTimeSelected(event) {
    		$$invalidate(2, formData.bookingTime = event.detail, formData);
    		$$invalidate(3, formErrors.bookingTime = '', formErrors); // Clear error on selection
    	}

    	// Form validation function
    	function validateForm() {
    		let isValid = true;

    		// Reset time slot error
    		$$invalidate(3, formErrors.bookingTime = '', formErrors);

    		// Validate time slot is selected
    		if (!formData.bookingTime) {
    			$$invalidate(3, formErrors.bookingTime = content[currentLang].bookingForm.selectTimeSlot, formErrors);
    			isValid = false;
    		}

    		return isValid;
    	}

    	// Handle form submission
    	function handleSubmit() {
    		if (!validateForm()) {
    			// Scroll to the first error message if validation fails
    			setTimeout(
    				() => {
    					const firstError = document.querySelector('.error-message');

    					if (firstError) {
    						firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
    					}
    				},
    				50
    			);

    			return;
    		}

    		$$invalidate(4, isSubmitting = true);

    		// Simulate API call
    		setTimeout(
    			() => {
    				// Create booking details object to pass to the parent component
    				const bookingDetails = {
    					service: 'carWash',
    					name: `${formData.lastName} ${formData.firstName}`,
    					contact: {
    						email: formData.email,
    						phone: formData.phone
    					},
    					date: formData.bookingDate,
    					time: formData.bookingTime,
    					notes: formData.notes
    				};

    				$$invalidate(4, isSubmitting = false);

    				// Dispatch event to notify parent component
    				dispatch('bookingComplete', bookingDetails);
    			},
    			1500
    		);
    	}

    	const writable_props = ['content', 'currentLang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CarWashForm> was created with unknown prop '${key}'`);
    	});

    	function input0_input_handler() {
    		formData.bookingDate = this.value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formData_binding(value) {
    		formData = value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		formErrors = value;
    		$$invalidate(3, formErrors);
    	}

    	function textarea_input_handler() {
    		formData.notes = this.value;
    		$$invalidate(2, formData);
    	}

    	function input1_change_handler() {
    		formData.acceptPrivacy = this.checked;
    		$$invalidate(2, formData);
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		PersonalInfoForm,
    		TimeSlotSelector,
    		LoadingSpinner,
    		content,
    		currentLang,
    		dispatch,
    		today,
    		maxDate,
    		formData,
    		formErrors,
    		isSubmitting,
    		formatDate,
    		handleTimeSelected,
    		validateForm,
    		handleSubmit
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('formData' in $$props) $$invalidate(2, formData = $$props.formData);
    		if ('formErrors' in $$props) $$invalidate(3, formErrors = $$props.formErrors);
    		if ('isSubmitting' in $$props) $$invalidate(4, isSubmitting = $$props.isSubmitting);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		content,
    		currentLang,
    		formData,
    		formErrors,
    		isSubmitting,
    		today,
    		maxDate,
    		handleTimeSelected,
    		handleSubmit,
    		input0_input_handler,
    		personalinfoform_formData_binding,
    		personalinfoform_formErrors_binding,
    		textarea_input_handler,
    		input1_change_handler
    	];
    }

    class CarWashForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$9, create_fragment$9, safe_not_equal, { content: 0, currentLang: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CarWashForm",
    			options,
    			id: create_fragment$9.name
    		});
    	}

    	get content() {
    		throw new Error("<CarWashForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<CarWashForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<CarWashForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<CarWashForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/AutoServiceForm.svelte generated by Svelte v3.59.2 */

    const { console: console_1$3 } = globals;
    const file$8 = "src/components/AutoServiceForm.svelte";

    function get_each_context$1(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[19] = list[i];
    	return child_ctx;
    }

    // (123:6) {#each serviceTypes as type}
    function create_each_block$1(ctx) {
    	let label;
    	let input;
    	let input_value_value;
    	let value_has_changed = false;
    	let t0;
    	let span;
    	let t1_value = /*type*/ ctx[19].label + "";
    	let t1;
    	let t2;
    	let binding_group;
    	let mounted;
    	let dispose;
    	binding_group = init_binding_group(/*$$binding_groups*/ ctx[9][0]);

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(input, "type", "radio");
    			attr_dev(input, "name", "serviceType");
    			input.__value = input_value_value = /*type*/ ctx[19].value;
    			input.value = input.__value;
    			attr_dev(input, "class", "svelte-cwlbhc");
    			add_location(input, file$8, 124, 10, 3955);
    			add_location(span, file$8, 130, 10, 4118);
    			attr_dev(label, "class", "service-type-option svelte-cwlbhc");
    			add_location(label, file$8, 123, 8, 3909);
    			binding_group.p(input);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = input.__value === /*formData*/ ctx[2].serviceType;
    			append_dev(label, t0);
    			append_dev(label, span);
    			append_dev(span, t1);
    			append_dev(label, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[8]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*serviceTypes*/ 32 && input_value_value !== (input_value_value = /*type*/ ctx[19].value)) {
    				prop_dev(input, "__value", input_value_value);
    				input.value = input.__value;
    				value_has_changed = true;
    			}

    			if (value_has_changed || dirty & /*formData, serviceTypes*/ 36) {
    				input.checked = input.__value === /*formData*/ ctx[2].serviceType;
    			}

    			if (dirty & /*serviceTypes*/ 32 && t1_value !== (t1_value = /*type*/ ctx[19].label + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			binding_group.r();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block$1.name,
    		type: "each",
    		source: "(123:6) {#each serviceTypes as type}",
    		ctx
    	});

    	return block;
    }

    // (135:4) {#if errors.serviceType}
    function create_if_block_4$4(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].serviceType + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-cwlbhc");
    			add_location(p, file$8, 135, 6, 4221);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].serviceType + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$4.name,
    		type: "if",
    		source: "(135:4) {#if errors.serviceType}",
    		ctx
    	});

    	return block;
    }

    // (153:6) {#if errors.date}
    function create_if_block_3$4(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].date + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-cwlbhc");
    			add_location(p, file$8, 153, 8, 4786);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].date + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$4.name,
    		type: "if",
    		source: "(153:6) {#if errors.date}",
    		ctx
    	});

    	return block;
    }

    // (169:6) {#if errors.time}
    function create_if_block_2$4(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].time + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-cwlbhc");
    			add_location(p, file$8, 169, 6, 5226);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].time + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$4.name,
    		type: "if",
    		source: "(169:6) {#if errors.time}",
    		ctx
    	});

    	return block;
    }

    // (233:6) {#if errors.acceptPrivacy}
    function create_if_block_1$5(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].acceptPrivacy + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-cwlbhc");
    			add_location(p, file$8, 233, 8, 7282);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].acceptPrivacy + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$5.name,
    		type: "if",
    		source: "(233:6) {#if errors.acceptPrivacy}",
    		ctx
    	});

    	return block;
    }

    // (248:6) {:else}
    function create_else_block$5(ctx) {
    	let t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 3 && t_value !== (t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$5.name,
    		type: "else",
    		source: "(248:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (245:6) {#if isSubmitting}
    function create_if_block$7(ctx) {
    	let loadingspinner;
    	let t0;
    	let span;

    	let t1_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Feldolgozás...'
    	: 'Processing...') + "";

    	let t1;
    	let current;

    	loadingspinner = new LoadingSpinner({
    			props: { size: "1rem", color: "white" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loadingspinner.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			add_location(span, file$8, 246, 8, 7578);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loadingspinner, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			append_dev(span, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentLang*/ 2) && t1_value !== (t1_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Feldolgozás...'
    			: 'Processing...') + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadingspinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadingspinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loadingspinner, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$7.name,
    		type: "if",
    		source: "(245:6) {#if isSubmitting}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$8(ctx) {
    	let form;
    	let h2;

    	let t0_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'AUTÓSZERVIZ IDŐPONTFOGLALÁS'
    	: 'AUTO SERVICE BOOKING') + "";

    	let t0;
    	let t1;
    	let div1;
    	let h30;
    	let t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.serviceType + "";
    	let t2;
    	let t3;
    	let div0;
    	let t4;
    	let t5;
    	let div3;
    	let h31;
    	let t6_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.dateTime || 'Select Date & Time') + "";
    	let t6;
    	let t7;
    	let div2;
    	let label0;
    	let t8_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || 'Date') + "";
    	let t8;
    	let t9;
    	let input0;
    	let t10;
    	let t11;
    	let div4;
    	let timeslotselector;
    	let t12;
    	let t13;
    	let div5;
    	let personalinfoform;
    	let updating_formData;
    	let updating_formErrors;
    	let t14;
    	let div8;
    	let h32;
    	let t15_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carDetails || 'Car Details') + "";
    	let t15;
    	let t16;
    	let div6;
    	let label1;
    	let t17_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carModel || 'Car Model') + "";
    	let t17;
    	let t18;
    	let input1;
    	let input1_placeholder_value;
    	let t19;
    	let div7;
    	let label2;
    	let t20_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.licensePlate || 'License Plate') + "";
    	let t20;
    	let t21;
    	let input2;
    	let input2_placeholder_value;
    	let t22;
    	let div10;
    	let h33;
    	let t23_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.notes || 'Additional Notes') + "";
    	let t23;
    	let t24;
    	let div9;
    	let textarea;
    	let textarea_placeholder_value;
    	let t25;
    	let div12;
    	let div11;
    	let label3;
    	let input3;
    	let t26;
    	let span;

    	let t27_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Elfogadom az '
    	: 'I accept the ') + "";

    	let t27;
    	let t28;
    	let a;

    	let t29_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Adatvédelmi irányelveket'
    	: 'Privacy Policy') + "";

    	let t29;
    	let t30;
    	let t31;
    	let div13;
    	let button;
    	let current_block_type_index;
    	let if_block4;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*serviceTypes*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block$1(get_each_context$1(ctx, each_value, i));
    	}

    	let if_block0 = /*errors*/ ctx[3].serviceType && create_if_block_4$4(ctx);
    	let if_block1 = /*errors*/ ctx[3].date && create_if_block_3$4(ctx);

    	timeslotselector = new TimeSlotSelector({
    			props: {
    				selectedTime: /*formData*/ ctx[2].time,
    				content: /*content*/ ctx[0],
    				currentLang: /*currentLang*/ ctx[1],
    				formType: "autoService",
    				date: /*formData*/ ctx[2].date
    			},
    			$$inline: true
    		});

    	timeslotselector.$on("timeSelected", /*handleTimeSelected*/ ctx[6]);
    	let if_block2 = /*errors*/ ctx[3].time && create_if_block_2$4(ctx);

    	function personalinfoform_formData_binding(value) {
    		/*personalinfoform_formData_binding*/ ctx[11](value);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		/*personalinfoform_formErrors_binding*/ ctx[12](value);
    	}

    	let personalinfoform_props = {
    		content: /*content*/ ctx[0],
    		currentLang: /*currentLang*/ ctx[1],
    		isSubmitting: /*isSubmitting*/ ctx[4]
    	};

    	if (/*formData*/ ctx[2] !== void 0) {
    		personalinfoform_props.formData = /*formData*/ ctx[2];
    	}

    	if (/*errors*/ ctx[3] !== void 0) {
    		personalinfoform_props.formErrors = /*errors*/ ctx[3];
    	}

    	personalinfoform = new PersonalInfoForm({
    			props: personalinfoform_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalinfoform, 'formData', personalinfoform_formData_binding));
    	binding_callbacks.push(() => bind(personalinfoform, 'formErrors', personalinfoform_formErrors_binding));
    	let if_block3 = /*errors*/ ctx[3].acceptPrivacy && create_if_block_1$5(ctx);
    	const if_block_creators = [create_if_block$7, create_else_block$5];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isSubmitting*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block4 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			form = element("form");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			div3 = element("div");
    			h31 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			div2 = element("div");
    			label0 = element("label");
    			t8 = text(t8_value);
    			t9 = space();
    			input0 = element("input");
    			t10 = space();
    			if (if_block1) if_block1.c();
    			t11 = space();
    			div4 = element("div");
    			create_component(timeslotselector.$$.fragment);
    			t12 = space();
    			if (if_block2) if_block2.c();
    			t13 = space();
    			div5 = element("div");
    			create_component(personalinfoform.$$.fragment);
    			t14 = space();
    			div8 = element("div");
    			h32 = element("h3");
    			t15 = text(t15_value);
    			t16 = space();
    			div6 = element("div");
    			label1 = element("label");
    			t17 = text(t17_value);
    			t18 = space();
    			input1 = element("input");
    			t19 = space();
    			div7 = element("div");
    			label2 = element("label");
    			t20 = text(t20_value);
    			t21 = space();
    			input2 = element("input");
    			t22 = space();
    			div10 = element("div");
    			h33 = element("h3");
    			t23 = text(t23_value);
    			t24 = space();
    			div9 = element("div");
    			textarea = element("textarea");
    			t25 = space();
    			div12 = element("div");
    			div11 = element("div");
    			label3 = element("label");
    			input3 = element("input");
    			t26 = space();
    			span = element("span");
    			t27 = text(t27_value);
    			t28 = space();
    			a = element("a");
    			t29 = text(t29_value);
    			t30 = space();
    			if (if_block3) if_block3.c();
    			t31 = space();
    			div13 = element("div");
    			button = element("button");
    			if_block4.c();
    			attr_dev(h2, "class", "form-title svelte-cwlbhc");
    			add_location(h2, file$8, 118, 2, 3625);
    			attr_dev(h30, "class", "svelte-cwlbhc");
    			add_location(h30, file$8, 120, 4, 3766);
    			attr_dev(div0, "class", "service-types svelte-cwlbhc");
    			add_location(div0, file$8, 121, 4, 3838);
    			attr_dev(div1, "class", "form-section svelte-cwlbhc");
    			add_location(div1, file$8, 119, 2, 3735);
    			attr_dev(h31, "class", "svelte-cwlbhc");
    			add_location(h31, file$8, 140, 4, 4324);
    			attr_dev(label0, "for", "booking-date");
    			add_location(label0, file$8, 142, 6, 4456);
    			attr_dev(input0, "id", "booking-date");
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "min", new Date().toISOString().split('T')[0]);
    			attr_dev(input0, "class", "svelte-cwlbhc");
    			toggle_class(input0, "error", /*errors*/ ctx[3].date);
    			add_location(input0, file$8, 145, 6, 4570);
    			attr_dev(div2, "class", "date-time-selector svelte-cwlbhc");
    			add_location(div2, file$8, 141, 4, 4417);
    			attr_dev(div3, "class", "form-section svelte-cwlbhc");
    			add_location(div3, file$8, 139, 2, 4293);
    			attr_dev(div4, "class", "time-slot-container svelte-cwlbhc");
    			toggle_class(div4, "error", /*errors*/ ctx[3].time);
    			add_location(div4, file$8, 159, 2, 4933);
    			attr_dev(div5, "class", "form-section svelte-cwlbhc");
    			add_location(div5, file$8, 173, 2, 5293);
    			attr_dev(h32, "class", "svelte-cwlbhc");
    			add_location(h32, file$8, 184, 4, 5532);
    			attr_dev(label1, "for", "carModel");
    			attr_dev(label1, "class", "svelte-cwlbhc");
    			add_location(label1, file$8, 186, 6, 5651);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "carModel");
    			attr_dev(input1, "placeholder", input1_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carModelPlaceholder || 'e.g. Toyota Corolla 2018');
    			attr_dev(input1, "class", "svelte-cwlbhc");
    			add_location(input1, file$8, 187, 6, 5758);
    			attr_dev(div6, "class", "form-group svelte-cwlbhc");
    			add_location(div6, file$8, 185, 4, 5620);
    			attr_dev(label2, "for", "licensePlate");
    			attr_dev(label2, "class", "svelte-cwlbhc");
    			add_location(label2, file$8, 195, 6, 6018);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "licensePlate");

    			attr_dev(input2, "placeholder", input2_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg rendszámát'
    			: 'Enter your license plate');

    			attr_dev(input2, "class", "svelte-cwlbhc");
    			add_location(input2, file$8, 196, 6, 6137);
    			attr_dev(div7, "class", "form-group svelte-cwlbhc");
    			add_location(div7, file$8, 194, 4, 5987);
    			attr_dev(div8, "class", "form-section svelte-cwlbhc");
    			add_location(div8, file$8, 183, 2, 5501);
    			attr_dev(h33, "class", "svelte-cwlbhc");
    			add_location(h33, file$8, 206, 4, 6392);
    			attr_dev(textarea, "id", "notes");
    			attr_dev(textarea, "rows", "4");

    			attr_dev(textarea, "placeholder", textarea_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'További megjegyzések (opcionális)'
    			: 'Additional notes (optional)');

    			attr_dev(textarea, "class", "svelte-cwlbhc");
    			add_location(textarea, file$8, 208, 6, 6511);
    			attr_dev(div9, "class", "form-group svelte-cwlbhc");
    			add_location(div9, file$8, 207, 4, 6480);
    			attr_dev(div10, "class", "form-section svelte-cwlbhc");
    			add_location(div10, file$8, 205, 2, 6361);
    			attr_dev(input3, "type", "checkbox");
    			input3.required = true;
    			attr_dev(input3, "class", "svelte-cwlbhc");
    			add_location(input3, file$8, 220, 8, 6866);
    			attr_dev(a, "href", "/privacy");
    			attr_dev(a, "class", "privacy-link svelte-cwlbhc");
    			add_location(a, file$8, 227, 10, 7071);
    			add_location(span, file$8, 225, 8, 6985);
    			attr_dev(label3, "class", "checkbox-label svelte-cwlbhc");
    			add_location(label3, file$8, 219, 6, 6827);
    			attr_dev(div11, "class", "form-group privacy-checkbox svelte-cwlbhc");
    			add_location(div11, file$8, 218, 4, 6779);
    			attr_dev(div12, "class", "form-section svelte-cwlbhc");
    			add_location(div12, file$8, 217, 2, 6748);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "submit-button svelte-cwlbhc");
    			button.disabled = /*isSubmitting*/ ctx[4];
    			add_location(button, file$8, 239, 4, 7400);
    			attr_dev(div13, "class", "form-actions svelte-cwlbhc");
    			add_location(div13, file$8, 238, 2, 7369);
    			attr_dev(form, "class", "booking-form svelte-cwlbhc");
    			add_location(form, file$8, 117, 0, 3555);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, h2);
    			append_dev(h2, t0);
    			append_dev(form, t1);
    			append_dev(form, div1);
    			append_dev(div1, h30);
    			append_dev(h30, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div0, null);
    				}
    			}

    			append_dev(div1, t4);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(form, t5);
    			append_dev(form, div3);
    			append_dev(div3, h31);
    			append_dev(h31, t6);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, label0);
    			append_dev(label0, t8);
    			append_dev(div2, t9);
    			append_dev(div2, input0);
    			set_input_value(input0, /*formData*/ ctx[2].date);
    			append_dev(div2, t10);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(form, t11);
    			append_dev(form, div4);
    			mount_component(timeslotselector, div4, null);
    			append_dev(div4, t12);
    			if (if_block2) if_block2.m(div4, null);
    			append_dev(form, t13);
    			append_dev(form, div5);
    			mount_component(personalinfoform, div5, null);
    			append_dev(form, t14);
    			append_dev(form, div8);
    			append_dev(div8, h32);
    			append_dev(h32, t15);
    			append_dev(div8, t16);
    			append_dev(div8, div6);
    			append_dev(div6, label1);
    			append_dev(label1, t17);
    			append_dev(div6, t18);
    			append_dev(div6, input1);
    			set_input_value(input1, /*formData*/ ctx[2].carModel);
    			append_dev(div8, t19);
    			append_dev(div8, div7);
    			append_dev(div7, label2);
    			append_dev(label2, t20);
    			append_dev(div7, t21);
    			append_dev(div7, input2);
    			set_input_value(input2, /*formData*/ ctx[2].licensePlate);
    			append_dev(form, t22);
    			append_dev(form, div10);
    			append_dev(div10, h33);
    			append_dev(h33, t23);
    			append_dev(div10, t24);
    			append_dev(div10, div9);
    			append_dev(div9, textarea);
    			set_input_value(textarea, /*formData*/ ctx[2].notes);
    			append_dev(form, t25);
    			append_dev(form, div12);
    			append_dev(div12, div11);
    			append_dev(div11, label3);
    			append_dev(label3, input3);
    			input3.checked = /*formData*/ ctx[2].acceptPrivacy;
    			append_dev(label3, t26);
    			append_dev(label3, span);
    			append_dev(span, t27);
    			append_dev(span, t28);
    			append_dev(span, a);
    			append_dev(a, t29);
    			append_dev(div11, t30);
    			if (if_block3) if_block3.m(div11, null);
    			append_dev(form, t31);
    			append_dev(form, div13);
    			append_dev(div13, button);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[13]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[14]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[15]),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[16]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[7]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*currentLang*/ 2) && t0_value !== (t0_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'AUTÓSZERVIZ IDŐPONTFOGLALÁS'
    			: 'AUTO SERVICE BOOKING') + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t2_value !== (t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.serviceType + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*serviceTypes, formData*/ 36) {
    				each_value = /*serviceTypes*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context$1(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block$1(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*errors*/ ctx[3].serviceType) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$4(ctx);
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t6_value !== (t6_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.dateTime || 'Select Date & Time') + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t8_value !== (t8_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || 'Date') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input0, /*formData*/ ctx[2].date);
    			}

    			if (!current || dirty & /*errors*/ 8) {
    				toggle_class(input0, "error", /*errors*/ ctx[3].date);
    			}

    			if (/*errors*/ ctx[3].date) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$4(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const timeslotselector_changes = {};
    			if (dirty & /*formData*/ 4) timeslotselector_changes.selectedTime = /*formData*/ ctx[2].time;
    			if (dirty & /*content*/ 1) timeslotselector_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) timeslotselector_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*formData*/ 4) timeslotselector_changes.date = /*formData*/ ctx[2].date;
    			timeslotselector.$set(timeslotselector_changes);

    			if (/*errors*/ ctx[3].time) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$4(ctx);
    					if_block2.c();
    					if_block2.m(div4, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!current || dirty & /*errors*/ 8) {
    				toggle_class(div4, "error", /*errors*/ ctx[3].time);
    			}

    			const personalinfoform_changes = {};
    			if (dirty & /*content*/ 1) personalinfoform_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) personalinfoform_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*isSubmitting*/ 16) personalinfoform_changes.isSubmitting = /*isSubmitting*/ ctx[4];

    			if (!updating_formData && dirty & /*formData*/ 4) {
    				updating_formData = true;
    				personalinfoform_changes.formData = /*formData*/ ctx[2];
    				add_flush_callback(() => updating_formData = false);
    			}

    			if (!updating_formErrors && dirty & /*errors*/ 8) {
    				updating_formErrors = true;
    				personalinfoform_changes.formErrors = /*errors*/ ctx[3];
    				add_flush_callback(() => updating_formErrors = false);
    			}

    			personalinfoform.$set(personalinfoform_changes);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t15_value !== (t15_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carDetails || 'Car Details') + "")) set_data_dev(t15, t15_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t17_value !== (t17_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carModel || 'Car Model') + "")) set_data_dev(t17, t17_value);

    			if (!current || dirty & /*content, currentLang*/ 3 && input1_placeholder_value !== (input1_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.carModelPlaceholder || 'e.g. Toyota Corolla 2018')) {
    				attr_dev(input1, "placeholder", input1_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && input1.value !== /*formData*/ ctx[2].carModel) {
    				set_input_value(input1, /*formData*/ ctx[2].carModel);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t20_value !== (t20_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.licensePlate || 'License Plate') + "")) set_data_dev(t20, t20_value);

    			if (!current || dirty & /*currentLang*/ 2 && input2_placeholder_value !== (input2_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'Adja meg rendszámát'
    			: 'Enter your license plate')) {
    				attr_dev(input2, "placeholder", input2_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && input2.value !== /*formData*/ ctx[2].licensePlate) {
    				set_input_value(input2, /*formData*/ ctx[2].licensePlate);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t23_value !== (t23_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.autoService.notes || 'Additional Notes') + "")) set_data_dev(t23, t23_value);

    			if (!current || dirty & /*currentLang*/ 2 && textarea_placeholder_value !== (textarea_placeholder_value = /*currentLang*/ ctx[1] === 'hu'
    			? 'További megjegyzések (opcionális)'
    			: 'Additional notes (optional)')) {
    				attr_dev(textarea, "placeholder", textarea_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4) {
    				set_input_value(textarea, /*formData*/ ctx[2].notes);
    			}

    			if (dirty & /*formData*/ 4) {
    				input3.checked = /*formData*/ ctx[2].acceptPrivacy;
    			}

    			if ((!current || dirty & /*currentLang*/ 2) && t27_value !== (t27_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Elfogadom az '
    			: 'I accept the ') + "")) set_data_dev(t27, t27_value);

    			if ((!current || dirty & /*currentLang*/ 2) && t29_value !== (t29_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Adatvédelmi irányelveket'
    			: 'Privacy Policy') + "")) set_data_dev(t29, t29_value);

    			if (/*errors*/ ctx[3].acceptPrivacy) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$5(ctx);
    					if_block3.c();
    					if_block3.m(div11, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks[current_block_type_index];

    				if (!if_block4) {
    					if_block4 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block4.c();
    				} else {
    					if_block4.p(ctx, dirty);
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(button, null);
    			}

    			if (!current || dirty & /*isSubmitting*/ 16) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timeslotselector.$$.fragment, local);
    			transition_in(personalinfoform.$$.fragment, local);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timeslotselector.$$.fragment, local);
    			transition_out(personalinfoform.$$.fragment, local);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(timeslotselector);
    			if (if_block2) if_block2.d();
    			destroy_component(personalinfoform);
    			if (if_block3) if_block3.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$8.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$8($$self, $$props, $$invalidate) {
    	let serviceTypes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('AutoServiceForm', slots, []);
    	const dispatch = createEventDispatcher();
    	let { content } = $$props;
    	let { currentLang } = $$props;

    	let formData = {
    		serviceType: '',
    		date: new Date().toISOString().split('T')[0],
    		time: '',
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: '',
    		carModel: '',
    		licensePlate: '',
    		notes: '',
    		acceptPrivacy: false
    	};

    	let errors = {};
    	let isSubmitting = false;

    	function validateForm() {
    		$$invalidate(3, errors = {});
    		let isValid = true;

    		if (!formData.serviceType) {
    			$$invalidate(
    				3,
    				errors.serviceType = currentLang === 'hu'
    				? 'Kérjük válasszon szolgáltatást'
    				: 'Please select a service type',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.date) {
    			$$invalidate(
    				3,
    				errors.date = currentLang === 'hu'
    				? 'Kérjük válasszon dátumot'
    				: 'Please select a date',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.time) {
    			$$invalidate(
    				3,
    				errors.time = currentLang === 'hu'
    				? 'Kérjük válasszon időpontot'
    				: 'Please select a time',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.firstName) {
    			$$invalidate(
    				3,
    				errors.firstName = currentLang === 'hu'
    				? 'Kérjük adja meg a keresztnevét'
    				: 'Please enter your first name',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.lastName) {
    			$$invalidate(
    				3,
    				errors.lastName = currentLang === 'hu'
    				? 'Kérjük adja meg a vezetéknevét'
    				: 'Please enter your last name',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.phone) {
    			$$invalidate(
    				3,
    				errors.phone = currentLang === 'hu'
    				? 'Kérjük adja meg telefonszámát'
    				: 'Please enter your phone number',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.email) {
    			$$invalidate(
    				3,
    				errors.email = currentLang === 'hu'
    				? 'Kérjük adja meg email címét'
    				: 'Please enter your email address',
    				errors
    			);

    			isValid = false;
    		} else if (!(/^[^\s@]+@[^\s@]+\.[^\s@]+$/).test(formData.email)) {
    			$$invalidate(
    				3,
    				errors.email = currentLang === 'hu'
    				? 'Érvénytelen email cím'
    				: 'Invalid email address',
    				errors
    			);

    			isValid = false;
    		}

    		return isValid;
    	}

    	function handleTimeSelected(event) {
    		$$invalidate(2, formData.time = event.detail, formData);
    		$$invalidate(3, errors.time = '', errors); // Clear error when time is selected
    	}

    	async function handleSubmit() {
    		if (!validateForm()) return;
    		$$invalidate(4, isSubmitting = true);

    		try {
    			const bookingData = {
    				service: 'autoService',
    				serviceType: formData.serviceType,
    				date: formData.date,
    				time: formData.time,
    				name: `${formData.lastName} ${formData.firstName}`,
    				contact: {
    					email: formData.email,
    					phone: formData.phone
    				},
    				carModel: formData.carModel,
    				licensePlate: formData.licensePlate,
    				notes: formData.notes,
    				// Add admin email for backend
    				adminEmail: 'jarsunkaev@gmail.com'
    			};

    			dispatch('bookingComplete', bookingData);
    		} catch(error) {
    			console.error('Error submitting form:', error);
    		} finally {
    			$$invalidate(4, isSubmitting = false);
    		}
    	}

    	$$self.$$.on_mount.push(function () {
    		if (content === undefined && !('content' in $$props || $$self.$$.bound[$$self.$$.props['content']])) {
    			console_1$3.warn("<AutoServiceForm> was created without expected prop 'content'");
    		}

    		if (currentLang === undefined && !('currentLang' in $$props || $$self.$$.bound[$$self.$$.props['currentLang']])) {
    			console_1$3.warn("<AutoServiceForm> was created without expected prop 'currentLang'");
    		}
    	});

    	const writable_props = ['content', 'currentLang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$3.warn(`<AutoServiceForm> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[]];

    	function input_change_handler() {
    		formData.serviceType = this.__value;
    		$$invalidate(2, formData);
    	}

    	function input0_input_handler() {
    		formData.date = this.value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formData_binding(value) {
    		formData = value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		errors = value;
    		$$invalidate(3, errors);
    	}

    	function input1_input_handler() {
    		formData.carModel = this.value;
    		$$invalidate(2, formData);
    	}

    	function input2_input_handler() {
    		formData.licensePlate = this.value;
    		$$invalidate(2, formData);
    	}

    	function textarea_input_handler() {
    		formData.notes = this.value;
    		$$invalidate(2, formData);
    	}

    	function input3_change_handler() {
    		formData.acceptPrivacy = this.checked;
    		$$invalidate(2, formData);
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		PersonalInfoForm,
    		TimeSlotSelector,
    		LoadingSpinner,
    		dispatch,
    		content,
    		currentLang,
    		formData,
    		errors,
    		isSubmitting,
    		validateForm,
    		handleTimeSelected,
    		handleSubmit,
    		serviceTypes
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('formData' in $$props) $$invalidate(2, formData = $$props.formData);
    		if ('errors' in $$props) $$invalidate(3, errors = $$props.errors);
    		if ('isSubmitting' in $$props) $$invalidate(4, isSubmitting = $$props.isSubmitting);
    		if ('serviceTypes' in $$props) $$invalidate(5, serviceTypes = $$props.serviceTypes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*content, currentLang*/ 3) {
    			// Create service types with reactive changes on language toggle
    			$$invalidate(5, serviceTypes = [
    				{
    					value: 'maintenance',
    					label: content[currentLang].bookingForm.autoService.serviceOptions.maintenance
    				},
    				{
    					value: 'repair',
    					label: content[currentLang].bookingForm.autoService.serviceOptions.repair
    				},
    				{
    					value: 'diagnostic',
    					label: content[currentLang].bookingForm.autoService.serviceOptions.diagnostic
    				},
    				{
    					value: 'other',
    					label: content[currentLang].bookingForm.autoService.serviceOptions.other
    				}
    			]);
    		}
    	};

    	return [
    		content,
    		currentLang,
    		formData,
    		errors,
    		isSubmitting,
    		serviceTypes,
    		handleTimeSelected,
    		handleSubmit,
    		input_change_handler,
    		$$binding_groups,
    		input0_input_handler,
    		personalinfoform_formData_binding,
    		personalinfoform_formErrors_binding,
    		input1_input_handler,
    		input2_input_handler,
    		textarea_input_handler,
    		input3_change_handler
    	];
    }

    class AutoServiceForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$8, create_fragment$8, safe_not_equal, { content: 0, currentLang: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "AutoServiceForm",
    			options,
    			id: create_fragment$8.name
    		});
    	}

    	get content() {
    		throw new Error("<AutoServiceForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<AutoServiceForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<AutoServiceForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<AutoServiceForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/TireServiceForm.svelte generated by Svelte v3.59.2 */

    const { console: console_1$2 } = globals;
    const file$7 = "src/components/TireServiceForm.svelte";

    function get_each_context(ctx, list, i) {
    	const child_ctx = ctx.slice();
    	child_ctx[20] = list[i];
    	return child_ctx;
    }

    // (126:8) {#each serviceTypes as type}
    function create_each_block(ctx) {
    	let label;
    	let input;
    	let input_value_value;
    	let value_has_changed = false;
    	let t0;
    	let span;
    	let t1_value = /*type*/ ctx[20].label + "";
    	let t1;
    	let t2;
    	let binding_group;
    	let mounted;
    	let dispose;
    	binding_group = init_binding_group(/*$$binding_groups*/ ctx[9][0]);

    	const block = {
    		c: function create() {
    			label = element("label");
    			input = element("input");
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			attr_dev(input, "type", "radio");
    			attr_dev(input, "name", "serviceType");
    			input.__value = input_value_value = /*type*/ ctx[20].value;
    			input.value = input.__value;
    			attr_dev(input, "class", "svelte-xm56sc");
    			add_location(input, file$7, 127, 12, 4257);
    			add_location(span, file$7, 133, 12, 4432);
    			attr_dev(label, "class", "service-type-option svelte-xm56sc");
    			add_location(label, file$7, 126, 10, 4209);
    			binding_group.p(input);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, label, anchor);
    			append_dev(label, input);
    			input.checked = input.__value === /*formData*/ ctx[2].serviceType;
    			append_dev(label, t0);
    			append_dev(label, span);
    			append_dev(span, t1);
    			append_dev(label, t2);

    			if (!mounted) {
    				dispose = listen_dev(input, "change", /*input_change_handler*/ ctx[8]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*serviceTypes*/ 32 && input_value_value !== (input_value_value = /*type*/ ctx[20].value)) {
    				prop_dev(input, "__value", input_value_value);
    				input.value = input.__value;
    				value_has_changed = true;
    			}

    			if (value_has_changed || dirty & /*formData, serviceTypes*/ 36) {
    				input.checked = input.__value === /*formData*/ ctx[2].serviceType;
    			}

    			if (dirty & /*serviceTypes*/ 32 && t1_value !== (t1_value = /*type*/ ctx[20].label + "")) set_data_dev(t1, t1_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(label);
    			binding_group.r();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_each_block.name,
    		type: "each",
    		source: "(126:8) {#each serviceTypes as type}",
    		ctx
    	});

    	return block;
    }

    // (138:6) {#if errors.serviceType}
    function create_if_block_4$3(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].serviceType + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-xm56sc");
    			add_location(p, file$7, 138, 8, 4545);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].serviceType + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$3.name,
    		type: "if",
    		source: "(138:6) {#if errors.serviceType}",
    		ctx
    	});

    	return block;
    }

    // (156:8) {#if errors.date}
    function create_if_block_3$3(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].date + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-xm56sc");
    			add_location(p, file$7, 156, 10, 5146);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].date + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$3.name,
    		type: "if",
    		source: "(156:8) {#if errors.date}",
    		ctx
    	});

    	return block;
    }

    // (172:8) {#if errors.time}
    function create_if_block_2$3(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].time + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-xm56sc");
    			add_location(p, file$7, 172, 8, 5618);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].time + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$3.name,
    		type: "if",
    		source: "(172:8) {#if errors.time}",
    		ctx
    	});

    	return block;
    }

    // (242:8) {#if errors.acceptPrivacy}
    function create_if_block_1$4(ctx) {
    	let p;
    	let t_value = /*errors*/ ctx[3].acceptPrivacy + "";
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(t_value);
    			attr_dev(p, "class", "error-message svelte-xm56sc");
    			add_location(p, file$7, 242, 10, 8138);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*errors*/ 8 && t_value !== (t_value = /*errors*/ ctx[3].acceptPrivacy + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$4.name,
    		type: "if",
    		source: "(242:8) {#if errors.acceptPrivacy}",
    		ctx
    	});

    	return block;
    }

    // (253:8) {:else}
    function create_else_block$4(ctx) {
    	let t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 3 && t_value !== (t_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.submit + "")) set_data_dev(t, t_value);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$4.name,
    		type: "else",
    		source: "(253:8) {:else}",
    		ctx
    	});

    	return block;
    }

    // (250:8) {#if isSubmitting}
    function create_if_block$6(ctx) {
    	let loadingspinner;
    	let t0;
    	let span;

    	let t1_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Feldolgozás...'
    	: 'Processing...') + "";

    	let t1;
    	let current;

    	loadingspinner = new LoadingSpinner({
    			props: { size: "1rem", color: "white" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(loadingspinner.$$.fragment);
    			t0 = space();
    			span = element("span");
    			t1 = text(t1_value);
    			add_location(span, file$7, 251, 10, 8429);
    		},
    		m: function mount(target, anchor) {
    			mount_component(loadingspinner, target, anchor);
    			insert_dev(target, t0, anchor);
    			insert_dev(target, span, anchor);
    			append_dev(span, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*currentLang*/ 2) && t1_value !== (t1_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Feldolgozás...'
    			: 'Processing...') + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadingspinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadingspinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(loadingspinner, detaching);
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(span);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$6.name,
    		type: "if",
    		source: "(250:8) {#if isSubmitting}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$7(ctx) {
    	let form;
    	let h2;

    	let t0_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'GUMISZERVIZ IDŐPONTFOGLALÁS'
    	: 'TIRE SERVICE BOOKING') + "";

    	let t0;
    	let t1;
    	let div1;
    	let h30;
    	let t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.serviceType + "";
    	let t2;
    	let t3;
    	let div0;
    	let t4;
    	let t5;
    	let div3;
    	let h31;
    	let t6_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.dateTime || 'Select Date & Time') + "";
    	let t6;
    	let t7;
    	let div2;
    	let label0;
    	let t8_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || 'Date') + "";
    	let t8;
    	let t9;
    	let input0;
    	let t10;
    	let t11;
    	let div4;
    	let timeslotselector;
    	let t12;
    	let t13;
    	let div5;
    	let personalinfoform;
    	let updating_formData;
    	let updating_formErrors;
    	let t14;
    	let div9;
    	let h32;
    	let t15_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carDetails || 'Car Details') + "";
    	let t15;
    	let t16;
    	let div6;
    	let label1;
    	let t17_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carModel || 'Car Model') + "";
    	let t17;
    	let t18;
    	let input1;
    	let input1_placeholder_value;
    	let t19;
    	let div7;
    	let label2;
    	let t20_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.licensePlate || 'License Plate') + "";
    	let t20;
    	let t21;
    	let input2;
    	let input2_placeholder_value;
    	let t22;
    	let div8;
    	let label3;
    	let t23_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.tireCount || 'Number of Tires') + "";
    	let t23;
    	let t24;
    	let select;
    	let option0;
    	let option1;
    	let t27;
    	let div11;
    	let h33;
    	let t28_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.notes || 'Additional Notes') + "";
    	let t28;
    	let t29;
    	let div10;
    	let textarea;
    	let textarea_placeholder_value;
    	let t30;
    	let div13;
    	let div12;
    	let label4;
    	let input3;
    	let t31;
    	let span;

    	let t32_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Elfogadom az '
    	: 'I accept the ') + "";

    	let t32;
    	let t33;
    	let a;

    	let t34_value = (/*currentLang*/ ctx[1] === 'hu'
    	? 'Adatvédelmi irányelveket'
    	: 'Privacy Policy') + "";

    	let t34;
    	let t35;
    	let t36;
    	let div14;
    	let button;
    	let current_block_type_index;
    	let if_block4;
    	let current;
    	let mounted;
    	let dispose;
    	let each_value = /*serviceTypes*/ ctx[5];
    	validate_each_argument(each_value);
    	let each_blocks = [];

    	for (let i = 0; i < each_value.length; i += 1) {
    		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
    	}

    	let if_block0 = /*errors*/ ctx[3].serviceType && create_if_block_4$3(ctx);
    	let if_block1 = /*errors*/ ctx[3].date && create_if_block_3$3(ctx);

    	timeslotselector = new TimeSlotSelector({
    			props: {
    				selectedTime: /*formData*/ ctx[2].time,
    				content: /*content*/ ctx[0],
    				currentLang: /*currentLang*/ ctx[1],
    				formType: "tireService",
    				date: /*formData*/ ctx[2].date
    			},
    			$$inline: true
    		});

    	timeslotselector.$on("timeSelected", /*handleTimeSelected*/ ctx[6]);
    	let if_block2 = /*errors*/ ctx[3].time && create_if_block_2$3(ctx);

    	function personalinfoform_formData_binding(value) {
    		/*personalinfoform_formData_binding*/ ctx[11](value);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		/*personalinfoform_formErrors_binding*/ ctx[12](value);
    	}

    	let personalinfoform_props = {
    		content: /*content*/ ctx[0],
    		currentLang: /*currentLang*/ ctx[1],
    		isSubmitting: /*isSubmitting*/ ctx[4]
    	};

    	if (/*formData*/ ctx[2] !== void 0) {
    		personalinfoform_props.formData = /*formData*/ ctx[2];
    	}

    	if (/*errors*/ ctx[3] !== void 0) {
    		personalinfoform_props.formErrors = /*errors*/ ctx[3];
    	}

    	personalinfoform = new PersonalInfoForm({
    			props: personalinfoform_props,
    			$$inline: true
    		});

    	binding_callbacks.push(() => bind(personalinfoform, 'formData', personalinfoform_formData_binding));
    	binding_callbacks.push(() => bind(personalinfoform, 'formErrors', personalinfoform_formErrors_binding));
    	let if_block3 = /*errors*/ ctx[3].acceptPrivacy && create_if_block_1$4(ctx);
    	const if_block_creators = [create_if_block$6, create_else_block$4];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*isSubmitting*/ ctx[4]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block4 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			form = element("form");
    			h2 = element("h2");
    			t0 = text(t0_value);
    			t1 = space();
    			div1 = element("div");
    			h30 = element("h3");
    			t2 = text(t2_value);
    			t3 = space();
    			div0 = element("div");

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				each_blocks[i].c();
    			}

    			t4 = space();
    			if (if_block0) if_block0.c();
    			t5 = space();
    			div3 = element("div");
    			h31 = element("h3");
    			t6 = text(t6_value);
    			t7 = space();
    			div2 = element("div");
    			label0 = element("label");
    			t8 = text(t8_value);
    			t9 = space();
    			input0 = element("input");
    			t10 = space();
    			if (if_block1) if_block1.c();
    			t11 = space();
    			div4 = element("div");
    			create_component(timeslotselector.$$.fragment);
    			t12 = space();
    			if (if_block2) if_block2.c();
    			t13 = space();
    			div5 = element("div");
    			create_component(personalinfoform.$$.fragment);
    			t14 = space();
    			div9 = element("div");
    			h32 = element("h3");
    			t15 = text(t15_value);
    			t16 = space();
    			div6 = element("div");
    			label1 = element("label");
    			t17 = text(t17_value);
    			t18 = space();
    			input1 = element("input");
    			t19 = space();
    			div7 = element("div");
    			label2 = element("label");
    			t20 = text(t20_value);
    			t21 = space();
    			input2 = element("input");
    			t22 = space();
    			div8 = element("div");
    			label3 = element("label");
    			t23 = text(t23_value);
    			t24 = space();
    			select = element("select");
    			option0 = element("option");
    			option0.textContent = "2";
    			option1 = element("option");
    			option1.textContent = "4";
    			t27 = space();
    			div11 = element("div");
    			h33 = element("h3");
    			t28 = text(t28_value);
    			t29 = space();
    			div10 = element("div");
    			textarea = element("textarea");
    			t30 = space();
    			div13 = element("div");
    			div12 = element("div");
    			label4 = element("label");
    			input3 = element("input");
    			t31 = space();
    			span = element("span");
    			t32 = text(t32_value);
    			t33 = space();
    			a = element("a");
    			t34 = text(t34_value);
    			t35 = space();
    			if (if_block3) if_block3.c();
    			t36 = space();
    			div14 = element("div");
    			button = element("button");
    			if_block4.c();
    			attr_dev(h2, "class", "form-title svelte-xm56sc");
    			add_location(h2, file$7, 121, 4, 3915);
    			attr_dev(h30, "class", "svelte-xm56sc");
    			add_location(h30, file$7, 123, 6, 4060);
    			attr_dev(div0, "class", "service-types svelte-xm56sc");
    			add_location(div0, file$7, 124, 6, 4134);
    			attr_dev(div1, "class", "form-section svelte-xm56sc");
    			add_location(div1, file$7, 122, 4, 4027);
    			attr_dev(h31, "class", "svelte-xm56sc");
    			add_location(h31, file$7, 143, 6, 4658);
    			attr_dev(label0, "for", "booking-date");
    			add_location(label0, file$7, 145, 8, 4794);
    			attr_dev(input0, "id", "booking-date");
    			attr_dev(input0, "type", "date");
    			attr_dev(input0, "min", new Date().toISOString().split('T')[0]);
    			attr_dev(input0, "class", "svelte-xm56sc");
    			toggle_class(input0, "error", /*errors*/ ctx[3].date);
    			add_location(input0, file$7, 148, 8, 4914);
    			attr_dev(div2, "class", "date-time-selector svelte-xm56sc");
    			add_location(div2, file$7, 144, 6, 4753);
    			attr_dev(div3, "class", "form-section svelte-xm56sc");
    			add_location(div3, file$7, 142, 4, 4625);
    			attr_dev(div4, "class", "time-slot-container svelte-xm56sc");
    			toggle_class(div4, "error", /*errors*/ ctx[3].time);
    			add_location(div4, file$7, 162, 4, 5305);
    			attr_dev(div5, "class", "form-section svelte-xm56sc");
    			add_location(div5, file$7, 176, 4, 5693);
    			attr_dev(h32, "class", "svelte-xm56sc");
    			add_location(h32, file$7, 187, 6, 5954);
    			attr_dev(label1, "for", "carModel");
    			attr_dev(label1, "class", "svelte-xm56sc");
    			add_location(label1, file$7, 189, 8, 6077);
    			attr_dev(input1, "type", "text");
    			attr_dev(input1, "id", "carModel");
    			attr_dev(input1, "placeholder", input1_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carModelPlaceholder || 'e.g. Toyota Corolla 2018');
    			attr_dev(input1, "class", "svelte-xm56sc");
    			add_location(input1, file$7, 190, 8, 6186);
    			attr_dev(div6, "class", "form-group svelte-xm56sc");
    			add_location(div6, file$7, 188, 6, 6044);
    			attr_dev(label2, "for", "licensePlate");
    			attr_dev(label2, "class", "svelte-xm56sc");
    			add_location(label2, file$7, 198, 8, 6462);
    			attr_dev(input2, "type", "text");
    			attr_dev(input2, "id", "licensePlate");
    			attr_dev(input2, "placeholder", input2_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.licensePlatePlaceholder || 'e.g. ABC-123');
    			attr_dev(input2, "class", "svelte-xm56sc");
    			add_location(input2, file$7, 199, 8, 6583);
    			attr_dev(div7, "class", "form-group svelte-xm56sc");
    			add_location(div7, file$7, 197, 6, 6429);
    			attr_dev(label3, "for", "tireCount");
    			attr_dev(label3, "class", "svelte-xm56sc");
    			add_location(label3, file$7, 207, 8, 6859);
    			option0.__value = "2";
    			option0.value = option0.__value;
    			add_location(option0, file$7, 209, 10, 7042);
    			option1.__value = "4";
    			option1.value = option1.__value;
    			add_location(option1, file$7, 210, 10, 7081);
    			attr_dev(select, "id", "tireCount");
    			attr_dev(select, "class", "svelte-xm56sc");
    			if (/*formData*/ ctx[2].tireCount === void 0) add_render_callback(() => /*select_change_handler*/ ctx[15].call(select));
    			add_location(select, file$7, 208, 8, 6976);
    			attr_dev(div8, "class", "form-group svelte-xm56sc");
    			add_location(div8, file$7, 206, 6, 6826);
    			attr_dev(div9, "class", "form-section svelte-xm56sc");
    			add_location(div9, file$7, 186, 4, 5921);
    			attr_dev(h33, "class", "svelte-xm56sc");
    			add_location(h33, file$7, 216, 6, 7192);
    			attr_dev(textarea, "placeholder", textarea_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.notesPlaceholder || 'Any special requests or additional information');
    			attr_dev(textarea, "rows", "4");
    			attr_dev(textarea, "class", "svelte-xm56sc");
    			add_location(textarea, file$7, 218, 8, 7315);
    			attr_dev(div10, "class", "form-group svelte-xm56sc");
    			add_location(div10, file$7, 217, 6, 7282);
    			attr_dev(div11, "class", "form-section svelte-xm56sc");
    			add_location(div11, file$7, 215, 4, 7159);
    			attr_dev(input3, "type", "checkbox");
    			input3.required = true;
    			attr_dev(input3, "class", "svelte-xm56sc");
    			add_location(input3, file$7, 229, 10, 7696);
    			attr_dev(a, "href", "/privacy");
    			attr_dev(a, "class", "privacy-link svelte-xm56sc");
    			add_location(a, file$7, 236, 12, 7915);
    			add_location(span, file$7, 234, 10, 7825);
    			attr_dev(label4, "class", "checkbox-label svelte-xm56sc");
    			add_location(label4, file$7, 228, 8, 7655);
    			attr_dev(div12, "class", "form-group privacy-checkbox svelte-xm56sc");
    			add_location(div12, file$7, 227, 6, 7605);
    			attr_dev(div13, "class", "form-section svelte-xm56sc");
    			add_location(div13, file$7, 226, 4, 7572);
    			attr_dev(button, "type", "submit");
    			attr_dev(button, "class", "submit-button svelte-xm56sc");
    			button.disabled = /*isSubmitting*/ ctx[4];
    			add_location(button, file$7, 248, 6, 8268);
    			attr_dev(div14, "class", "form-actions svelte-xm56sc");
    			add_location(div14, file$7, 247, 4, 8235);
    			attr_dev(form, "class", "booking-form svelte-xm56sc");
    			add_location(form, file$7, 120, 2, 3843);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, form, anchor);
    			append_dev(form, h2);
    			append_dev(h2, t0);
    			append_dev(form, t1);
    			append_dev(form, div1);
    			append_dev(div1, h30);
    			append_dev(h30, t2);
    			append_dev(div1, t3);
    			append_dev(div1, div0);

    			for (let i = 0; i < each_blocks.length; i += 1) {
    				if (each_blocks[i]) {
    					each_blocks[i].m(div0, null);
    				}
    			}

    			append_dev(div1, t4);
    			if (if_block0) if_block0.m(div1, null);
    			append_dev(form, t5);
    			append_dev(form, div3);
    			append_dev(div3, h31);
    			append_dev(h31, t6);
    			append_dev(div3, t7);
    			append_dev(div3, div2);
    			append_dev(div2, label0);
    			append_dev(label0, t8);
    			append_dev(div2, t9);
    			append_dev(div2, input0);
    			set_input_value(input0, /*formData*/ ctx[2].date);
    			append_dev(div2, t10);
    			if (if_block1) if_block1.m(div2, null);
    			append_dev(form, t11);
    			append_dev(form, div4);
    			mount_component(timeslotselector, div4, null);
    			append_dev(div4, t12);
    			if (if_block2) if_block2.m(div4, null);
    			append_dev(form, t13);
    			append_dev(form, div5);
    			mount_component(personalinfoform, div5, null);
    			append_dev(form, t14);
    			append_dev(form, div9);
    			append_dev(div9, h32);
    			append_dev(h32, t15);
    			append_dev(div9, t16);
    			append_dev(div9, div6);
    			append_dev(div6, label1);
    			append_dev(label1, t17);
    			append_dev(div6, t18);
    			append_dev(div6, input1);
    			set_input_value(input1, /*formData*/ ctx[2].carModel);
    			append_dev(div9, t19);
    			append_dev(div9, div7);
    			append_dev(div7, label2);
    			append_dev(label2, t20);
    			append_dev(div7, t21);
    			append_dev(div7, input2);
    			set_input_value(input2, /*formData*/ ctx[2].licensePlate);
    			append_dev(div9, t22);
    			append_dev(div9, div8);
    			append_dev(div8, label3);
    			append_dev(label3, t23);
    			append_dev(div8, t24);
    			append_dev(div8, select);
    			append_dev(select, option0);
    			append_dev(select, option1);
    			select_option(select, /*formData*/ ctx[2].tireCount, true);
    			append_dev(form, t27);
    			append_dev(form, div11);
    			append_dev(div11, h33);
    			append_dev(h33, t28);
    			append_dev(div11, t29);
    			append_dev(div11, div10);
    			append_dev(div10, textarea);
    			set_input_value(textarea, /*formData*/ ctx[2].notes);
    			append_dev(form, t30);
    			append_dev(form, div13);
    			append_dev(div13, div12);
    			append_dev(div12, label4);
    			append_dev(label4, input3);
    			input3.checked = /*formData*/ ctx[2].acceptPrivacy;
    			append_dev(label4, t31);
    			append_dev(label4, span);
    			append_dev(span, t32);
    			append_dev(span, t33);
    			append_dev(span, a);
    			append_dev(a, t34);
    			append_dev(div12, t35);
    			if (if_block3) if_block3.m(div12, null);
    			append_dev(form, t36);
    			append_dev(form, div14);
    			append_dev(div14, button);
    			if_blocks[current_block_type_index].m(button, null);
    			current = true;

    			if (!mounted) {
    				dispose = [
    					listen_dev(input0, "input", /*input0_input_handler*/ ctx[10]),
    					listen_dev(input1, "input", /*input1_input_handler*/ ctx[13]),
    					listen_dev(input2, "input", /*input2_input_handler*/ ctx[14]),
    					listen_dev(select, "change", /*select_change_handler*/ ctx[15]),
    					listen_dev(textarea, "input", /*textarea_input_handler*/ ctx[16]),
    					listen_dev(input3, "change", /*input3_change_handler*/ ctx[17]),
    					listen_dev(form, "submit", prevent_default(/*handleSubmit*/ ctx[7]), false, true, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*currentLang*/ 2) && t0_value !== (t0_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'GUMISZERVIZ IDŐPONTFOGLALÁS'
    			: 'TIRE SERVICE BOOKING') + "")) set_data_dev(t0, t0_value);

    			if ((!current || dirty & /*content, currentLang*/ 3) && t2_value !== (t2_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.serviceType + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*serviceTypes, formData*/ 36) {
    				each_value = /*serviceTypes*/ ctx[5];
    				validate_each_argument(each_value);
    				let i;

    				for (i = 0; i < each_value.length; i += 1) {
    					const child_ctx = get_each_context(ctx, each_value, i);

    					if (each_blocks[i]) {
    						each_blocks[i].p(child_ctx, dirty);
    					} else {
    						each_blocks[i] = create_each_block(child_ctx);
    						each_blocks[i].c();
    						each_blocks[i].m(div0, null);
    					}
    				}

    				for (; i < each_blocks.length; i += 1) {
    					each_blocks[i].d(1);
    				}

    				each_blocks.length = each_value.length;
    			}

    			if (/*errors*/ ctx[3].serviceType) {
    				if (if_block0) {
    					if_block0.p(ctx, dirty);
    				} else {
    					if_block0 = create_if_block_4$3(ctx);
    					if_block0.c();
    					if_block0.m(div1, null);
    				}
    			} else if (if_block0) {
    				if_block0.d(1);
    				if_block0 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t6_value !== (t6_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.dateTime || 'Select Date & Time') + "")) set_data_dev(t6, t6_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t8_value !== (t8_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.carWash.date || 'Date') + "")) set_data_dev(t8, t8_value);

    			if (dirty & /*formData*/ 4) {
    				set_input_value(input0, /*formData*/ ctx[2].date);
    			}

    			if (!current || dirty & /*errors*/ 8) {
    				toggle_class(input0, "error", /*errors*/ ctx[3].date);
    			}

    			if (/*errors*/ ctx[3].date) {
    				if (if_block1) {
    					if_block1.p(ctx, dirty);
    				} else {
    					if_block1 = create_if_block_3$3(ctx);
    					if_block1.c();
    					if_block1.m(div2, null);
    				}
    			} else if (if_block1) {
    				if_block1.d(1);
    				if_block1 = null;
    			}

    			const timeslotselector_changes = {};
    			if (dirty & /*formData*/ 4) timeslotselector_changes.selectedTime = /*formData*/ ctx[2].time;
    			if (dirty & /*content*/ 1) timeslotselector_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) timeslotselector_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*formData*/ 4) timeslotselector_changes.date = /*formData*/ ctx[2].date;
    			timeslotselector.$set(timeslotselector_changes);

    			if (/*errors*/ ctx[3].time) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_2$3(ctx);
    					if_block2.c();
    					if_block2.m(div4, null);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (!current || dirty & /*errors*/ 8) {
    				toggle_class(div4, "error", /*errors*/ ctx[3].time);
    			}

    			const personalinfoform_changes = {};
    			if (dirty & /*content*/ 1) personalinfoform_changes.content = /*content*/ ctx[0];
    			if (dirty & /*currentLang*/ 2) personalinfoform_changes.currentLang = /*currentLang*/ ctx[1];
    			if (dirty & /*isSubmitting*/ 16) personalinfoform_changes.isSubmitting = /*isSubmitting*/ ctx[4];

    			if (!updating_formData && dirty & /*formData*/ 4) {
    				updating_formData = true;
    				personalinfoform_changes.formData = /*formData*/ ctx[2];
    				add_flush_callback(() => updating_formData = false);
    			}

    			if (!updating_formErrors && dirty & /*errors*/ 8) {
    				updating_formErrors = true;
    				personalinfoform_changes.formErrors = /*errors*/ ctx[3];
    				add_flush_callback(() => updating_formErrors = false);
    			}

    			personalinfoform.$set(personalinfoform_changes);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t15_value !== (t15_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carDetails || 'Car Details') + "")) set_data_dev(t15, t15_value);
    			if ((!current || dirty & /*content, currentLang*/ 3) && t17_value !== (t17_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carModel || 'Car Model') + "")) set_data_dev(t17, t17_value);

    			if (!current || dirty & /*content, currentLang*/ 3 && input1_placeholder_value !== (input1_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.carModelPlaceholder || 'e.g. Toyota Corolla 2018')) {
    				attr_dev(input1, "placeholder", input1_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && input1.value !== /*formData*/ ctx[2].carModel) {
    				set_input_value(input1, /*formData*/ ctx[2].carModel);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t20_value !== (t20_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.licensePlate || 'License Plate') + "")) set_data_dev(t20, t20_value);

    			if (!current || dirty & /*content, currentLang*/ 3 && input2_placeholder_value !== (input2_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.licensePlatePlaceholder || 'e.g. ABC-123')) {
    				attr_dev(input2, "placeholder", input2_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4 && input2.value !== /*formData*/ ctx[2].licensePlate) {
    				set_input_value(input2, /*formData*/ ctx[2].licensePlate);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t23_value !== (t23_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.tireCount || 'Number of Tires') + "")) set_data_dev(t23, t23_value);

    			if (dirty & /*formData*/ 4) {
    				select_option(select, /*formData*/ ctx[2].tireCount);
    			}

    			if ((!current || dirty & /*content, currentLang*/ 3) && t28_value !== (t28_value = (/*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.notes || 'Additional Notes') + "")) set_data_dev(t28, t28_value);

    			if (!current || dirty & /*content, currentLang*/ 3 && textarea_placeholder_value !== (textarea_placeholder_value = /*content*/ ctx[0][/*currentLang*/ ctx[1]].bookingForm.tireService.notesPlaceholder || 'Any special requests or additional information')) {
    				attr_dev(textarea, "placeholder", textarea_placeholder_value);
    			}

    			if (dirty & /*formData*/ 4) {
    				set_input_value(textarea, /*formData*/ ctx[2].notes);
    			}

    			if (dirty & /*formData*/ 4) {
    				input3.checked = /*formData*/ ctx[2].acceptPrivacy;
    			}

    			if ((!current || dirty & /*currentLang*/ 2) && t32_value !== (t32_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Elfogadom az '
    			: 'I accept the ') + "")) set_data_dev(t32, t32_value);

    			if ((!current || dirty & /*currentLang*/ 2) && t34_value !== (t34_value = (/*currentLang*/ ctx[1] === 'hu'
    			? 'Adatvédelmi irányelveket'
    			: 'Privacy Policy') + "")) set_data_dev(t34, t34_value);

    			if (/*errors*/ ctx[3].acceptPrivacy) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_1$4(ctx);
    					if_block3.c();
    					if_block3.m(div12, null);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block4 = if_blocks[current_block_type_index];

    				if (!if_block4) {
    					if_block4 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block4.c();
    				} else {
    					if_block4.p(ctx, dirty);
    				}

    				transition_in(if_block4, 1);
    				if_block4.m(button, null);
    			}

    			if (!current || dirty & /*isSubmitting*/ 16) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[4]);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(timeslotselector.$$.fragment, local);
    			transition_in(personalinfoform.$$.fragment, local);
    			transition_in(if_block4);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(timeslotselector.$$.fragment, local);
    			transition_out(personalinfoform.$$.fragment, local);
    			transition_out(if_block4);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(form);
    			destroy_each(each_blocks, detaching);
    			if (if_block0) if_block0.d();
    			if (if_block1) if_block1.d();
    			destroy_component(timeslotselector);
    			if (if_block2) if_block2.d();
    			destroy_component(personalinfoform);
    			if (if_block3) if_block3.d();
    			if_blocks[current_block_type_index].d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$7.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$7($$self, $$props, $$invalidate) {
    	let serviceTypes;
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('TireServiceForm', slots, []);
    	const dispatch = createEventDispatcher();
    	let { content } = $$props;
    	let { currentLang } = $$props;

    	let formData = {
    		serviceType: '',
    		date: new Date().toISOString().split('T')[0],
    		time: '',
    		firstName: '',
    		lastName: '',
    		email: '',
    		phone: '',
    		carModel: '',
    		licensePlate: '',
    		tireCount: 4,
    		notes: '',
    		acceptPrivacy: false
    	};

    	let errors = {};
    	let isSubmitting = false;

    	function validateForm() {
    		$$invalidate(3, errors = {});
    		let isValid = true;

    		if (!formData.serviceType) {
    			$$invalidate(
    				3,
    				errors.serviceType = currentLang === 'hu'
    				? 'Kérjük válasszon szolgáltatást'
    				: 'Please select a service type',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.date) {
    			$$invalidate(
    				3,
    				errors.date = currentLang === 'hu'
    				? 'Kérjük válasszon dátumot'
    				: 'Please select a date',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.time) {
    			$$invalidate(
    				3,
    				errors.time = currentLang === 'hu'
    				? 'Kérjük válasszon időpontot'
    				: 'Please select a time',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.firstName) {
    			$$invalidate(
    				3,
    				errors.firstName = currentLang === 'hu'
    				? 'Kérjük adja meg a keresztnevét'
    				: 'Please enter your first name',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.lastName) {
    			$$invalidate(
    				3,
    				errors.lastName = currentLang === 'hu'
    				? 'Kérjük adja meg a vezetéknevét'
    				: 'Please enter your last name',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.phone) {
    			$$invalidate(
    				3,
    				errors.phone = currentLang === 'hu'
    				? 'Kérjük adja meg telefonszámát'
    				: 'Please enter your phone number',
    				errors
    			);

    			isValid = false;
    		}

    		if (!formData.email) {
    			$$invalidate(
    				3,
    				errors.email = currentLang === 'hu'
    				? 'Kérjük adja meg email címét'
    				: 'Please enter your email address',
    				errors
    			);

    			isValid = false;
    		} else if (!(/^[^\s@]+@[^\s@]+\.[^\s@]+$/).test(formData.email)) {
    			$$invalidate(
    				3,
    				errors.email = currentLang === 'hu'
    				? 'Érvénytelen email cím'
    				: 'Invalid email address',
    				errors
    			);

    			isValid = false;
    		}

    		return isValid;
    	}

    	function handleTimeSelected(event) {
    		$$invalidate(2, formData.time = event.detail, formData);
    		$$invalidate(3, errors.time = '', errors); // Clear error when time is selected
    	}

    	async function handleSubmit() {
    		if (!validateForm()) return;
    		$$invalidate(4, isSubmitting = true);

    		try {
    			const bookingData = {
    				service: 'tireService',
    				serviceType: formData.serviceType,
    				date: formData.date,
    				time: formData.time,
    				name: `${formData.lastName} ${formData.firstName}`,
    				contact: {
    					email: formData.email,
    					phone: formData.phone
    				},
    				carModel: formData.carModel,
    				licensePlate: formData.licensePlate,
    				tireCount: formData.tireCount,
    				notes: formData.notes,
    				// Add admin email for backend
    				adminEmail: 'jarsunkaev@gmail.com'
    			};

    			dispatch('bookingComplete', bookingData);
    		} catch(error) {
    			console.error('Error submitting form:', error);
    		} finally {
    			$$invalidate(4, isSubmitting = false);
    		}
    	}

    	$$self.$$.on_mount.push(function () {
    		if (content === undefined && !('content' in $$props || $$self.$$.bound[$$self.$$.props['content']])) {
    			console_1$2.warn("<TireServiceForm> was created without expected prop 'content'");
    		}

    		if (currentLang === undefined && !('currentLang' in $$props || $$self.$$.bound[$$self.$$.props['currentLang']])) {
    			console_1$2.warn("<TireServiceForm> was created without expected prop 'currentLang'");
    		}
    	});

    	const writable_props = ['content', 'currentLang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$2.warn(`<TireServiceForm> was created with unknown prop '${key}'`);
    	});

    	const $$binding_groups = [[]];

    	function input_change_handler() {
    		formData.serviceType = this.__value;
    		$$invalidate(2, formData);
    	}

    	function input0_input_handler() {
    		formData.date = this.value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formData_binding(value) {
    		formData = value;
    		$$invalidate(2, formData);
    	}

    	function personalinfoform_formErrors_binding(value) {
    		errors = value;
    		$$invalidate(3, errors);
    	}

    	function input1_input_handler() {
    		formData.carModel = this.value;
    		$$invalidate(2, formData);
    	}

    	function input2_input_handler() {
    		formData.licensePlate = this.value;
    		$$invalidate(2, formData);
    	}

    	function select_change_handler() {
    		formData.tireCount = select_value(this);
    		$$invalidate(2, formData);
    	}

    	function textarea_input_handler() {
    		formData.notes = this.value;
    		$$invalidate(2, formData);
    	}

    	function input3_change_handler() {
    		formData.acceptPrivacy = this.checked;
    		$$invalidate(2, formData);
    	}

    	$$self.$$set = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    	};

    	$$self.$capture_state = () => ({
    		createEventDispatcher,
    		PersonalInfoForm,
    		TimeSlotSelector,
    		LoadingSpinner,
    		dispatch,
    		content,
    		currentLang,
    		formData,
    		errors,
    		isSubmitting,
    		validateForm,
    		handleTimeSelected,
    		handleSubmit,
    		serviceTypes
    	});

    	$$self.$inject_state = $$props => {
    		if ('content' in $$props) $$invalidate(0, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(1, currentLang = $$props.currentLang);
    		if ('formData' in $$props) $$invalidate(2, formData = $$props.formData);
    		if ('errors' in $$props) $$invalidate(3, errors = $$props.errors);
    		if ('isSubmitting' in $$props) $$invalidate(4, isSubmitting = $$props.isSubmitting);
    		if ('serviceTypes' in $$props) $$invalidate(5, serviceTypes = $$props.serviceTypes);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	$$self.$$.update = () => {
    		if ($$self.$$.dirty & /*content, currentLang*/ 3) {
    			// Create service types with reactive changes on language toggle
    			$$invalidate(5, serviceTypes = [
    				{
    					value: 'change',
    					label: content[currentLang].bookingForm.tireService.serviceOptions.change
    				},
    				{
    					value: 'repair',
    					label: content[currentLang].bookingForm.tireService.serviceOptions.repair
    				},
    				{
    					value: 'balancing',
    					label: content[currentLang].bookingForm.tireService.serviceOptions.balancing
    				},
    				{
    					value: 'storage',
    					label: content[currentLang].bookingForm.tireService.serviceOptions.storage
    				}
    			]);
    		}
    	};

    	return [
    		content,
    		currentLang,
    		formData,
    		errors,
    		isSubmitting,
    		serviceTypes,
    		handleTimeSelected,
    		handleSubmit,
    		input_change_handler,
    		$$binding_groups,
    		input0_input_handler,
    		personalinfoform_formData_binding,
    		personalinfoform_formErrors_binding,
    		input1_input_handler,
    		input2_input_handler,
    		select_change_handler,
    		textarea_input_handler,
    		input3_change_handler
    	];
    }

    class TireServiceForm extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$7, create_fragment$7, safe_not_equal, { content: 0, currentLang: 1 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "TireServiceForm",
    			options,
    			id: create_fragment$7.name
    		});
    	}

    	get content() {
    		throw new Error("<TireServiceForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<TireServiceForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<TireServiceForm>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<TireServiceForm>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/BookingConfirmation.svelte generated by Svelte v3.59.2 */
    const file$6 = "src/components/BookingConfirmation.svelte";

    // (49:65) 
    function create_if_block_22(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.tireService.title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.tireService.title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_22.name,
    		type: "if",
    		source: "(49:65) ",
    		ctx
    	});

    	return block;
    }

    // (47:65) 
    function create_if_block_21(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.autoService.title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.autoService.title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_21.name,
    		type: "if",
    		source: "(47:65) ",
    		ctx
    	});

    	return block;
    }

    // (45:61) 
    function create_if_block_20(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.carWash.title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.carWash.title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_20.name,
    		type: "if",
    		source: "(45:61) ",
    		ctx
    	});

    	return block;
    }

    // (43:14) {#if bookingDetails.service === 'airportParking'}
    function create_if_block_19(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.airportParking.title + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].services.airportParking.title + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_19.name,
    		type: "if",
    		source: "(43:14) {#if bookingDetails.service === 'airportParking'}",
    		ctx
    	});

    	return block;
    }

    // (61:14) {:else}
    function create_else_block_2(ctx) {
    	let t_value = /*bookingDetails*/ ctx[0].date + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*bookingDetails*/ 1 && t_value !== (t_value = /*bookingDetails*/ ctx[0].date + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_2.name,
    		type: "else",
    		source: "(61:14) {:else}",
    		ctx
    	});

    	return block;
    }

    // (58:14) {#if bookingDetails.service === 'airportParking'}
    function create_if_block_18(ctx) {
    	let t0_value = (/*currentLang*/ ctx[2] === 'hu' ? 'Érkezés' : 'Arrival') + "";
    	let t0;
    	let t1;
    	let t2_value = /*bookingDetails*/ ctx[0].date.split(' - ')[0] + "";
    	let t2;
    	let br;
    	let t3;

    	let t4_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Távozás'
    	: 'Departure') + "";

    	let t4;
    	let t5;
    	let t6_value = /*bookingDetails*/ ctx[0].date.split(' - ')[1] + "";
    	let t6;

    	const block = {
    		c: function create() {
    			t0 = text(t0_value);
    			t1 = text(": ");
    			t2 = text(t2_value);
    			br = element("br");
    			t3 = space();
    			t4 = text(t4_value);
    			t5 = text(": ");
    			t6 = text(t6_value);
    			add_location(br, file$6, 58, 101, 2570);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, t2, anchor);
    			insert_dev(target, br, anchor);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, t6, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t0_value !== (t0_value = (/*currentLang*/ ctx[2] === 'hu' ? 'Érkezés' : 'Arrival') + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t2_value !== (t2_value = /*bookingDetails*/ ctx[0].date.split(' - ')[0] + "")) set_data_dev(t2, t2_value);

    			if (dirty & /*currentLang*/ 4 && t4_value !== (t4_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Távozás'
    			: 'Departure') + "")) set_data_dev(t4, t4_value);

    			if (dirty & /*bookingDetails*/ 1 && t6_value !== (t6_value = /*bookingDetails*/ ctx[0].date.split(' - ')[1] + "")) set_data_dev(t6, t6_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(t2);
    			if (detaching) detach_dev(br);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(t6);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_18.name,
    		type: "if",
    		source: "(58:14) {#if bookingDetails.service === 'airportParking'}",
    		ctx
    	});

    	return block;
    }

    // (67:10) {#if bookingDetails.time}
    function create_if_block_17(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.time + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*bookingDetails*/ ctx[0].time + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 68, 14, 2885);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 69, 14, 2975);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 67, 12, 2845);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.time + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = /*bookingDetails*/ ctx[0].time + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_17.name,
    		type: "if",
    		source: "(67:10) {#if bookingDetails.time}",
    		ctx
    	});

    	return block;
    }

    // (74:10) {#if bookingDetails.serviceType}
    function create_if_block_8$1(ctx) {
    	let div;
    	let span0;

    	let t0_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Szolgáltatás típusa'
    	: 'Service type') + "";

    	let t0;
    	let t1;
    	let t2;
    	let span1;

    	function select_block_type_2(ctx, dirty) {
    		if (/*bookingDetails*/ ctx[0].service === 'autoService') return create_if_block_9;
    		if (/*bookingDetails*/ ctx[0].service === 'tireService') return create_if_block_13;
    	}

    	let current_block_type = select_block_type_2(ctx);
    	let if_block = current_block_type && current_block_type(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			if (if_block) if_block.c();
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 75, 14, 3162);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 76, 14, 3275);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 74, 12, 3122);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			if (if_block) if_block.m(span1, null);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t0_value !== (t0_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Szolgáltatás típusa'
    			: 'Service type') + "")) set_data_dev(t0, t0_value);

    			if (current_block_type === (current_block_type = select_block_type_2(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if (if_block) if_block.d(1);
    				if_block = current_block_type && current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(span1, null);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);

    			if (if_block) {
    				if_block.d();
    			}
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8$1.name,
    		type: "if",
    		source: "(74:10) {#if bookingDetails.serviceType}",
    		ctx
    	});

    	return block;
    }

    // (88:67) 
    function create_if_block_13(ctx) {
    	let if_block_anchor;

    	function select_block_type_4(ctx, dirty) {
    		if (/*bookingDetails*/ ctx[0].serviceType === 'change') return create_if_block_14;
    		if (/*bookingDetails*/ ctx[0].serviceType === 'repair') return create_if_block_15;
    		if (/*bookingDetails*/ ctx[0].serviceType === 'balancing') return create_if_block_16;
    		return create_else_block_1;
    	}

    	let current_block_type = select_block_type_4(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_4(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_13.name,
    		type: "if",
    		source: "(88:67) ",
    		ctx
    	});

    	return block;
    }

    // (78:16) {#if bookingDetails.service === 'autoService'}
    function create_if_block_9(ctx) {
    	let if_block_anchor;

    	function select_block_type_3(ctx, dirty) {
    		if (/*bookingDetails*/ ctx[0].serviceType === 'maintenance') return create_if_block_10;
    		if (/*bookingDetails*/ ctx[0].serviceType === 'repair') return create_if_block_11;
    		if (/*bookingDetails*/ ctx[0].serviceType === 'diagnostic') return create_if_block_12;
    		return create_else_block$3;
    	}

    	let current_block_type = select_block_type_3(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (current_block_type === (current_block_type = select_block_type_3(ctx)) && if_block) {
    				if_block.p(ctx, dirty);
    			} else {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			}
    		},
    		d: function destroy(detaching) {
    			if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_9.name,
    		type: "if",
    		source: "(78:16) {#if bookingDetails.service === 'autoService'}",
    		ctx
    	});

    	return block;
    }

    // (95:18) {:else}
    function create_else_block_1(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.storage + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.storage + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block_1.name,
    		type: "else",
    		source: "(95:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (93:71) 
    function create_if_block_16(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.balancing + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.balancing + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_16.name,
    		type: "if",
    		source: "(93:71) ",
    		ctx
    	});

    	return block;
    }

    // (91:68) 
    function create_if_block_15(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.repair + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.repair + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_15.name,
    		type: "if",
    		source: "(91:68) ",
    		ctx
    	});

    	return block;
    }

    // (89:18) {#if bookingDetails.serviceType === 'change'}
    function create_if_block_14(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.change + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.tireService.serviceOptions.change + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_14.name,
    		type: "if",
    		source: "(89:18) {#if bookingDetails.serviceType === 'change'}",
    		ctx
    	});

    	return block;
    }

    // (85:18) {:else}
    function create_else_block$3(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.other + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.other + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$3.name,
    		type: "else",
    		source: "(85:18) {:else}",
    		ctx
    	});

    	return block;
    }

    // (83:72) 
    function create_if_block_12(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.diagnostic + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.diagnostic + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_12.name,
    		type: "if",
    		source: "(83:72) ",
    		ctx
    	});

    	return block;
    }

    // (81:68) 
    function create_if_block_11(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.repair + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.repair + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_11.name,
    		type: "if",
    		source: "(81:68) ",
    		ctx
    	});

    	return block;
    }

    // (79:18) {#if bookingDetails.serviceType === 'maintenance'}
    function create_if_block_10(ctx) {
    	let t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.maintenance + "";
    	let t;

    	const block = {
    		c: function create() {
    			t = text(t_value);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t_value !== (t_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.autoService.serviceOptions.maintenance + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_10.name,
    		type: "if",
    		source: "(79:18) {#if bookingDetails.serviceType === 'maintenance'}",
    		ctx
    	});

    	return block;
    }

    // (103:10) {#if bookingDetails.licensePlate}
    function create_if_block_7$1(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.licensePlate + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*bookingDetails*/ ctx[0].licensePlate + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 104, 14, 4850);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 105, 14, 4962);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 103, 12, 4810);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.licensePlate + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = /*bookingDetails*/ ctx[0].licensePlate + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7$1.name,
    		type: "if",
    		source: "(103:10) {#if bookingDetails.licensePlate}",
    		ctx
    	});

    	return block;
    }

    // (110:10) {#if bookingDetails.passengers}
    function create_if_block_6$2(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.passengers + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*bookingDetails*/ ctx[0].passengers + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 111, 14, 5156);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 112, 14, 5266);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 110, 12, 5116);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.passengers + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = /*bookingDetails*/ ctx[0].passengers + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$2.name,
    		type: "if",
    		source: "(110:10) {#if bookingDetails.passengers}",
    		ctx
    	});

    	return block;
    }

    // (117:10) {#if bookingDetails.days}
    function create_if_block_5$2(ctx) {
    	let div;
    	let span0;

    	let t0_value = (/*currentLang*/ ctx[2] === 'hu'
    	? 'Időtartam'
    	: 'Duration') + "";

    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*bookingDetails*/ ctx[0].days + "";
    	let t3;
    	let t4;
    	let t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.days + "";
    	let t5;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			t5 = text(t5_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 118, 14, 5452);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 119, 14, 5551);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 117, 12, 5412);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    			append_dev(span1, t4);
    			append_dev(span1, t5);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*currentLang*/ 4 && t0_value !== (t0_value = (/*currentLang*/ ctx[2] === 'hu'
    			? 'Időtartam'
    			: 'Duration') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = /*bookingDetails*/ ctx[0].days + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*content, currentLang*/ 6 && t5_value !== (t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.days + "")) set_data_dev(t5, t5_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$2.name,
    		type: "if",
    		source: "(117:10) {#if bookingDetails.days}",
    		ctx
    	});

    	return block;
    }

    // (124:10) {#if bookingDetails.carWashPackage && bookingDetails.carWashPackage !== 'none'}
    function create_if_block_4$2(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashOptions.title + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = /*bookingDetails*/ ctx[0].carWashPackageName + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 125, 14, 5840);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 126, 14, 5960);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 124, 12, 5800);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashOptions.title + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = /*bookingDetails*/ ctx[0].carWashPackageName + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$2.name,
    		type: "if",
    		source: "(124:10) {#if bookingDetails.carWashPackage && bookingDetails.carWashPackage !== 'none'}",
    		ctx
    	});

    	return block;
    }

    // (133:10) {#if bookingDetails.priceBreakdown}
    function create_if_block_2$2(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.parkingTotal + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.parkingTotal) + "";
    	let t3;
    	let t4;
    	let if_block_anchor;
    	let if_block = /*bookingDetails*/ ctx[0].priceBreakdown.carWashStandard > 0 && create_if_block_3$2(ctx);

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 134, 14, 6196);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 135, 14, 6308);
    			attr_dev(div, "class", "detail-item svelte-10tkxda");
    			add_location(div, file$6, 133, 12, 6156);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    			insert_dev(target, t4, anchor);
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.parkingTotal + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.parkingTotal) + "")) set_data_dev(t3, t3_value);

    			if (/*bookingDetails*/ ctx[0].priceBreakdown.carWashStandard > 0) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_3$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			if (detaching) detach_dev(t4);
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$2.name,
    		type: "if",
    		source: "(133:10) {#if bookingDetails.priceBreakdown}",
    		ctx
    	});

    	return block;
    }

    // (138:12) {#if bookingDetails.priceBreakdown.carWashStandard > 0}
    function create_if_block_3$2(ctx) {
    	let div0;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashStandard + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashStandard) + "";
    	let t3;
    	let t4;
    	let div1;
    	let span2;
    	let t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashDiscount + "";
    	let t5;
    	let t6;
    	let t7;
    	let span3;
    	let t8;
    	let t9_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashDiscount) + "";
    	let t9;
    	let t10;
    	let div2;
    	let span4;
    	let t11_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashDiscounted + "";
    	let t11;
    	let t12;
    	let t13;
    	let span5;
    	let t14_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashDiscounted) + "";
    	let t14;

    	const block = {
    		c: function create() {
    			div0 = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			span2 = element("span");
    			t5 = text(t5_value);
    			t6 = text(":");
    			t7 = space();
    			span3 = element("span");
    			t8 = text("- ");
    			t9 = text(t9_value);
    			t10 = space();
    			div2 = element("div");
    			span4 = element("span");
    			t11 = text(t11_value);
    			t12 = text(":");
    			t13 = space();
    			span5 = element("span");
    			t14 = text(t14_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 139, 16, 6546);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 140, 16, 6663);
    			attr_dev(div0, "class", "detail-item svelte-10tkxda");
    			add_location(div0, file$6, 138, 14, 6504);
    			attr_dev(span2, "class", "detail-label svelte-10tkxda");
    			add_location(span2, file$6, 143, 16, 6838);
    			attr_dev(span3, "class", "detail-value svelte-10tkxda");
    			set_style(span3, "color", "#e53e3e");
    			add_location(span3, file$6, 144, 16, 6955);
    			attr_dev(div1, "class", "detail-item svelte-10tkxda");
    			add_location(div1, file$6, 142, 14, 6796);
    			attr_dev(span4, "class", "detail-label svelte-10tkxda");
    			add_location(span4, file$6, 147, 16, 7156);
    			attr_dev(span5, "class", "detail-value svelte-10tkxda");
    			add_location(span5, file$6, 148, 16, 7275);
    			attr_dev(div2, "class", "detail-item svelte-10tkxda");
    			add_location(div2, file$6, 146, 14, 7114);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div0, anchor);
    			append_dev(div0, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div0, t2);
    			append_dev(div0, span1);
    			append_dev(span1, t3);
    			insert_dev(target, t4, anchor);
    			insert_dev(target, div1, anchor);
    			append_dev(div1, span2);
    			append_dev(span2, t5);
    			append_dev(span2, t6);
    			append_dev(div1, t7);
    			append_dev(div1, span3);
    			append_dev(span3, t8);
    			append_dev(span3, t9);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, div2, anchor);
    			append_dev(div2, span4);
    			append_dev(span4, t11);
    			append_dev(span4, t12);
    			append_dev(div2, t13);
    			append_dev(div2, span5);
    			append_dev(span5, t14);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashStandard + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashStandard) + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*content, currentLang*/ 6 && t5_value !== (t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashDiscount + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*bookingDetails*/ 1 && t9_value !== (t9_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashDiscount) + "")) set_data_dev(t9, t9_value);
    			if (dirty & /*content, currentLang*/ 6 && t11_value !== (t11_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.carWashDiscounted + "")) set_data_dev(t11, t11_value);
    			if (dirty & /*bookingDetails*/ 1 && t14_value !== (t14_value = formatCurrency(/*bookingDetails*/ ctx[0].priceBreakdown.carWashDiscounted) + "")) set_data_dev(t14, t14_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div0);
    			if (detaching) detach_dev(t4);
    			if (detaching) detach_dev(div1);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(div2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$2.name,
    		type: "if",
    		source: "(138:12) {#if bookingDetails.priceBreakdown.carWashStandard > 0}",
    		ctx
    	});

    	return block;
    }

    // (154:10) {#if bookingDetails.totalPrice !== undefined}
    function create_if_block_1$3(ctx) {
    	let div;
    	let span0;
    	let t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.totalPrice + "";
    	let t0;
    	let t1;
    	let t2;
    	let span1;
    	let t3_value = formatCurrency(/*bookingDetails*/ ctx[0].totalPrice) + "";
    	let t3;

    	const block = {
    		c: function create() {
    			div = element("div");
    			span0 = element("span");
    			t0 = text(t0_value);
    			t1 = text(":");
    			t2 = space();
    			span1 = element("span");
    			t3 = text(t3_value);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 155, 14, 7556);
    			attr_dev(span1, "class", "detail-value total-price-value svelte-10tkxda");
    			add_location(span1, file$6, 156, 14, 7666);
    			attr_dev(div, "class", "detail-item total-price-item svelte-10tkxda");
    			add_location(div, file$6, 154, 12, 7499);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, span0);
    			append_dev(span0, t0);
    			append_dev(span0, t1);
    			append_dev(div, t2);
    			append_dev(div, span1);
    			append_dev(span1, t3);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*content, currentLang*/ 6 && t0_value !== (t0_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].bookingForm.airportParking.totalPrice + "")) set_data_dev(t0, t0_value);
    			if (dirty & /*bookingDetails*/ 1 && t3_value !== (t3_value = formatCurrency(/*bookingDetails*/ ctx[0].totalPrice) + "")) set_data_dev(t3, t3_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$3.name,
    		type: "if",
    		source: "(154:10) {#if bookingDetails.totalPrice !== undefined}",
    		ctx
    	});

    	return block;
    }

    // (170:14) {#if bookingDetails.contact.email}
    function create_if_block$5(ctx) {
    	let br;
    	let t_value = /*bookingDetails*/ ctx[0].contact.email + "";
    	let t;

    	const block = {
    		c: function create() {
    			br = element("br");
    			t = text(t_value);
    			add_location(br, file$6, 170, 16, 8289);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, br, anchor);
    			insert_dev(target, t, anchor);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*bookingDetails*/ 1 && t_value !== (t_value = /*bookingDetails*/ ctx[0].contact.email + "")) set_data_dev(t, t_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(br);
    			if (detaching) detach_dev(t);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$5.name,
    		type: "if",
    		source: "(170:14) {#if bookingDetails.contact.email}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$6(ctx) {
    	let section;
    	let div9;
    	let div8;
    	let div0;
    	let svg;
    	let path0;
    	let path1;
    	let t0;
    	let h2;
    	let t1_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.title + "";
    	let t1;
    	let t2;
    	let p0;
    	let t3_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.subtitle + "";
    	let t3;
    	let t4;
    	let div6;
    	let h3;
    	let t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.details + "";
    	let t5;
    	let t6;
    	let div5;
    	let div1;
    	let span0;
    	let t7_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.service + "";
    	let t7;
    	let t8;
    	let t9;
    	let span1;
    	let t10;
    	let div2;
    	let span2;
    	let t11_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.date + "";
    	let t11;
    	let t12;
    	let t13;
    	let span3;
    	let t14;
    	let t15;
    	let t16;
    	let t17;
    	let t18;
    	let t19;
    	let t20;
    	let t21;
    	let t22;
    	let div3;
    	let span4;
    	let t23_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.name + "";
    	let t23;
    	let t24;
    	let t25;
    	let span5;
    	let t26_value = /*bookingDetails*/ ctx[0].name + "";
    	let t26;
    	let t27;
    	let div4;
    	let span6;
    	let t28_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.contactInfo + "";
    	let t28;
    	let t29;
    	let t30;
    	let span7;
    	let t31_value = /*bookingDetails*/ ctx[0].contact.phone + "";
    	let t31;
    	let t32;
    	let t33;
    	let p1;
    	let t34_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.emailSent + "";
    	let t34;
    	let t35;
    	let div7;
    	let button;
    	let t36_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.return + "";
    	let t36;
    	let section_transition;
    	let current;
    	let mounted;
    	let dispose;

    	function select_block_type(ctx, dirty) {
    		if (/*bookingDetails*/ ctx[0].service === 'airportParking') return create_if_block_19;
    		if (/*bookingDetails*/ ctx[0].service === 'carWash') return create_if_block_20;
    		if (/*bookingDetails*/ ctx[0].service === 'autoService') return create_if_block_21;
    		if (/*bookingDetails*/ ctx[0].service === 'tireService') return create_if_block_22;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block0 = current_block_type && current_block_type(ctx);

    	function select_block_type_1(ctx, dirty) {
    		if (/*bookingDetails*/ ctx[0].service === 'airportParking') return create_if_block_18;
    		return create_else_block_2;
    	}

    	let current_block_type_1 = select_block_type_1(ctx);
    	let if_block1 = current_block_type_1(ctx);
    	let if_block2 = /*bookingDetails*/ ctx[0].time && create_if_block_17(ctx);
    	let if_block3 = /*bookingDetails*/ ctx[0].serviceType && create_if_block_8$1(ctx);
    	let if_block4 = /*bookingDetails*/ ctx[0].licensePlate && create_if_block_7$1(ctx);
    	let if_block5 = /*bookingDetails*/ ctx[0].passengers && create_if_block_6$2(ctx);
    	let if_block6 = /*bookingDetails*/ ctx[0].days && create_if_block_5$2(ctx);
    	let if_block7 = /*bookingDetails*/ ctx[0].carWashPackage && /*bookingDetails*/ ctx[0].carWashPackage !== 'none' && create_if_block_4$2(ctx);
    	let if_block8 = /*bookingDetails*/ ctx[0].priceBreakdown && create_if_block_2$2(ctx);
    	let if_block9 = /*bookingDetails*/ ctx[0].totalPrice !== undefined && create_if_block_1$3(ctx);
    	let if_block10 = /*bookingDetails*/ ctx[0].contact.email && create_if_block$5(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div9 = element("div");
    			div8 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t0 = space();
    			h2 = element("h2");
    			t1 = text(t1_value);
    			t2 = space();
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			div6 = element("div");
    			h3 = element("h3");
    			t5 = text(t5_value);
    			t6 = space();
    			div5 = element("div");
    			div1 = element("div");
    			span0 = element("span");
    			t7 = text(t7_value);
    			t8 = text(":");
    			t9 = space();
    			span1 = element("span");
    			if (if_block0) if_block0.c();
    			t10 = space();
    			div2 = element("div");
    			span2 = element("span");
    			t11 = text(t11_value);
    			t12 = text(":");
    			t13 = space();
    			span3 = element("span");
    			if_block1.c();
    			t14 = space();
    			if (if_block2) if_block2.c();
    			t15 = space();
    			if (if_block3) if_block3.c();
    			t16 = space();
    			if (if_block4) if_block4.c();
    			t17 = space();
    			if (if_block5) if_block5.c();
    			t18 = space();
    			if (if_block6) if_block6.c();
    			t19 = space();
    			if (if_block7) if_block7.c();
    			t20 = space();
    			if (if_block8) if_block8.c();
    			t21 = space();
    			if (if_block9) if_block9.c();
    			t22 = space();
    			div3 = element("div");
    			span4 = element("span");
    			t23 = text(t23_value);
    			t24 = text(":");
    			t25 = space();
    			span5 = element("span");
    			t26 = text(t26_value);
    			t27 = space();
    			div4 = element("div");
    			span6 = element("span");
    			t28 = text(t28_value);
    			t29 = text(":");
    			t30 = space();
    			span7 = element("span");
    			t31 = text(t31_value);
    			t32 = space();
    			if (if_block10) if_block10.c();
    			t33 = space();
    			p1 = element("p");
    			t34 = text(t34_value);
    			t35 = space();
    			div7 = element("div");
    			button = element("button");
    			t36 = text(t36_value);
    			attr_dev(path0, "d", "M22 11.08V12a10 10 0 1 1-5.93-9.14");
    			attr_dev(path0, "stroke", "currentColor");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			add_location(path0, file$6, 27, 10, 921);
    			attr_dev(path1, "d", "M22 4 12 14.01l-3-3");
    			attr_dev(path1, "stroke", "currentColor");
    			attr_dev(path1, "stroke-width", "2");
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			add_location(path1, file$6, 28, 10, 1064);
    			attr_dev(svg, "width", "64");
    			attr_dev(svg, "height", "64");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$6, 26, 8, 815);
    			attr_dev(div0, "class", "confirmation-icon svelte-10tkxda");
    			add_location(div0, file$6, 25, 6, 775);
    			attr_dev(h2, "class", "svelte-10tkxda");
    			add_location(h2, file$6, 32, 6, 1217);
    			attr_dev(p0, "class", "confirmation-subtitle svelte-10tkxda");
    			add_location(p0, file$6, 33, 6, 1274);
    			attr_dev(h3, "class", "svelte-10tkxda");
    			add_location(h3, file$6, 36, 8, 1406);
    			attr_dev(span0, "class", "detail-label svelte-10tkxda");
    			add_location(span0, file$6, 40, 12, 1543);
    			attr_dev(span1, "class", "detail-value svelte-10tkxda");
    			add_location(span1, file$6, 41, 12, 1634);
    			attr_dev(div1, "class", "detail-item svelte-10tkxda");
    			add_location(div1, file$6, 39, 10, 1505);
    			attr_dev(span2, "class", "detail-label svelte-10tkxda");
    			add_location(span2, file$6, 55, 12, 2289);
    			attr_dev(span3, "class", "detail-value svelte-10tkxda");
    			add_location(span3, file$6, 56, 12, 2377);
    			attr_dev(div2, "class", "detail-item svelte-10tkxda");
    			add_location(div2, file$6, 54, 10, 2251);
    			attr_dev(span4, "class", "detail-label svelte-10tkxda");
    			add_location(span4, file$6, 161, 12, 7846);
    			attr_dev(span5, "class", "detail-value svelte-10tkxda");
    			add_location(span5, file$6, 162, 12, 7934);
    			attr_dev(div3, "class", "detail-item svelte-10tkxda");
    			add_location(div3, file$6, 160, 10, 7808);
    			attr_dev(span6, "class", "detail-label svelte-10tkxda");
    			add_location(span6, file$6, 166, 12, 8056);
    			attr_dev(span7, "class", "detail-value svelte-10tkxda");
    			add_location(span7, file$6, 167, 12, 8151);
    			attr_dev(div4, "class", "detail-item svelte-10tkxda");
    			add_location(div4, file$6, 165, 10, 8018);
    			attr_dev(div5, "class", "details-grid svelte-10tkxda");
    			add_location(div5, file$6, 38, 8, 1468);
    			attr_dev(div6, "class", "confirmation-details svelte-10tkxda");
    			add_location(div6, file$6, 35, 6, 1363);
    			attr_dev(p1, "class", "email-notice svelte-10tkxda");
    			add_location(p1, file$6, 177, 6, 8416);
    			attr_dev(button, "class", "btn btn-primary svelte-10tkxda");
    			add_location(button, file$6, 180, 8, 8540);
    			attr_dev(div7, "class", "confirmation-actions svelte-10tkxda");
    			add_location(div7, file$6, 179, 6, 8497);
    			attr_dev(div8, "class", "confirmation-container svelte-10tkxda");
    			add_location(div8, file$6, 24, 4, 732);
    			attr_dev(div9, "class", "container");
    			add_location(div9, file$6, 23, 2, 704);
    			attr_dev(section, "class", "confirmation-section svelte-10tkxda");
    			add_location(section, file$6, 22, 0, 627);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div9);
    			append_dev(div9, div8);
    			append_dev(div8, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path0);
    			append_dev(svg, path1);
    			append_dev(div8, t0);
    			append_dev(div8, h2);
    			append_dev(h2, t1);
    			append_dev(div8, t2);
    			append_dev(div8, p0);
    			append_dev(p0, t3);
    			append_dev(div8, t4);
    			append_dev(div8, div6);
    			append_dev(div6, h3);
    			append_dev(h3, t5);
    			append_dev(div6, t6);
    			append_dev(div6, div5);
    			append_dev(div5, div1);
    			append_dev(div1, span0);
    			append_dev(span0, t7);
    			append_dev(span0, t8);
    			append_dev(div1, t9);
    			append_dev(div1, span1);
    			if (if_block0) if_block0.m(span1, null);
    			append_dev(div5, t10);
    			append_dev(div5, div2);
    			append_dev(div2, span2);
    			append_dev(span2, t11);
    			append_dev(span2, t12);
    			append_dev(div2, t13);
    			append_dev(div2, span3);
    			if_block1.m(span3, null);
    			append_dev(div5, t14);
    			if (if_block2) if_block2.m(div5, null);
    			append_dev(div5, t15);
    			if (if_block3) if_block3.m(div5, null);
    			append_dev(div5, t16);
    			if (if_block4) if_block4.m(div5, null);
    			append_dev(div5, t17);
    			if (if_block5) if_block5.m(div5, null);
    			append_dev(div5, t18);
    			if (if_block6) if_block6.m(div5, null);
    			append_dev(div5, t19);
    			if (if_block7) if_block7.m(div5, null);
    			append_dev(div5, t20);
    			if (if_block8) if_block8.m(div5, null);
    			append_dev(div5, t21);
    			if (if_block9) if_block9.m(div5, null);
    			append_dev(div5, t22);
    			append_dev(div5, div3);
    			append_dev(div3, span4);
    			append_dev(span4, t23);
    			append_dev(span4, t24);
    			append_dev(div3, t25);
    			append_dev(div3, span5);
    			append_dev(span5, t26);
    			append_dev(div5, t27);
    			append_dev(div5, div4);
    			append_dev(div4, span6);
    			append_dev(span6, t28);
    			append_dev(span6, t29);
    			append_dev(div4, t30);
    			append_dev(div4, span7);
    			append_dev(span7, t31);
    			append_dev(span7, t32);
    			if (if_block10) if_block10.m(span7, null);
    			append_dev(div8, t33);
    			append_dev(div8, p1);
    			append_dev(p1, t34);
    			append_dev(div8, t35);
    			append_dev(div8, div7);
    			append_dev(div7, button);
    			append_dev(button, t36);
    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(
    					button,
    					"click",
    					function () {
    						if (is_function(/*resetBooking*/ ctx[3])) /*resetBooking*/ ctx[3].apply(this, arguments);
    					},
    					false,
    					false,
    					false,
    					false
    				);

    				mounted = true;
    			}
    		},
    		p: function update(new_ctx, [dirty]) {
    			ctx = new_ctx;
    			if ((!current || dirty & /*content, currentLang*/ 6) && t1_value !== (t1_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.title + "")) set_data_dev(t1, t1_value);
    			if ((!current || dirty & /*content, currentLang*/ 6) && t3_value !== (t3_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.subtitle + "")) set_data_dev(t3, t3_value);
    			if ((!current || dirty & /*content, currentLang*/ 6) && t5_value !== (t5_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.details + "")) set_data_dev(t5, t5_value);
    			if ((!current || dirty & /*content, currentLang*/ 6) && t7_value !== (t7_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.service + "")) set_data_dev(t7, t7_value);

    			if (current_block_type === (current_block_type = select_block_type(ctx)) && if_block0) {
    				if_block0.p(ctx, dirty);
    			} else {
    				if (if_block0) if_block0.d(1);
    				if_block0 = current_block_type && current_block_type(ctx);

    				if (if_block0) {
    					if_block0.c();
    					if_block0.m(span1, null);
    				}
    			}

    			if ((!current || dirty & /*content, currentLang*/ 6) && t11_value !== (t11_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.date + "")) set_data_dev(t11, t11_value);

    			if (current_block_type_1 === (current_block_type_1 = select_block_type_1(ctx)) && if_block1) {
    				if_block1.p(ctx, dirty);
    			} else {
    				if_block1.d(1);
    				if_block1 = current_block_type_1(ctx);

    				if (if_block1) {
    					if_block1.c();
    					if_block1.m(span3, null);
    				}
    			}

    			if (/*bookingDetails*/ ctx[0].time) {
    				if (if_block2) {
    					if_block2.p(ctx, dirty);
    				} else {
    					if_block2 = create_if_block_17(ctx);
    					if_block2.c();
    					if_block2.m(div5, t15);
    				}
    			} else if (if_block2) {
    				if_block2.d(1);
    				if_block2 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].serviceType) {
    				if (if_block3) {
    					if_block3.p(ctx, dirty);
    				} else {
    					if_block3 = create_if_block_8$1(ctx);
    					if_block3.c();
    					if_block3.m(div5, t16);
    				}
    			} else if (if_block3) {
    				if_block3.d(1);
    				if_block3 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].licensePlate) {
    				if (if_block4) {
    					if_block4.p(ctx, dirty);
    				} else {
    					if_block4 = create_if_block_7$1(ctx);
    					if_block4.c();
    					if_block4.m(div5, t17);
    				}
    			} else if (if_block4) {
    				if_block4.d(1);
    				if_block4 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].passengers) {
    				if (if_block5) {
    					if_block5.p(ctx, dirty);
    				} else {
    					if_block5 = create_if_block_6$2(ctx);
    					if_block5.c();
    					if_block5.m(div5, t18);
    				}
    			} else if (if_block5) {
    				if_block5.d(1);
    				if_block5 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].days) {
    				if (if_block6) {
    					if_block6.p(ctx, dirty);
    				} else {
    					if_block6 = create_if_block_5$2(ctx);
    					if_block6.c();
    					if_block6.m(div5, t19);
    				}
    			} else if (if_block6) {
    				if_block6.d(1);
    				if_block6 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].carWashPackage && /*bookingDetails*/ ctx[0].carWashPackage !== 'none') {
    				if (if_block7) {
    					if_block7.p(ctx, dirty);
    				} else {
    					if_block7 = create_if_block_4$2(ctx);
    					if_block7.c();
    					if_block7.m(div5, t20);
    				}
    			} else if (if_block7) {
    				if_block7.d(1);
    				if_block7 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].priceBreakdown) {
    				if (if_block8) {
    					if_block8.p(ctx, dirty);
    				} else {
    					if_block8 = create_if_block_2$2(ctx);
    					if_block8.c();
    					if_block8.m(div5, t21);
    				}
    			} else if (if_block8) {
    				if_block8.d(1);
    				if_block8 = null;
    			}

    			if (/*bookingDetails*/ ctx[0].totalPrice !== undefined) {
    				if (if_block9) {
    					if_block9.p(ctx, dirty);
    				} else {
    					if_block9 = create_if_block_1$3(ctx);
    					if_block9.c();
    					if_block9.m(div5, t22);
    				}
    			} else if (if_block9) {
    				if_block9.d(1);
    				if_block9 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 6) && t23_value !== (t23_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.name + "")) set_data_dev(t23, t23_value);
    			if ((!current || dirty & /*bookingDetails*/ 1) && t26_value !== (t26_value = /*bookingDetails*/ ctx[0].name + "")) set_data_dev(t26, t26_value);
    			if ((!current || dirty & /*content, currentLang*/ 6) && t28_value !== (t28_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.contactInfo + "")) set_data_dev(t28, t28_value);
    			if ((!current || dirty & /*bookingDetails*/ 1) && t31_value !== (t31_value = /*bookingDetails*/ ctx[0].contact.phone + "")) set_data_dev(t31, t31_value);

    			if (/*bookingDetails*/ ctx[0].contact.email) {
    				if (if_block10) {
    					if_block10.p(ctx, dirty);
    				} else {
    					if_block10 = create_if_block$5(ctx);
    					if_block10.c();
    					if_block10.m(span7, null);
    				}
    			} else if (if_block10) {
    				if_block10.d(1);
    				if_block10 = null;
    			}

    			if ((!current || dirty & /*content, currentLang*/ 6) && t34_value !== (t34_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.emailSent + "")) set_data_dev(t34, t34_value);
    			if ((!current || dirty & /*content, currentLang*/ 6) && t36_value !== (t36_value = /*content*/ ctx[1][/*currentLang*/ ctx[2]].confirmation.return + "")) set_data_dev(t36, t36_value);
    		},
    		i: function intro(local) {
    			if (current) return;

    			add_render_callback(() => {
    				if (!current) return;
    				if (!section_transition) section_transition = create_bidirectional_transition(section, fade, { duration: 300 }, true);
    				section_transition.run(1);
    			});

    			current = true;
    		},
    		o: function outro(local) {
    			if (!section_transition) section_transition = create_bidirectional_transition(section, fade, { duration: 300 }, false);
    			section_transition.run(0);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (if_block0) {
    				if_block0.d();
    			}

    			if_block1.d();
    			if (if_block2) if_block2.d();
    			if (if_block3) if_block3.d();
    			if (if_block4) if_block4.d();
    			if (if_block5) if_block5.d();
    			if (if_block6) if_block6.d();
    			if (if_block7) if_block7.d();
    			if (if_block8) if_block8.d();
    			if (if_block9) if_block9.d();
    			if (if_block10) if_block10.d();
    			if (detaching && section_transition) section_transition.end();
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$6.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function formatCurrency(amount) {
    	// Ensure the amount is treated as a number before formatting
    	const numericAmount = typeof amount === 'number'
    	? amount
    	: parseFloat(amount) || 0;

    	return new Intl.NumberFormat('hu-HU',
    	{
    			style: 'currency',
    			currency: 'HUF',
    			minimumFractionDigits: 0,
    			maximumFractionDigits: 0
    		}).format(numericAmount);
    }

    function instance$6($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('BookingConfirmation', slots, []);
    	let { bookingDetails = {} } = $$props;
    	let { content = {} } = $$props;
    	let { currentLang } = $$props;
    	let { resetBooking } = $$props;

    	$$self.$$.on_mount.push(function () {
    		if (currentLang === undefined && !('currentLang' in $$props || $$self.$$.bound[$$self.$$.props['currentLang']])) {
    			console.warn("<BookingConfirmation> was created without expected prop 'currentLang'");
    		}

    		if (resetBooking === undefined && !('resetBooking' in $$props || $$self.$$.bound[$$self.$$.props['resetBooking']])) {
    			console.warn("<BookingConfirmation> was created without expected prop 'resetBooking'");
    		}
    	});

    	const writable_props = ['bookingDetails', 'content', 'currentLang', 'resetBooking'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<BookingConfirmation> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('bookingDetails' in $$props) $$invalidate(0, bookingDetails = $$props.bookingDetails);
    		if ('content' in $$props) $$invalidate(1, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(2, currentLang = $$props.currentLang);
    		if ('resetBooking' in $$props) $$invalidate(3, resetBooking = $$props.resetBooking);
    	};

    	$$self.$capture_state = () => ({
    		fade,
    		bookingDetails,
    		content,
    		currentLang,
    		resetBooking,
    		formatCurrency
    	});

    	$$self.$inject_state = $$props => {
    		if ('bookingDetails' in $$props) $$invalidate(0, bookingDetails = $$props.bookingDetails);
    		if ('content' in $$props) $$invalidate(1, content = $$props.content);
    		if ('currentLang' in $$props) $$invalidate(2, currentLang = $$props.currentLang);
    		if ('resetBooking' in $$props) $$invalidate(3, resetBooking = $$props.resetBooking);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [bookingDetails, content, currentLang, resetBooking];
    }

    class BookingConfirmation extends SvelteComponentDev {
    	constructor(options) {
    		super(options);

    		init(this, options, instance$6, create_fragment$6, safe_not_equal, {
    			bookingDetails: 0,
    			content: 1,
    			currentLang: 2,
    			resetBooking: 3
    		});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "BookingConfirmation",
    			options,
    			id: create_fragment$6.name
    		});
    	}

    	get bookingDetails() {
    		throw new Error("<BookingConfirmation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set bookingDetails(value) {
    		throw new Error("<BookingConfirmation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get content() {
    		throw new Error("<BookingConfirmation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set content(value) {
    		throw new Error("<BookingConfirmation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get currentLang() {
    		throw new Error("<BookingConfirmation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set currentLang(value) {
    		throw new Error("<BookingConfirmation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	get resetBooking() {
    		throw new Error("<BookingConfirmation>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set resetBooking(value) {
    		throw new Error("<BookingConfirmation>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    // src/lib/i18n/booking-content.js
    // Translations content for the booking page and its components

    const content = {
      hu: {
        title: 'FOGLALÁS',
        subtitle: 'Foglaljon időpontot szolgáltatásainkra gyorsan és egyszerűen',
        serviceSelection: {
          title: 'VÁLASSZON SZOLGÁLTATÁST',
          description: 'Válassza ki a kívánt szolgáltatást az alábbi opciók közül'
        },
        services: {
          airportParking: {
            title: 'REPTÉRI PARKOLÁS',
            description: 'Biztonságos parkolás a repülőtér közelében, 24/7 felügyelettel'
          },
          carWash: {
            title: 'AUTÓMOSÓ',
            description: 'Professzionális autómosó szolgáltatások'
          },
          autoService: {
            title: 'AUTÓSZERVIZ',
            description: 'Teljes körű autószerviz és karbantartás'
          },
          tireService: {
            title: 'GUMISZERVIZ',
            description: 'Gumiabroncs csere, javítás és tárolás'
          }
        },
        bookingForm: {
          airportParking: {
            title: 'REPTÉRI PARKOLÁS FOGLALÁS',
            dateRange: 'Parkolási időszak',
            startDate: 'Érkezési dátum',
            startTime: 'Érkezési idő',
            endDate: 'Távozási dátum',
            endTime: 'Távozási idő',
            licensePlate: 'Rendszám',
            licensePlateRequired: 'A rendszám megadása kötelező',
            totalPrice: 'Teljes összeg',
            days: 'nap',
            passengers: 'Utasok száma',
            passengersRequired: 'Az utasok számának megadása kötelező',
            addCarWash: 'Szeretne kedvezményes autómosást a parkolással?',
            carWashOptions: {
              title: 'Autómosó csomag',
              none: 'Nem kérek',
              smartInteriorExterior: 'SMART - Belső és Külső (8900 Ft)',
              premiumInteriorExterior: 'PRÉMIUM - Belső és Külső (11900 Ft)'
            },
            parkingTotal: 'Parkolás díj',
            carWashStandard: 'Autómosó díj (alap)',
            carWashDiscount: 'Autómosó kedvezmény (20%)',
            carWashDiscounted: 'Autómosó díj (kedvezményes)'
          },
          carWash: {
            title: 'AUTÓMOSÓ IDŐPONTFOGLALÁS',
            date: 'Válasszon dátumot',
            time: 'Válasszon időpontot'
          },
          autoService: {
            title: 'AUTÓSZERVIZ IDŐPONTFOGLALÁS',
            dateTime: 'Időpont kiválasztása',
            date: 'Válasszon dátumot',
            time: 'Válasszon időpontot',
            serviceType: 'Szerviz típusa',
            serviceOptions: {
              maintenance: 'Általános karbantartás',
              repair: 'Javítás',
              diagnostic: 'Diagnosztika',
              other: 'Egyéb'
            },
            carDetails: 'Jármű adatok',
            carModel: 'Autó típusa',
            carModelPlaceholder: 'pl. Toyota Corolla 2018',
            licensePlate: 'Rendszám',
            licensePlatePlaceholder: 'pl. ABC-123',
            notes: 'További megjegyzések',
            notesPlaceholder: 'Írja le a problémát vagy egyéb kéréseit',
            description: 'Probléma leírása (opcionális)'
          },
          tireService: {
            title: 'GUMISZERVIZ IDŐPONTFOGLALÁS',
            dateTime: 'Időpont kiválasztása',
            date: 'Válasszon dátumot',
            time: 'Válasszon időpontot',
            serviceType: 'Szolgáltatás típusa',
            serviceOptions: {
              change: 'Gumiabroncs csere',
              repair: 'Javítás',
              balancing: 'Kerékkiegyensúlyozás',
              storage: 'Gumitárolás'
            },
            carDetails: 'Jármű adatok',
            carModel: 'Autó típusa',
            carModelPlaceholder: 'pl. Toyota Corolla 2018',
            licensePlate: 'Rendszám',
            licensePlatePlaceholder: 'pl. ABC-123',
            tireCount: 'Gumiabroncsok száma',
            notes: 'További megjegyzések',
            notesPlaceholder: 'Írja le a problémát vagy egyéb kéréseit'
          },
          personalInfo: {
            title: 'SZEMÉLYES ADATOK',
            firstName: 'Keresztnév',
            firstNameRequired: 'Keresztnév megadása kötelező',
            lastName: 'Vezetéknév',
            lastNameRequired: 'Vezetéknév megadása kötelező',
            email: 'Email cím',
            emailInvalid: 'Érvénytelen email cím',
            phone: 'Telefonszám',
            phoneRequired: 'Telefonszám megadása kötelező',
            phoneInvalid: 'Érvénytelen telefonszám',
            privacyPolicy: 'Elfogadom az Adatvédelmi irányelveket',
            privacyPolicyRequired: 'Az Adatvédelmi irányelvek elfogadása kötelező',
            privacyPolicyLink: 'Adatvédelmi irányelvek'
          },
          submit: 'FOGLALÁS MEGERŐSÍTÉSE',
          processing: 'Feldolgozás...',
          timeSlots: {
            morning: 'Délelőtt',
            afternoon: 'Délután'
          },
          selectTimeSlot: 'Válasszon időpontot'
        },
        confirmation: {
          title: 'FOGLALÁS MEGERŐSÍTVE',
          subtitle: 'Köszönjük a foglalását!',
          details: 'Foglalás részletei',
          service: 'Szolgáltatás',
          date: 'Dátum',
          time: 'Időpont',
          name: 'Név',
          contactInfo: 'Elérhetőség',
          emailSent: 'A foglalás részleteit elküldtük az email címére.',
          return: 'Vissza a főoldalra'
        }
      },
      en: {
        title: 'BOOKING',
        subtitle: 'Book our services quickly and easily',
        serviceSelection: {
          title: 'SELECT A SERVICE',
          description: 'Choose the service you need from the options below'
        },
        services: {
          airportParking: {
            title: 'AIRPORT PARKING',
            description: 'Secure parking near the airport with 24/7 surveillance'
          },
          carWash: {
            title: 'CAR WASH',
            description: 'Professional car washing services'
          },
          autoService: {
            title: 'AUTO SERVICE',
            description: 'Complete auto service and maintenance'
          },
          tireService: {
            title: 'TIRE SERVICE',
            description: 'Tire replacement, repair, and storage'
          }
        },
        bookingForm: {
          airportParking: {
            title: 'AIRPORT PARKING BOOKING',
            dateRange: 'Parking period',
            startDate: 'Arrival date',
            startTime: 'Arrival time',
            endDate: 'Departure date',
            endTime: 'Departure time',
            licensePlate: 'License plate',
            licensePlateRequired: 'License plate is required',
            totalPrice: 'Total price',
            days: 'days',
            passengers: 'Number of passengers',
            passengersRequired: 'Number of passengers is required',
            addCarWash: 'Would you like a discounted car wash with your parking?',
            carWashOptions: {
              title: 'Car wash package',
              none: 'No, thanks',
              smartInteriorExterior: 'SMART - Interior and Exterior (8900 HUF)',
              premiumInteriorExterior: 'PREMIUM - Interior and Exterior (11900 HUF)'
            },
            parkingTotal: 'Parking fee',
            carWashStandard: 'Car wash fee (standard)',
            carWashDiscount: 'Car wash discount (20%)',
            carWashDiscounted: 'Car wash fee (discounted)'
          },
          carWash: {
            title: 'CAR WASH APPOINTMENT',
            date: 'Select a date',
            time: 'Select a time'
          },
          autoService: {
            title: 'AUTO SERVICE APPOINTMENT',
            dateTime: 'Select Date & Time',
            date: 'Select a date',
            time: 'Select a time',
            serviceType: 'Service type',
            serviceOptions: {
              maintenance: 'General maintenance',
              repair: 'Repair',
              diagnostic: 'Diagnostics',
              other: 'Other'
            },
            carDetails: 'Vehicle Details',
            carModel: 'Car model',
            carModelPlaceholder: 'e.g. Toyota Corolla 2018',
            licensePlate: 'License plate',
            licensePlatePlaceholder: 'e.g. ABC-123',
            notes: 'Additional notes',
            notesPlaceholder: 'Describe the issue or any special requests',
            description: 'Problem description (optional)'
          },
          tireService: {
            title: 'TIRE SERVICE APPOINTMENT',
            dateTime: 'Select Date & Time',
            date: 'Select a date',
            time: 'Select a time',
            serviceType: 'Service type',
            serviceOptions: {
              change: 'Tire replacement',
              repair: 'Repair',
              balancing: 'Wheel balancing',
              storage: 'Tire storage'
            },
            carDetails: 'Vehicle Details',
            carModel: 'Car model',
            carModelPlaceholder: 'e.g. Toyota Corolla 2018',
            licensePlate: 'License plate',
            licensePlatePlaceholder: 'e.g. ABC-123',
            tireCount: 'Number of tires',
            notes: 'Additional notes',
            notesPlaceholder: 'Any special requests or additional information'
          },
          personalInfo: {
            title: 'PERSONAL INFORMATION',
            firstName: 'First name',
            firstNameRequired: 'First name is required',
            lastName: 'Last name',
            lastNameRequired: 'Last name is required',
            email: 'Email address',
            emailInvalid: 'Invalid email address',
            phone: 'Phone number',
            phoneRequired: 'Phone number is required',
            phoneInvalid: 'Invalid phone number',
            privacyPolicy: 'I accept the Privacy Policy',
            privacyPolicyRequired: 'You must accept the Privacy Policy',
            privacyPolicyLink: 'Privacy Policy'
          },
          submit: 'CONFIRM BOOKING',
          processing: 'Processing...',
          timeSlots: {
            morning: 'Morning',
            afternoon: 'Afternoon'
          },
          selectTimeSlot: 'Please select a time slot'
        },
        confirmation: {
          title: 'BOOKING CONFIRMED',
          subtitle: 'Thank you for your booking!',
          details: 'Booking details',
          service: 'Service',
          date: 'Date',
          time: 'Time',
          name: 'Name',
          contactInfo: 'Contact information',
          emailSent: 'Booking details have been sent to your email address.',
          return: 'Return to homepage'
        }
      }
    };

    /* src/pages/Booking.svelte generated by Svelte v3.59.2 */

    const { console: console_1$1 } = globals;

    const file$5 = "src/pages/Booking.svelte";

    // (253:0) {:else}
    function create_else_block$2(ctx) {
    	let bookingconfirmation;
    	let current;

    	bookingconfirmation = new BookingConfirmation({
    			props: {
    				bookingDetails: /*bookingDetails*/ ctx[3],
    				content,
    				currentLang: /*lang*/ ctx[6],
    				resetBooking: /*resetBooking*/ ctx[10]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(bookingconfirmation.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(bookingconfirmation, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const bookingconfirmation_changes = {};
    			if (dirty & /*bookingDetails*/ 8) bookingconfirmation_changes.bookingDetails = /*bookingDetails*/ ctx[3];
    			if (dirty & /*lang*/ 64) bookingconfirmation_changes.currentLang = /*lang*/ ctx[6];
    			bookingconfirmation.$set(bookingconfirmation_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(bookingconfirmation.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(bookingconfirmation.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(bookingconfirmation, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$2.name,
    		type: "else",
    		source: "(253:0) {:else}",
    		ctx
    	});

    	return block;
    }

    // (192:0) {#if !showConfirmation}
    function create_if_block$4(ctx) {
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block_1$2, create_if_block_2$1];
    	const if_blocks = [];

    	function select_block_type_1(ctx, dirty) {
    		if (/*currentStep*/ ctx[0] === 1) return 0;
    		if (/*currentStep*/ ctx[0] === 2) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_1(ctx))) {
    		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		m: function mount(target, anchor) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(target, anchor);
    			}

    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_1(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block = if_blocks[current_block_type_index];

    					if (!if_block) {
    						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block.c();
    					} else {
    						if_block.p(ctx, dirty);
    					}

    					transition_in(if_block, 1);
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				} else {
    					if_block = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d(detaching);
    			}

    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$4.name,
    		type: "if",
    		source: "(192:0) {#if !showConfirmation}",
    		ctx
    	});

    	return block;
    }

    // (199:30) 
    function create_if_block_2$1(ctx) {
    	let section;
    	let div2;
    	let div0;
    	let button;
    	let svg;
    	let path;
    	let t0;
    	let t1_value = (/*lang*/ ctx[6] === 'hu' ? 'Vissza' : 'Back') + "";
    	let t1;
    	let t2;
    	let div1;
    	let current_block_type_index;
    	let if_block0;
    	let t3;
    	let current_block_type_index_1;
    	let if_block1;
    	let current;
    	let mounted;
    	let dispose;
    	const if_block_creators = [create_if_block_7, create_if_block_8];
    	const if_blocks = [];

    	function select_block_type_2(ctx, dirty) {
    		if (/*submitError*/ ctx[5]) return 0;
    		if (/*isSubmitting*/ ctx[4]) return 1;
    		return -1;
    	}

    	if (~(current_block_type_index = select_block_type_2(ctx))) {
    		if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    	}

    	const if_block_creators_1 = [create_if_block_3$1, create_if_block_4$1, create_if_block_5$1, create_if_block_6$1];
    	const if_blocks_1 = [];

    	function select_block_type_3(ctx, dirty) {
    		if (/*selectedService*/ ctx[1] === 'airportParking') return 0;
    		if (/*selectedService*/ ctx[1] === 'carWash') return 1;
    		if (/*selectedService*/ ctx[1] === 'autoService') return 2;
    		if (/*selectedService*/ ctx[1] === 'tireService') return 3;
    		return -1;
    	}

    	if (~(current_block_type_index_1 = select_block_type_3(ctx))) {
    		if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    	}

    	const block = {
    		c: function create() {
    			section = element("section");
    			div2 = element("div");
    			div0 = element("div");
    			button = element("button");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			t0 = space();
    			t1 = text(t1_value);
    			t2 = space();
    			div1 = element("div");
    			if (if_block0) if_block0.c();
    			t3 = space();
    			if (if_block1) if_block1.c();
    			attr_dev(path, "d", "M19 12H5M5 12L12 19M5 12L12 5");
    			attr_dev(path, "stroke", "currentColor");
    			attr_dev(path, "stroke-width", "2");
    			attr_dev(path, "stroke-linecap", "round");
    			attr_dev(path, "stroke-linejoin", "round");
    			add_location(path, file$5, 204, 14, 8289);
    			attr_dev(svg, "width", "16");
    			attr_dev(svg, "height", "16");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "class", "svelte-1aye7jh");
    			add_location(svg, file$5, 203, 12, 8179);
    			attr_dev(button, "class", "back-button svelte-1aye7jh");
    			button.disabled = /*isSubmitting*/ ctx[4];
    			add_location(button, file$5, 202, 10, 8096);
    			attr_dev(div0, "class", "booking-header svelte-1aye7jh");
    			add_location(div0, file$5, 201, 8, 8057);
    			attr_dev(div1, "class", "booking-form-container svelte-1aye7jh");
    			add_location(div1, file$5, 211, 8, 8530);
    			attr_dev(div2, "class", "container");
    			add_location(div2, file$5, 200, 6, 8025);
    			attr_dev(section, "class", "booking-form-section svelte-1aye7jh");
    			add_location(section, file$5, 199, 4, 7980);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div2);
    			append_dev(div2, div0);
    			append_dev(div0, button);
    			append_dev(button, svg);
    			append_dev(svg, path);
    			append_dev(button, t0);
    			append_dev(button, t1);
    			append_dev(div2, t2);
    			append_dev(div2, div1);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].m(div1, null);
    			}

    			append_dev(div1, t3);

    			if (~current_block_type_index_1) {
    				if_blocks_1[current_block_type_index_1].m(div1, null);
    			}

    			current = true;

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*goBack*/ ctx[8], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*lang*/ 64) && t1_value !== (t1_value = (/*lang*/ ctx[6] === 'hu' ? 'Vissza' : 'Back') + "")) set_data_dev(t1, t1_value);

    			if (!current || dirty & /*isSubmitting*/ 16) {
    				prop_dev(button, "disabled", /*isSubmitting*/ ctx[4]);
    			}

    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type_2(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if (~current_block_type_index) {
    					if_blocks[current_block_type_index].p(ctx, dirty);
    				}
    			} else {
    				if (if_block0) {
    					group_outros();

    					transition_out(if_blocks[previous_block_index], 1, 1, () => {
    						if_blocks[previous_block_index] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index) {
    					if_block0 = if_blocks[current_block_type_index];

    					if (!if_block0) {
    						if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    						if_block0.c();
    					} else {
    						if_block0.p(ctx, dirty);
    					}

    					transition_in(if_block0, 1);
    					if_block0.m(div1, t3);
    				} else {
    					if_block0 = null;
    				}
    			}

    			let previous_block_index_1 = current_block_type_index_1;
    			current_block_type_index_1 = select_block_type_3(ctx);

    			if (current_block_type_index_1 === previous_block_index_1) {
    				if (~current_block_type_index_1) {
    					if_blocks_1[current_block_type_index_1].p(ctx, dirty);
    				}
    			} else {
    				if (if_block1) {
    					group_outros();

    					transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
    						if_blocks_1[previous_block_index_1] = null;
    					});

    					check_outros();
    				}

    				if (~current_block_type_index_1) {
    					if_block1 = if_blocks_1[current_block_type_index_1];

    					if (!if_block1) {
    						if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
    						if_block1.c();
    					} else {
    						if_block1.p(ctx, dirty);
    					}

    					transition_in(if_block1, 1);
    					if_block1.m(div1, null);
    				} else {
    					if_block1 = null;
    				}
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block0);
    			transition_in(if_block1);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block0);
    			transition_out(if_block1);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);

    			if (~current_block_type_index) {
    				if_blocks[current_block_type_index].d();
    			}

    			if (~current_block_type_index_1) {
    				if_blocks_1[current_block_type_index_1].d();
    			}

    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2$1.name,
    		type: "if",
    		source: "(199:30) ",
    		ctx
    	});

    	return block;
    }

    // (193:2) {#if currentStep === 1}
    function create_if_block_1$2(ctx) {
    	let serviceselection;
    	let current;

    	serviceselection = new ServiceSelection({
    			props: {
    				content,
    				currentLang: /*lang*/ ctx[6],
    				onSelectService: /*selectService*/ ctx[7]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(serviceselection.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(serviceselection, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const serviceselection_changes = {};
    			if (dirty & /*lang*/ 64) serviceselection_changes.currentLang = /*lang*/ ctx[6];
    			serviceselection.$set(serviceselection_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(serviceselection.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(serviceselection.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(serviceselection, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$2.name,
    		type: "if",
    		source: "(193:2) {#if currentStep === 1}",
    		ctx
    	});

    	return block;
    }

    // (215:33) 
    function create_if_block_8(ctx) {
    	let div;
    	let loadingspinner;
    	let t0;
    	let p;

    	let t1_value = (/*lang*/ ctx[6] === 'hu'
    	? 'Foglalás feldolgozása, kérjük várjon...'
    	: 'Processing booking, please wait...') + "";

    	let t1;
    	let current;

    	loadingspinner = new LoadingSpinner({
    			props: { size: "2rem", color: "var(--primary)" },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div = element("div");
    			create_component(loadingspinner.$$.fragment);
    			t0 = space();
    			p = element("p");
    			t1 = text(t1_value);
    			attr_dev(p, "class", "submitting-message svelte-1aye7jh");
    			add_location(p, file$5, 217, 14, 8811);
    			attr_dev(div, "class", "submitting-overlay svelte-1aye7jh");
    			add_location(div, file$5, 215, 12, 8696);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			mount_component(loadingspinner, div, null);
    			append_dev(div, t0);
    			append_dev(div, p);
    			append_dev(p, t1);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			if ((!current || dirty & /*lang*/ 64) && t1_value !== (t1_value = (/*lang*/ ctx[6] === 'hu'
    			? 'Foglalás feldolgozása, kérjük várjon...'
    			: 'Processing booking, please wait...') + "")) set_data_dev(t1, t1_value);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(loadingspinner.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(loadingspinner.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			destroy_component(loadingspinner);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_8.name,
    		type: "if",
    		source: "(215:33) ",
    		ctx
    	});

    	return block;
    }

    // (213:10) {#if submitError}
    function create_if_block_7(ctx) {
    	let p;
    	let t;

    	const block = {
    		c: function create() {
    			p = element("p");
    			t = text(/*submitError*/ ctx[5]);
    			attr_dev(p, "class", "error-message svelte-1aye7jh");
    			add_location(p, file$5, 213, 12, 8607);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p, anchor);
    			append_dev(p, t);
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*submitError*/ 32) set_data_dev(t, /*submitError*/ ctx[5]);
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_7.name,
    		type: "if",
    		source: "(213:10) {#if submitError}",
    		ctx
    	});

    	return block;
    }

    // (242:54) 
    function create_if_block_6$1(ctx) {
    	let tireserviceform;
    	let current;

    	tireserviceform = new TireServiceForm({
    			props: { content, currentLang: /*lang*/ ctx[6] },
    			$$inline: true
    		});

    	tireserviceform.$on("bookingComplete", /*handleBookingComplete*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(tireserviceform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(tireserviceform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const tireserviceform_changes = {};
    			if (dirty & /*lang*/ 64) tireserviceform_changes.currentLang = /*lang*/ ctx[6];
    			tireserviceform.$set(tireserviceform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(tireserviceform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(tireserviceform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(tireserviceform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6$1.name,
    		type: "if",
    		source: "(242:54) ",
    		ctx
    	});

    	return block;
    }

    // (236:54) 
    function create_if_block_5$1(ctx) {
    	let autoserviceform;
    	let current;

    	autoserviceform = new AutoServiceForm({
    			props: { content, currentLang: /*lang*/ ctx[6] },
    			$$inline: true
    		});

    	autoserviceform.$on("bookingComplete", /*handleBookingComplete*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(autoserviceform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(autoserviceform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const autoserviceform_changes = {};
    			if (dirty & /*lang*/ 64) autoserviceform_changes.currentLang = /*lang*/ ctx[6];
    			autoserviceform.$set(autoserviceform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(autoserviceform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(autoserviceform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(autoserviceform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5$1.name,
    		type: "if",
    		source: "(236:54) ",
    		ctx
    	});

    	return block;
    }

    // (230:50) 
    function create_if_block_4$1(ctx) {
    	let carwashform;
    	let current;

    	carwashform = new CarWashForm({
    			props: { content, currentLang: /*lang*/ ctx[6] },
    			$$inline: true
    		});

    	carwashform.$on("bookingComplete", /*handleBookingComplete*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(carwashform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(carwashform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const carwashform_changes = {};
    			if (dirty & /*lang*/ 64) carwashform_changes.currentLang = /*lang*/ ctx[6];
    			carwashform.$set(carwashform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(carwashform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(carwashform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(carwashform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4$1.name,
    		type: "if",
    		source: "(230:50) ",
    		ctx
    	});

    	return block;
    }

    // (224:10) {#if selectedService === 'airportParking'}
    function create_if_block_3$1(ctx) {
    	let airportparkingform;
    	let current;

    	airportparkingform = new AirportParkingForm({
    			props: { content, currentLang: /*lang*/ ctx[6] },
    			$$inline: true
    		});

    	airportparkingform.$on("bookingComplete", /*handleBookingComplete*/ ctx[9]);

    	const block = {
    		c: function create() {
    			create_component(airportparkingform.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(airportparkingform, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const airportparkingform_changes = {};
    			if (dirty & /*lang*/ 64) airportparkingform_changes.currentLang = /*lang*/ ctx[6];
    			airportparkingform.$set(airportparkingform_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(airportparkingform.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(airportparkingform.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(airportparkingform, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3$1.name,
    		type: "if",
    		source: "(224:10) {#if selectedService === 'airportParking'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$5(ctx) {
    	let section;
    	let div;
    	let h1;
    	let t0_value = content[/*lang*/ ctx[6]].title + "";
    	let t0;
    	let t1;
    	let p;
    	let t2_value = content[/*lang*/ ctx[6]].subtitle + "";
    	let t2;
    	let t3;
    	let current_block_type_index;
    	let if_block;
    	let if_block_anchor;
    	let current;
    	const if_block_creators = [create_if_block$4, create_else_block$2];
    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (!/*showConfirmation*/ ctx[2]) return 0;
    		return 1;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			if_block.c();
    			if_block_anchor = empty();
    			attr_dev(h1, "class", "svelte-1aye7jh");
    			add_location(h1, file$5, 186, 4, 7699);
    			attr_dev(p, "class", "svelte-1aye7jh");
    			add_location(p, file$5, 187, 4, 7734);
    			attr_dev(div, "class", "container");
    			add_location(div, file$5, 185, 2, 7671);
    			attr_dev(section, "class", "booking-hero svelte-1aye7jh");
    			add_location(section, file$5, 184, 0, 7638);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div);
    			append_dev(div, h1);
    			append_dev(h1, t0);
    			append_dev(div, t1);
    			append_dev(div, p);
    			append_dev(p, t2);
    			insert_dev(target, t3, anchor);
    			if_blocks[current_block_type_index].m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if ((!current || dirty & /*lang*/ 64) && t0_value !== (t0_value = content[/*lang*/ ctx[6]].title + "")) set_data_dev(t0, t0_value);
    			if ((!current || dirty & /*lang*/ 64) && t2_value !== (t2_value = content[/*lang*/ ctx[6]].subtitle + "")) set_data_dev(t2, t2_value);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(if_block_anchor.parentNode, if_block_anchor);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(if_block);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(if_block);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching) detach_dev(t3);
    			if_blocks[current_block_type_index].d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$5.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    const backendApiUrl = 'https://zima-auto-backend.fly.dev/api/send-booking-emails';

    function instance$5($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Booking', slots, []);
    	let currentStep = 1;
    	let selectedService = null;
    	let showConfirmation = false;
    	let bookingDetails = {}; // Stores data for confirmation display
    	let isSubmitting = false; // Indicates if backend submission is in progress
    	let submitError = null; // Stores error message from backend submission
    	let submitSuccess = false; // Indicates successful backend submission
    	let lang = 'hu'; // Local state for current language

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		$$invalidate(6, lang = value);
    	});

    	// Handle service selection (Step 1 -> Step 2)
    	function selectService(service) {
    		$$invalidate(1, selectedService = service);
    		$$invalidate(0, currentStep = 2);

    		// Reset submission state and messages when moving to form
    		$$invalidate(5, submitError = null);

    		submitSuccess = false;
    		$$invalidate(4, isSubmitting = false); // Ensure submitting state is false when starting a new form

    		// Scroll to the form section for better UX
    		setTimeout(
    			() => {
    				const bookingFormSection = document.querySelector('.booking-form-section');

    				if (bookingFormSection) {
    					// Scroll to the top of the form section, offset slightly
    					window.scrollTo({
    						top: bookingFormSection.offsetTop - 100,
    						behavior: 'smooth'
    					});
    				}
    			},
    			50
    		); // Small delay to allow DOM to update
    	}

    	// Go back to service selection (Step 2 -> Step 1)
    	function goBack() {
    		$$invalidate(0, currentStep = 1);
    		$$invalidate(1, selectedService = null); // Reset selected service when going back

    		// Clear submission state and messages
    		$$invalidate(5, submitError = null);

    		submitSuccess = false;
    		$$invalidate(4, isSubmitting = false); // Ensure submitting state is false when going back

    		// Scroll back to service selection section
    		setTimeout(
    			() => {
    				const serviceSelectionSection = document.querySelector('.service-selection-section');

    				if (serviceSelectionSection) {
    					window.scrollTo({
    						top: serviceSelectionSection.offsetTop - 100,
    						behavior: 'smooth'
    					});
    				}
    			},
    			50
    		); // Small delay
    	}

    	// Handle form submission result from individual service forms
    	// This function receives the validated form data from the child components
    	async function handleBookingComplete(event) {
    		const formData = event.detail; // Data dispatched from the child form component
    		console.log('Booking.svelte received bookingComplete event with data:', formData);
    		$$invalidate(4, isSubmitting = true); // Start submission process
    		$$invalidate(5, submitError = null); // Clear previous errors
    		submitSuccess = false; // Reset success state
    		$$invalidate(2, showConfirmation = false); // Hide confirmation while submitting

    		try {
    			// Prepare data structure expected by the backend email endpoint
    			// Map fields from the received formData to the backend's expected structure
    			const emailData = {
    				service: formData.service, // Service type (e.g., 'carWash', 'airportParking')
    				customerName: formData.name, // Full name
    				// Access email/phone from the nested contact object
    				customerEmail: formData.contact?.email,
    				customerPhone: formData.contact?.phone,
    				date: formData.date, // Date (YYYY-MM-DD or date range string for parking)
    				time: formData.time || '', // Time (HH:MM or empty for parking)
    				// Fields specific to Airport Parking (may be undefined for other services)
    				days: formData.days || null,
    				licensePlate: formData.licensePlate || '', // License plate
    				carWashPackage: formData.carWashPackage || 'none', // Car wash package for parking
    				priceBreakdown: formData.priceBreakdown || null, // Price details for parking
    				totalPrice: formData.totalPrice || null, // Total price
    				// Fields specific to Auto/Tire Service (may be undefined for other services)
    				serviceType: formData.serviceType || '', // Specific type of auto/tire service
    				carModel: formData.carModel || '', // Car model
    				notes: formData.notes || '', // Additional notes
    				tireCount: formData.tireCount || null, // Number of tires for tire service
    				// Always include admin email (ensure this is correct)
    				adminEmail: 'ahmedhasimov@zima-auto.com'
    			};

    			console.log('Booking.svelte sending data to backend API:', emailData);

    			// Send data to your backend API endpoint
    			const response = await fetch(backendApiUrl, {
    				method: 'POST',
    				headers: { 'Content-Type': 'application/json' },
    				body: JSON.stringify(emailData)
    			});

    			// Parse the JSON response from the backend
    			const result = await response.json();

    			if (response.ok) {
    				// Backend reported success (status code 2xx)
    				console.log('Backend booking process reported successful:', result);

    				$$invalidate(3, bookingDetails = formData); // Store the original form data for the confirmation page
    				submitSuccess = true; // Set success state
    				$$invalidate(5, submitError = null); // Clear any previous error
    				$$invalidate(2, showConfirmation = true); // Show the confirmation page
    			} else {
    				// Backend reported an error (status code not 2xx)
    				console.error('Backend booking process reported failure:', response.status, result.message);

    				// Display the error message from the backend if available, otherwise a generic one
    				$$invalidate(5, submitError = result.message || (lang === 'hu'
    				? 'Hiba történt a foglalás feldolgozása során.'
    				: 'An error occurred during booking processing.'));

    				submitSuccess = false; // Ensure success state is false
    			}
    		} catch(error) {
    			// An error occurred during the fetch request itself (e.g., network error)
    			console.error('Error submitting booking request to backend:', error);

    			$$invalidate(5, submitError = lang === 'hu'
    			? 'Hiba történt a szerverhez való kapcsolódás során.'
    			: 'An error occurred while connecting to the server.');

    			submitSuccess = false; // Ensure success state is false
    		} finally {
    			// This block always runs after try/catch
    			$$invalidate(4, isSubmitting = false); // End submission process

    			// If submission was successful, scroll to top to show confirmation
    			if (submitSuccess) {
    				window.scrollTo({ top: 0, behavior: 'smooth' });
    			}
    		}
    	}

    	// Reset booking process to the initial state (Step 1)
    	function resetBooking() {
    		$$invalidate(1, selectedService = null);
    		$$invalidate(0, currentStep = 1);
    		$$invalidate(2, showConfirmation = false);
    		$$invalidate(5, submitError = null);
    		submitSuccess = false;
    		$$invalidate(4, isSubmitting = false); // Ensure submitting state is false
    		$$invalidate(3, bookingDetails = {}); // Clear previous booking details
    		window.scrollTo({ top: 0, behavior: 'smooth' }); // Scroll to top
    	}

    	// Scroll to top on mount
    	onMount(() => {
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1$1.warn(`<Booking> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		LoadingSpinner,
    		ServiceSelection,
    		AirportParkingForm,
    		CarWashForm,
    		AutoServiceForm,
    		TireServiceForm,
    		BookingConfirmation,
    		content,
    		currentStep,
    		selectedService,
    		showConfirmation,
    		bookingDetails,
    		isSubmitting,
    		submitError,
    		submitSuccess,
    		lang,
    		backendApiUrl,
    		selectService,
    		goBack,
    		handleBookingComplete,
    		resetBooking
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentStep' in $$props) $$invalidate(0, currentStep = $$props.currentStep);
    		if ('selectedService' in $$props) $$invalidate(1, selectedService = $$props.selectedService);
    		if ('showConfirmation' in $$props) $$invalidate(2, showConfirmation = $$props.showConfirmation);
    		if ('bookingDetails' in $$props) $$invalidate(3, bookingDetails = $$props.bookingDetails);
    		if ('isSubmitting' in $$props) $$invalidate(4, isSubmitting = $$props.isSubmitting);
    		if ('submitError' in $$props) $$invalidate(5, submitError = $$props.submitError);
    		if ('submitSuccess' in $$props) submitSuccess = $$props.submitSuccess;
    		if ('lang' in $$props) $$invalidate(6, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		currentStep,
    		selectedService,
    		showConfirmation,
    		bookingDetails,
    		isSubmitting,
    		submitError,
    		lang,
    		selectService,
    		goBack,
    		handleBookingComplete,
    		resetBooking
    	];
    }

    class Booking extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$5, create_fragment$5, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Booking",
    			options,
    			id: create_fragment$5.name
    		});
    	}
    }

    /* src/pages/Privacy.svelte generated by Svelte v3.59.2 */
    const file$4 = "src/pages/Privacy.svelte";

    // (87:6) {:else}
    function create_else_block$1(ctx) {
    	let p0;
    	let t1;
    	let ul0;
    	let li0;
    	let t3;
    	let li1;
    	let t5;
    	let p1;
    	let strong0;
    	let t7;
    	let t8;
    	let h20;
    	let t10;
    	let p2;
    	let t12;
    	let p3;
    	let strong1;
    	let t14;
    	let a0;
    	let t16;
    	let p4;
    	let strong2;
    	let t18;
    	let t19;
    	let p5;
    	let strong3;
    	let t21;
    	let t22;
    	let p6;
    	let strong4;
    	let t24;
    	let a1;
    	let t26;
    	let p7;
    	let strong5;
    	let t28;
    	let a2;
    	let t30;
    	let p8;
    	let strong6;
    	let t32;
    	let a3;
    	let t34;
    	let p9;
    	let strong7;
    	let t36;
    	let a4;
    	let t38;
    	let p10;
    	let strong8;
    	let t40;
    	let t41;
    	let p11;
    	let strong9;
    	let t43;
    	let t44;
    	let h21;
    	let t46;
    	let h30;
    	let t48;
    	let p12;
    	let strong10;
    	let t50;
    	let t51;
    	let p13;
    	let t53;
    	let p14;
    	let strong11;
    	let t55;
    	let t56;
    	let ul1;
    	let li2;
    	let t58;
    	let li3;
    	let t60;
    	let li4;
    	let t62;
    	let li5;
    	let t64;
    	let p15;
    	let strong12;
    	let t66;
    	let t67;
    	let p16;
    	let t69;
    	let h31;
    	let t71;
    	let p17;
    	let strong13;
    	let t73;
    	let t74;
    	let p18;
    	let t76;
    	let p19;
    	let t78;
    	let p20;
    	let t80;
    	let ul2;
    	let li6;
    	let strong14;
    	let t82;
    	let t83;
    	let h22;
    	let t85;
    	let p21;
    	let strong15;
    	let t87;
    	let t88;
    	let p22;
    	let t90;
    	let p23;
    	let t92;
    	let h23;
    	let t94;
    	let p24;
    	let strong16;
    	let t96;
    	let t97;
    	let p25;
    	let t99;
    	let ul3;
    	let li7;
    	let strong17;
    	let t101;
    	let t102;
    	let li8;
    	let strong18;
    	let t104;
    	let t105;
    	let li9;
    	let strong19;
    	let t107;
    	let t108;
    	let h24;
    	let t110;
    	let p26;
    	let strong20;
    	let t112;
    	let t113;
    	let p27;
    	let t115;
    	let ul4;
    	let li10;
    	let strong21;
    	let t117;
    	let t118;
    	let h25;
    	let t120;
    	let p28;
    	let strong22;
    	let t122;
    	let t123;
    	let p29;
    	let t125;
    	let h26;
    	let t127;
    	let p30;
    	let strong23;
    	let t129;
    	let t130;
    	let p31;
    	let t132;
    	let p32;
    	let t134;
    	let h27;
    	let t136;
    	let p33;
    	let strong24;
    	let t138;
    	let t139;
    	let p34;
    	let t141;
    	let h28;
    	let t143;
    	let p35;
    	let strong25;
    	let t145;
    	let t146;
    	let p36;
    	let t148;
    	let h29;
    	let t150;
    	let p37;
    	let strong26;
    	let t152;
    	let t153;
    	let p38;
    	let t155;
    	let p39;
    	let t157;
    	let p40;
    	let t159;
    	let p41;
    	let t161;
    	let p42;
    	let strong27;
    	let t163;
    	let t164;
    	let p43;
    	let t166;
    	let p44;
    	let strong28;
    	let t168;
    	let t169;
    	let p45;
    	let t171;
    	let h210;
    	let t173;
    	let p46;
    	let t175;
    	let h211;
    	let t177;
    	let p47;
    	let strong29;
    	let t179;
    	let t180;
    	let p48;
    	let t182;
    	let h212;
    	let t184;
    	let p49;
    	let t186;
    	let p50;
    	let t187;
    	let br0;
    	let t188;
    	let br1;
    	let t189;
    	let br2;
    	let t190;
    	let t191;
    	let h213;
    	let t193;
    	let p51;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "This privacy notice for Zima Auto Kft. ('we', 'us', or 'our'), describes how and why we might collect, store, use, and/or share ('process') your information when you use our services ('Services'), such as when you:";
    			t1 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			li0.textContent = "Visit our website at http://www.zima-auto.com, or any website of ours that links to this privacy notice";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Engage with us in other related ways, including any sales, marketing, or events";
    			t5 = space();
    			p1 = element("p");
    			strong0 = element("strong");
    			strong0.textContent = "Questions or concerns?";
    			t7 = text(" Reading this privacy notice will help you understand your privacy rights and choices. If you do not agree with our policies and practices, please do not use our Services. If you still have any questions or concerns, please contact us at info@zima-auto.com.");
    			t8 = space();
    			h20 = element("h2");
    			h20.textContent = "SUMMARY OF KEY POINTS";
    			t10 = space();
    			p2 = element("p");
    			p2.textContent = "This summary provides key points from our privacy notice, but you can find out more details about any of these topics by clicking the link following each key point or by using our table of contents below to find the section you are looking for.";
    			t12 = space();
    			p3 = element("p");
    			strong1 = element("strong");
    			strong1.textContent = "What personal information do we process?";
    			t14 = text(" When you visit, use, or navigate our Services, we may process personal information depending on how you interact with us and the Services, the choices you make, and the products and features you use. ");
    			a0 = element("a");
    			a0.textContent = "Learn more about personal information you disclose to us.";
    			t16 = space();
    			p4 = element("p");
    			strong2 = element("strong");
    			strong2.textContent = "Do we process any sensitive personal information?";
    			t18 = text(" We do not process sensitive personal information.");
    			t19 = space();
    			p5 = element("p");
    			strong3 = element("strong");
    			strong3.textContent = "Do we receive any information from third parties?";
    			t21 = text(" We do not receive any information from third parties.");
    			t22 = space();
    			p6 = element("p");
    			strong4 = element("strong");
    			strong4.textContent = "How do we process your information?";
    			t24 = text(" We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent. We process your information only when we have a valid legal reason to do so. ");
    			a1 = element("a");
    			a1.textContent = "Learn more about how we process your information.";
    			t26 = space();
    			p7 = element("p");
    			strong5 = element("strong");
    			strong5.textContent = "In what situations and with which parties do we share personal information?";
    			t28 = text(" We may share information in specific situations and with specific third parties. ");
    			a2 = element("a");
    			a2.textContent = "Learn more about when and with whom we share your personal information.";
    			t30 = space();
    			p8 = element("p");
    			strong6 = element("strong");
    			strong6.textContent = "How do we keep your information safe?";
    			t32 = text(" We have organisational and technical processes and procedures in place to protect your personal information. However, no electronic transmission over the internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorised third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. ");
    			a3 = element("a");
    			a3.textContent = "Learn more about how we keep your information safe.";
    			t34 = space();
    			p9 = element("p");
    			strong7 = element("strong");
    			strong7.textContent = "What are your rights?";
    			t36 = text(" Depending on where you are located geographically, the applicable privacy law may mean you have certain rights regarding your personal information. ");
    			a4 = element("a");
    			a4.textContent = "Learn more about your privacy rights.";
    			t38 = space();
    			p10 = element("p");
    			strong8 = element("strong");
    			strong8.textContent = "How do you exercise your rights?";
    			t40 = text(" The easiest way to exercise your rights is by contacting us. We will consider and act upon any request in accordance with applicable data protection laws.");
    			t41 = space();
    			p11 = element("p");
    			strong9 = element("strong");
    			strong9.textContent = "Want to learn more about what we do with any information we collect?";
    			t43 = text(" Review the privacy notice in full.");
    			t44 = space();
    			h21 = element("h2");
    			h21.textContent = "1. WHAT INFORMATION DO WE COLLECT?";
    			t46 = space();
    			h30 = element("h3");
    			h30.textContent = "Personal information you disclose to us";
    			t48 = space();
    			p12 = element("p");
    			strong10 = element("strong");
    			strong10.textContent = "In Short:";
    			t50 = text(" We collect personal information that you provide to us.");
    			t51 = space();
    			p13 = element("p");
    			p13.textContent = "We collect personal information that you voluntarily provide to us when you express an interest in obtaining information about us or our products and Services, when you participate in activities on the Services, or otherwise when you contact us.";
    			t53 = space();
    			p14 = element("p");
    			strong11 = element("strong");
    			strong11.textContent = "Personal Information Provided by You.";
    			t55 = text(" The personal information that we collect depends on the context of your interactions with us and the Services, the choices you make, and the products and features you use. The personal information we collect may include the following:");
    			t56 = space();
    			ul1 = element("ul");
    			li2 = element("li");
    			li2.textContent = "names";
    			t58 = space();
    			li3 = element("li");
    			li3.textContent = "phone numbers";
    			t60 = space();
    			li4 = element("li");
    			li4.textContent = "email addresses";
    			t62 = space();
    			li5 = element("li");
    			li5.textContent = "contact preferences";
    			t64 = space();
    			p15 = element("p");
    			strong12 = element("strong");
    			strong12.textContent = "Sensitive Information.";
    			t66 = text(" We do not process sensitive information.");
    			t67 = space();
    			p16 = element("p");
    			p16.textContent = "All personal information that you provide to us must be true, complete, and accurate, and you must notify us of any changes to such personal information.";
    			t69 = space();
    			h31 = element("h3");
    			h31.textContent = "Information automatically collected";
    			t71 = space();
    			p17 = element("p");
    			strong13 = element("strong");
    			strong13.textContent = "In Short:";
    			t73 = text(" Some information — such as your Internet Protocol (IP) address and/or browser and device characteristics — is collected automatically when you visit our Services.");
    			t74 = space();
    			p18 = element("p");
    			p18.textContent = "We automatically collect certain information when you visit, use, or navigate the Services. This information does not reveal your specific identity (like your name or contact information) but may include device and usage information, such as your IP address, browser and device characteristics, operating system, language preferences, referring URLs, device name, country, location, information about how and when you use our Services, and other technical information. This information is primarily needed to maintain the security and operation of our Services, and for our internal analytics and reporting purposes.";
    			t76 = space();
    			p19 = element("p");
    			p19.textContent = "Like many businesses, we also collect information through cookies and similar technologies.";
    			t78 = space();
    			p20 = element("p");
    			p20.textContent = "The information we collect includes:";
    			t80 = space();
    			ul2 = element("ul");
    			li6 = element("li");
    			strong14 = element("strong");
    			strong14.textContent = "Log and Usage Data.";
    			t82 = text(" Log and usage data is service-related, diagnostic, usage, and performance information our servers automatically collect when you access or use our Services and which we record in log files. Depending on how you interact with us, this log data may include your IP address, device information, browser type, and settings and information about your activity in the Services (such as the date/time stamps associated with your usage, pages and files viewed, searches, and other actions you take such as which features you use), device event information (such as system activity, error reports (sometimes called 'crash dumps'), and hardware settings).");
    			t83 = space();
    			h22 = element("h2");
    			h22.textContent = "2. HOW DO WE PROCESS YOUR INFORMATION?";
    			t85 = space();
    			p21 = element("p");
    			strong15 = element("strong");
    			strong15.textContent = "In Short:";
    			t87 = text(" We process your information to provide, improve, and administer our Services, communicate with you, for security and fraud prevention, and to comply with law. We may also process your information for other purposes with your consent.");
    			t88 = space();
    			p22 = element("p");
    			p22.textContent = "We process your personal information for a variety of reasons, depending on how you interact with our Services, including:";
    			t90 = space();
    			p23 = element("p");
    			p23.textContent = "To save or protect an individual's vital interest. We may process your information when necessary to save or protect an individual's vital interest, such as to prevent harm.";
    			t92 = space();
    			h23 = element("h2");
    			h23.textContent = "3. WHAT LEGAL BASES DO WE RELY ON TO PROCESS YOUR INFORMATION?";
    			t94 = space();
    			p24 = element("p");
    			strong16 = element("strong");
    			strong16.textContent = "In Short:";
    			t96 = text(" We only process your personal information when we believe it is necessary and we have a valid legal reason (i.e. legal basis) to do so under applicable law, like with your consent, to comply with laws, to provide you with services to enter into or fulfil our contractual obligations, to protect your rights, or to fulfil our legitimate business interests.");
    			t97 = space();
    			p25 = element("p");
    			p25.textContent = "The General Data Protection Regulation (GDPR) and UK GDPR require us to explain the valid legal bases we rely on in order to process your personal information. As such, we may rely on the following legal bases to process your personal information:";
    			t99 = space();
    			ul3 = element("ul");
    			li7 = element("li");
    			strong17 = element("strong");
    			strong17.textContent = "Consent.";
    			t101 = text(" We may process your information if you have given us permission (i.e. consent) to use your personal information for a specific purpose. You can withdraw your consent at any time.");
    			t102 = space();
    			li8 = element("li");
    			strong18 = element("strong");
    			strong18.textContent = "Legal Obligations.";
    			t104 = text(" We may process your information where we believe it is necessary for compliance with our legal obligations, such as to cooperate with a law enforcement body or regulatory agency, exercise or defend our legal rights, or disclose your information as evidence in litigation in which we are involved.");
    			t105 = space();
    			li9 = element("li");
    			strong19 = element("strong");
    			strong19.textContent = "Vital Interests.";
    			t107 = text(" We may process your information where we believe it is necessary to protect your vital interests or the vital interests of a third party, such as situations involving potential threats to the safety of any person.");
    			t108 = space();
    			h24 = element("h2");
    			h24.textContent = "4. WHEN AND WITH WHOM DO WE SHARE YOUR PERSONAL INFORMATION?";
    			t110 = space();
    			p26 = element("p");
    			strong20 = element("strong");
    			strong20.textContent = "In Short:";
    			t112 = text(" We may share information in specific situations described in this section and/or with the following third parties.");
    			t113 = space();
    			p27 = element("p");
    			p27.textContent = "We may need to share your personal information in the following situations:";
    			t115 = space();
    			ul4 = element("ul");
    			li10 = element("li");
    			strong21 = element("strong");
    			strong21.textContent = "Business Transfers.";
    			t117 = text(" We may share or transfer your information in connection with, or during negotiations of, any merger, sale of company assets, financing, or acquisition of all or a portion of our business to another company.");
    			t118 = space();
    			h25 = element("h2");
    			h25.textContent = "5. DO WE USE COOKIES AND OTHER TRACKING TECHNOLOGIES?";
    			t120 = space();
    			p28 = element("p");
    			strong22 = element("strong");
    			strong22.textContent = "In Short:";
    			t122 = text(" We may use cookies and other tracking technologies to collect and store your information.");
    			t123 = space();
    			p29 = element("p");
    			p29.textContent = "We may use cookies and similar tracking technologies (like web beacons and pixels) to access or store information. Specific information about how we use such technologies and how you can refuse certain cookies is set out in our Cookie Notice.";
    			t125 = space();
    			h26 = element("h2");
    			h26.textContent = "6. HOW LONG DO WE KEEP YOUR INFORMATION?";
    			t127 = space();
    			p30 = element("p");
    			strong23 = element("strong");
    			strong23.textContent = "In Short:";
    			t129 = text(" We keep your information for as long as necessary to fulfil the purposes outlined in this privacy notice unless otherwise required by law.");
    			t130 = space();
    			p31 = element("p");
    			p31.textContent = "We will only keep your personal information for as long as it is necessary for the purposes set out in this privacy notice, unless a longer retention period is required or permitted by law (such as tax, accounting, or other legal requirements).";
    			t132 = space();
    			p32 = element("p");
    			p32.textContent = "When we have no ongoing legitimate business need to process your personal information, we will either delete or anonymise such information, or, if this is not possible (for example, because your personal information has been stored in backup archives), then we will securely store your personal information and isolate it from any further processing until deletion is possible.";
    			t134 = space();
    			h27 = element("h2");
    			h27.textContent = "7. HOW DO WE KEEP YOUR INFORMATION SAFE?";
    			t136 = space();
    			p33 = element("p");
    			strong24 = element("strong");
    			strong24.textContent = "In Short:";
    			t138 = text(" We aim to protect your personal information through a system of organisational and technical security measures.");
    			t139 = space();
    			p34 = element("p");
    			p34.textContent = "We have implemented appropriate and reasonable technical and organisational security measures designed to protect the security of any personal information we process. However, despite our safeguards and efforts to secure your information, no electronic transmission over the Internet or information storage technology can be guaranteed to be 100% secure, so we cannot promise or guarantee that hackers, cybercriminals, or other unauthorised third parties will not be able to defeat our security and improperly collect, access, steal, or modify your information. Although we will do our best to protect your personal information, transmission of personal information to and from our Services is at your own risk. You should only access the Services within a secure environment.";
    			t141 = space();
    			h28 = element("h2");
    			h28.textContent = "8. DO WE COLLECT INFORMATION FROM MINORS?";
    			t143 = space();
    			p35 = element("p");
    			strong25 = element("strong");
    			strong25.textContent = "In Short:";
    			t145 = text(" We do not knowingly collect data from or market to children under 18 years of age.");
    			t146 = space();
    			p36 = element("p");
    			p36.textContent = "We do not knowingly solicit data from or market to children under 18 years of age. By using the Services, you represent that you are at least 18 or that you are the parent or guardian of such a minor and consent to such minor dependent's use of the Services. If we learn that personal information from users less than 18 years of age has been collected, we will deactivate the account and take reasonable measures to promptly delete such data from our records. If you become aware of any data we may have collected from children under age 18, please contact us at info@zima-auto.com.";
    			t148 = space();
    			h29 = element("h2");
    			h29.textContent = "9. WHAT ARE YOUR PRIVACY RIGHTS?";
    			t150 = space();
    			p37 = element("p");
    			strong26 = element("strong");
    			strong26.textContent = "In Short:";
    			t152 = text(" In some regions, such as the European Economic Area (EEA), United Kingdom (UK), and Switzerland, you have rights that allow you greater access to and control over your personal information. You may review, change, or terminate your account at any time.");
    			t153 = space();
    			p38 = element("p");
    			p38.textContent = "In some regions (like the EEA, UK, and Switzerland), you have certain rights under applicable data protection laws. These may include the right (i) to request access and obtain a copy of your personal information, (ii) to request rectification or erasure; (iii) to restrict the processing of your personal information; (iv) if applicable, to data portability; and (v) not to be subject to automated decision-making. In certain circumstances, you may also have the right to object to the processing of your personal information. You can make such a request by contacting us by using the contact details provided in the section 'HOW CAN YOU CONTACT US ABOUT THIS NOTICE?' below.";
    			t155 = space();
    			p39 = element("p");
    			p39.textContent = "We will consider and act upon any request in accordance with applicable data protection laws.";
    			t157 = space();
    			p40 = element("p");
    			p40.textContent = "If you are located in the EEA or UK and you believe we are unlawfully processing your personal information, you also have the right to complain to your Member State data protection authority or UK data protection authority.";
    			t159 = space();
    			p41 = element("p");
    			p41.textContent = "If you are located in Switzerland, you may contact the Federal Data Protection and Information Commissioner.";
    			t161 = space();
    			p42 = element("p");
    			strong27 = element("strong");
    			strong27.textContent = "Withdrawing your consent:";
    			t163 = text(" If we are relying on your consent to process your personal information, you have the right to withdraw your consent at any time. You can withdraw your consent at any time by contacting us by using the contact details provided in the section 'HOW CAN YOU CONTACT US ABOUT THIS NOTICE?' below.");
    			t164 = space();
    			p43 = element("p");
    			p43.textContent = "However, please note that this will not affect the lawfulness of the processing before its withdrawal nor, will it affect the processing of your personal information conducted in reliance on lawful processing grounds other than consent.";
    			t166 = space();
    			p44 = element("p");
    			strong28 = element("strong");
    			strong28.textContent = "Cookies and similar technologies:";
    			t168 = text(" Most Web browsers are set to accept cookies by default. If you prefer, you can usually choose to set your browser to remove cookies and to reject cookies. If you choose to remove cookies or reject cookies, this could affect certain features or services of our Services.");
    			t169 = space();
    			p45 = element("p");
    			p45.textContent = "If you have questions or comments about your privacy rights, you may email us at info@zima-auto.com.";
    			t171 = space();
    			h210 = element("h2");
    			h210.textContent = "10. CONTROLS FOR DO-NOT-TRACK FEATURES";
    			t173 = space();
    			p46 = element("p");
    			p46.textContent = "Most web browsers and some mobile operating systems and mobile applications include a Do-Not-Track ('DNT') feature or setting you can activate to signal your privacy preference not to have data about your online browsing activities monitored and collected. At this stage no uniform technology standard for recognising and implementing DNT signals has been finalised. As such, we do not currently respond to DNT browser signals or any other mechanism that automatically communicates your choice not to be tracked online. If a standard for online tracking is adopted that we must follow in the future, we will inform you about that practice in a revised version of this privacy notice.";
    			t175 = space();
    			h211 = element("h2");
    			h211.textContent = "11. DO WE MAKE UPDATES TO THIS NOTICE?";
    			t177 = space();
    			p47 = element("p");
    			strong29 = element("strong");
    			strong29.textContent = "In Short:";
    			t179 = text(" Yes, we will update this notice as necessary to stay compliant with relevant laws.");
    			t180 = space();
    			p48 = element("p");
    			p48.textContent = "We may update this privacy notice from time to time. The updated version will be indicated by an updated 'Revised' date and the updated version will be effective as soon as it is accessible. If we make material changes to this privacy notice, we may notify you either by prominently posting a notice of such changes or by directly sending you a notification. We encourage you to review this privacy notice frequently to be informed of how we are protecting your information.";
    			t182 = space();
    			h212 = element("h2");
    			h212.textContent = "12. HOW CAN YOU CONTACT US ABOUT THIS NOTICE?";
    			t184 = space();
    			p49 = element("p");
    			p49.textContent = "If you have questions or comments about this notice, you may contact us by email at info@zima-auto.com or by post at:";
    			t186 = space();
    			p50 = element("p");
    			t187 = text("Zima Auto Kft.");
    			br0 = element("br");
    			t188 = text("\n        Vecsés Széchényi utca 62 mellett");
    			br1 = element("br");
    			t189 = text("\n        Hrsz 0182/55");
    			br2 = element("br");
    			t190 = text("\n        2220 Hungary");
    			t191 = space();
    			h213 = element("h2");
    			h213.textContent = "13. HOW CAN YOU REVIEW, UPDATE, OR DELETE THE DATA WE COLLECT FROM YOU?";
    			t193 = space();
    			p51 = element("p");
    			p51.textContent = "Based on the applicable laws of your country, you may have the right to request access to the personal information we collect from you, change that information, or delete it. To request to review, update, or delete your personal information, please contact us at info@zima-auto.com.";
    			attr_dev(p0, "class", "svelte-9h9724");
    			add_location(p0, file$4, 88, 8, 7919);
    			attr_dev(li0, "class", "svelte-9h9724");
    			add_location(li0, file$4, 91, 10, 8165);
    			attr_dev(li1, "class", "svelte-9h9724");
    			add_location(li1, file$4, 92, 10, 8288);
    			attr_dev(ul0, "class", "svelte-9h9724");
    			add_location(ul0, file$4, 90, 8, 8150);
    			add_location(strong0, file$4, 95, 11, 8403);
    			attr_dev(p1, "class", "svelte-9h9724");
    			add_location(p1, file$4, 95, 8, 8400);
    			attr_dev(h20, "class", "svelte-9h9724");
    			add_location(h20, file$4, 97, 8, 8713);
    			attr_dev(p2, "class", "svelte-9h9724");
    			add_location(p2, file$4, 99, 8, 8753);
    			add_location(strong1, file$4, 101, 11, 9017);
    			attr_dev(a0, "href", "#section-1");
    			attr_dev(a0, "class", "svelte-9h9724");
    			add_location(a0, file$4, 101, 269, 9275);
    			attr_dev(p3, "class", "svelte-9h9724");
    			add_location(p3, file$4, 101, 8, 9014);
    			add_location(strong2, file$4, 103, 11, 9374);
    			attr_dev(p4, "class", "svelte-9h9724");
    			add_location(p4, file$4, 103, 8, 9371);
    			add_location(strong3, file$4, 105, 11, 9507);
    			attr_dev(p5, "class", "svelte-9h9724");
    			add_location(p5, file$4, 105, 8, 9504);
    			add_location(strong4, file$4, 107, 11, 9644);
    			attr_dev(a1, "href", "#section-2");
    			attr_dev(a1, "class", "svelte-9h9724");
    			add_location(a1, file$4, 107, 375, 10008);
    			attr_dev(p6, "class", "svelte-9h9724");
    			add_location(p6, file$4, 107, 8, 9641);
    			add_location(strong5, file$4, 109, 11, 10099);
    			attr_dev(a2, "href", "#section-4");
    			attr_dev(a2, "class", "svelte-9h9724");
    			add_location(a2, file$4, 109, 185, 10273);
    			attr_dev(p7, "class", "svelte-9h9724");
    			add_location(p7, file$4, 109, 8, 10096);
    			add_location(strong6, file$4, 111, 11, 10386);
    			attr_dev(a3, "href", "#section-7");
    			attr_dev(a3, "class", "svelte-9h9724");
    			add_location(a3, file$4, 111, 507, 10882);
    			attr_dev(p8, "class", "svelte-9h9724");
    			add_location(p8, file$4, 111, 8, 10383);
    			add_location(strong7, file$4, 113, 11, 10975);
    			attr_dev(a4, "href", "#section-9");
    			attr_dev(a4, "class", "svelte-9h9724");
    			add_location(a4, file$4, 113, 198, 11162);
    			attr_dev(p9, "class", "svelte-9h9724");
    			add_location(p9, file$4, 113, 8, 10972);
    			add_location(strong8, file$4, 115, 11, 11241);
    			attr_dev(p10, "class", "svelte-9h9724");
    			add_location(p10, file$4, 115, 8, 11238);
    			add_location(strong9, file$4, 117, 11, 11462);
    			attr_dev(p11, "class", "svelte-9h9724");
    			add_location(p11, file$4, 117, 8, 11459);
    			attr_dev(h21, "id", "section-1");
    			attr_dev(h21, "class", "svelte-9h9724");
    			add_location(h21, file$4, 119, 8, 11596);
    			attr_dev(h30, "class", "svelte-9h9724");
    			add_location(h30, file$4, 121, 8, 11664);
    			add_location(strong10, file$4, 123, 11, 11725);
    			attr_dev(p12, "class", "svelte-9h9724");
    			add_location(p12, file$4, 123, 8, 11722);
    			attr_dev(p13, "class", "svelte-9h9724");
    			add_location(p13, file$4, 125, 8, 11821);
    			add_location(strong11, file$4, 127, 11, 12086);
    			attr_dev(p14, "class", "svelte-9h9724");
    			add_location(p14, file$4, 127, 8, 12083);
    			attr_dev(li2, "class", "svelte-9h9724");
    			add_location(li2, file$4, 130, 10, 12404);
    			attr_dev(li3, "class", "svelte-9h9724");
    			add_location(li3, file$4, 131, 10, 12429);
    			attr_dev(li4, "class", "svelte-9h9724");
    			add_location(li4, file$4, 132, 10, 12462);
    			attr_dev(li5, "class", "svelte-9h9724");
    			add_location(li5, file$4, 133, 10, 12497);
    			attr_dev(ul1, "class", "svelte-9h9724");
    			add_location(ul1, file$4, 129, 8, 12389);
    			add_location(strong12, file$4, 136, 11, 12552);
    			attr_dev(p15, "class", "svelte-9h9724");
    			add_location(p15, file$4, 136, 8, 12549);
    			attr_dev(p16, "class", "svelte-9h9724");
    			add_location(p16, file$4, 138, 8, 12646);
    			attr_dev(h31, "class", "svelte-9h9724");
    			add_location(h31, file$4, 140, 8, 12816);
    			add_location(strong13, file$4, 142, 11, 12873);
    			attr_dev(p17, "class", "svelte-9h9724");
    			add_location(p17, file$4, 142, 8, 12870);
    			attr_dev(p18, "class", "svelte-9h9724");
    			add_location(p18, file$4, 144, 8, 13076);
    			attr_dev(p19, "class", "svelte-9h9724");
    			add_location(p19, file$4, 146, 8, 13709);
    			attr_dev(p20, "class", "svelte-9h9724");
    			add_location(p20, file$4, 148, 8, 13817);
    			add_location(strong14, file$4, 151, 14, 13889);
    			attr_dev(li6, "class", "svelte-9h9724");
    			add_location(li6, file$4, 151, 10, 13885);
    			attr_dev(ul2, "class", "svelte-9h9724");
    			add_location(ul2, file$4, 150, 8, 13870);
    			attr_dev(h22, "id", "section-2");
    			attr_dev(h22, "class", "svelte-9h9724");
    			add_location(h22, file$4, 154, 8, 14600);
    			add_location(strong15, file$4, 156, 11, 14675);
    			attr_dev(p21, "class", "svelte-9h9724");
    			add_location(p21, file$4, 156, 8, 14672);
    			attr_dev(p22, "class", "svelte-9h9724");
    			add_location(p22, file$4, 158, 8, 14949);
    			attr_dev(p23, "class", "svelte-9h9724");
    			add_location(p23, file$4, 160, 8, 15088);
    			attr_dev(h23, "id", "section-3");
    			attr_dev(h23, "class", "svelte-9h9724");
    			add_location(h23, file$4, 162, 8, 15278);
    			add_location(strong16, file$4, 164, 11, 15377);
    			attr_dev(p24, "class", "svelte-9h9724");
    			add_location(p24, file$4, 164, 8, 15374);
    			attr_dev(p25, "class", "svelte-9h9724");
    			add_location(p25, file$4, 166, 8, 15773);
    			add_location(strong17, file$4, 169, 14, 16056);
    			attr_dev(li7, "class", "svelte-9h9724");
    			add_location(li7, file$4, 169, 10, 16052);
    			add_location(strong18, file$4, 170, 14, 16280);
    			attr_dev(li8, "class", "svelte-9h9724");
    			add_location(li8, file$4, 170, 10, 16276);
    			add_location(strong19, file$4, 171, 14, 16632);
    			attr_dev(li9, "class", "svelte-9h9724");
    			add_location(li9, file$4, 171, 10, 16628);
    			attr_dev(ul3, "class", "svelte-9h9724");
    			add_location(ul3, file$4, 168, 8, 16037);
    			attr_dev(h24, "id", "section-4");
    			attr_dev(h24, "class", "svelte-9h9724");
    			add_location(h24, file$4, 174, 8, 16908);
    			add_location(strong20, file$4, 176, 11, 17005);
    			attr_dev(p26, "class", "svelte-9h9724");
    			add_location(p26, file$4, 176, 8, 17002);
    			attr_dev(p27, "class", "svelte-9h9724");
    			add_location(p27, file$4, 178, 8, 17160);
    			add_location(strong21, file$4, 181, 14, 17271);
    			attr_dev(li10, "class", "svelte-9h9724");
    			add_location(li10, file$4, 181, 10, 17267);
    			attr_dev(ul4, "class", "svelte-9h9724");
    			add_location(ul4, file$4, 180, 8, 17252);
    			attr_dev(h25, "id", "section-5");
    			attr_dev(h25, "class", "svelte-9h9724");
    			add_location(h25, file$4, 184, 8, 17543);
    			add_location(strong22, file$4, 186, 11, 17633);
    			attr_dev(p28, "class", "svelte-9h9724");
    			add_location(p28, file$4, 186, 8, 17630);
    			attr_dev(p29, "class", "svelte-9h9724");
    			add_location(p29, file$4, 188, 8, 17763);
    			attr_dev(h26, "id", "section-6");
    			attr_dev(h26, "class", "svelte-9h9724");
    			add_location(h26, file$4, 190, 8, 18022);
    			add_location(strong23, file$4, 192, 11, 18099);
    			attr_dev(p30, "class", "svelte-9h9724");
    			add_location(p30, file$4, 192, 8, 18096);
    			attr_dev(p31, "class", "svelte-9h9724");
    			add_location(p31, file$4, 194, 8, 18278);
    			attr_dev(p32, "class", "svelte-9h9724");
    			add_location(p32, file$4, 196, 8, 18539);
    			attr_dev(h27, "id", "section-7");
    			attr_dev(h27, "class", "svelte-9h9724");
    			add_location(h27, file$4, 198, 8, 18933);
    			add_location(strong24, file$4, 200, 11, 19010);
    			attr_dev(p33, "class", "svelte-9h9724");
    			add_location(p33, file$4, 200, 8, 19007);
    			attr_dev(p34, "class", "svelte-9h9724");
    			add_location(p34, file$4, 202, 8, 19162);
    			attr_dev(h28, "id", "section-8");
    			attr_dev(h28, "class", "svelte-9h9724");
    			add_location(h28, file$4, 204, 8, 19955);
    			add_location(strong25, file$4, 206, 11, 20033);
    			attr_dev(p35, "class", "svelte-9h9724");
    			add_location(p35, file$4, 206, 8, 20030);
    			attr_dev(p36, "class", "svelte-9h9724");
    			add_location(p36, file$4, 208, 8, 20156);
    			attr_dev(h29, "id", "section-9");
    			attr_dev(h29, "class", "svelte-9h9724");
    			add_location(h29, file$4, 210, 8, 20756);
    			add_location(strong26, file$4, 212, 11, 20825);
    			attr_dev(p37, "class", "svelte-9h9724");
    			add_location(p37, file$4, 212, 8, 20822);
    			attr_dev(p38, "class", "svelte-9h9724");
    			add_location(p38, file$4, 214, 8, 21118);
    			attr_dev(p39, "class", "svelte-9h9724");
    			add_location(p39, file$4, 216, 8, 21811);
    			attr_dev(p40, "class", "svelte-9h9724");
    			add_location(p40, file$4, 218, 8, 21921);
    			attr_dev(p41, "class", "svelte-9h9724");
    			add_location(p41, file$4, 220, 8, 22161);
    			add_location(strong27, file$4, 222, 11, 22289);
    			attr_dev(p42, "class", "svelte-9h9724");
    			add_location(p42, file$4, 222, 8, 22286);
    			attr_dev(p43, "class", "svelte-9h9724");
    			add_location(p43, file$4, 224, 8, 22637);
    			add_location(strong28, file$4, 226, 11, 22893);
    			attr_dev(p44, "class", "svelte-9h9724");
    			add_location(p44, file$4, 226, 8, 22890);
    			attr_dev(p45, "class", "svelte-9h9724");
    			add_location(p45, file$4, 228, 8, 23227);
    			attr_dev(h210, "id", "section-10");
    			attr_dev(h210, "class", "svelte-9h9724");
    			add_location(h210, file$4, 230, 8, 23344);
    			attr_dev(p46, "class", "svelte-9h9724");
    			add_location(p46, file$4, 232, 8, 23417);
    			attr_dev(h211, "id", "section-11");
    			attr_dev(h211, "class", "svelte-9h9724");
    			add_location(h211, file$4, 234, 8, 24117);
    			add_location(strong29, file$4, 236, 11, 24193);
    			attr_dev(p47, "class", "svelte-9h9724");
    			add_location(p47, file$4, 236, 8, 24190);
    			attr_dev(p48, "class", "svelte-9h9724");
    			add_location(p48, file$4, 238, 8, 24316);
    			attr_dev(h212, "id", "section-12");
    			attr_dev(h212, "class", "svelte-9h9724");
    			add_location(h212, file$4, 240, 8, 24807);
    			attr_dev(p49, "class", "svelte-9h9724");
    			add_location(p49, file$4, 242, 8, 24887);
    			add_location(br0, file$4, 245, 22, 25047);
    			add_location(br1, file$4, 246, 40, 25092);
    			add_location(br2, file$4, 247, 20, 25117);
    			attr_dev(p50, "class", "svelte-9h9724");
    			add_location(p50, file$4, 244, 8, 25021);
    			attr_dev(h213, "id", "section-13");
    			attr_dev(h213, "class", "svelte-9h9724");
    			add_location(h213, file$4, 251, 8, 25165);
    			attr_dev(p51, "class", "svelte-9h9724");
    			add_location(p51, file$4, 253, 8, 25271);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul0, anchor);
    			append_dev(ul0, li0);
    			append_dev(ul0, t3);
    			append_dev(ul0, li1);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, strong0);
    			append_dev(p1, t7);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, h20, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, strong1);
    			append_dev(p3, t14);
    			append_dev(p3, a0);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, p4, anchor);
    			append_dev(p4, strong2);
    			append_dev(p4, t18);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, p5, anchor);
    			append_dev(p5, strong3);
    			append_dev(p5, t21);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, p6, anchor);
    			append_dev(p6, strong4);
    			append_dev(p6, t24);
    			append_dev(p6, a1);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, p7, anchor);
    			append_dev(p7, strong5);
    			append_dev(p7, t28);
    			append_dev(p7, a2);
    			insert_dev(target, t30, anchor);
    			insert_dev(target, p8, anchor);
    			append_dev(p8, strong6);
    			append_dev(p8, t32);
    			append_dev(p8, a3);
    			insert_dev(target, t34, anchor);
    			insert_dev(target, p9, anchor);
    			append_dev(p9, strong7);
    			append_dev(p9, t36);
    			append_dev(p9, a4);
    			insert_dev(target, t38, anchor);
    			insert_dev(target, p10, anchor);
    			append_dev(p10, strong8);
    			append_dev(p10, t40);
    			insert_dev(target, t41, anchor);
    			insert_dev(target, p11, anchor);
    			append_dev(p11, strong9);
    			append_dev(p11, t43);
    			insert_dev(target, t44, anchor);
    			insert_dev(target, h21, anchor);
    			insert_dev(target, t46, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t48, anchor);
    			insert_dev(target, p12, anchor);
    			append_dev(p12, strong10);
    			append_dev(p12, t50);
    			insert_dev(target, t51, anchor);
    			insert_dev(target, p13, anchor);
    			insert_dev(target, t53, anchor);
    			insert_dev(target, p14, anchor);
    			append_dev(p14, strong11);
    			append_dev(p14, t55);
    			insert_dev(target, t56, anchor);
    			insert_dev(target, ul1, anchor);
    			append_dev(ul1, li2);
    			append_dev(ul1, t58);
    			append_dev(ul1, li3);
    			append_dev(ul1, t60);
    			append_dev(ul1, li4);
    			append_dev(ul1, t62);
    			append_dev(ul1, li5);
    			insert_dev(target, t64, anchor);
    			insert_dev(target, p15, anchor);
    			append_dev(p15, strong12);
    			append_dev(p15, t66);
    			insert_dev(target, t67, anchor);
    			insert_dev(target, p16, anchor);
    			insert_dev(target, t69, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t71, anchor);
    			insert_dev(target, p17, anchor);
    			append_dev(p17, strong13);
    			append_dev(p17, t73);
    			insert_dev(target, t74, anchor);
    			insert_dev(target, p18, anchor);
    			insert_dev(target, t76, anchor);
    			insert_dev(target, p19, anchor);
    			insert_dev(target, t78, anchor);
    			insert_dev(target, p20, anchor);
    			insert_dev(target, t80, anchor);
    			insert_dev(target, ul2, anchor);
    			append_dev(ul2, li6);
    			append_dev(li6, strong14);
    			append_dev(li6, t82);
    			insert_dev(target, t83, anchor);
    			insert_dev(target, h22, anchor);
    			insert_dev(target, t85, anchor);
    			insert_dev(target, p21, anchor);
    			append_dev(p21, strong15);
    			append_dev(p21, t87);
    			insert_dev(target, t88, anchor);
    			insert_dev(target, p22, anchor);
    			insert_dev(target, t90, anchor);
    			insert_dev(target, p23, anchor);
    			insert_dev(target, t92, anchor);
    			insert_dev(target, h23, anchor);
    			insert_dev(target, t94, anchor);
    			insert_dev(target, p24, anchor);
    			append_dev(p24, strong16);
    			append_dev(p24, t96);
    			insert_dev(target, t97, anchor);
    			insert_dev(target, p25, anchor);
    			insert_dev(target, t99, anchor);
    			insert_dev(target, ul3, anchor);
    			append_dev(ul3, li7);
    			append_dev(li7, strong17);
    			append_dev(li7, t101);
    			append_dev(ul3, t102);
    			append_dev(ul3, li8);
    			append_dev(li8, strong18);
    			append_dev(li8, t104);
    			append_dev(ul3, t105);
    			append_dev(ul3, li9);
    			append_dev(li9, strong19);
    			append_dev(li9, t107);
    			insert_dev(target, t108, anchor);
    			insert_dev(target, h24, anchor);
    			insert_dev(target, t110, anchor);
    			insert_dev(target, p26, anchor);
    			append_dev(p26, strong20);
    			append_dev(p26, t112);
    			insert_dev(target, t113, anchor);
    			insert_dev(target, p27, anchor);
    			insert_dev(target, t115, anchor);
    			insert_dev(target, ul4, anchor);
    			append_dev(ul4, li10);
    			append_dev(li10, strong21);
    			append_dev(li10, t117);
    			insert_dev(target, t118, anchor);
    			insert_dev(target, h25, anchor);
    			insert_dev(target, t120, anchor);
    			insert_dev(target, p28, anchor);
    			append_dev(p28, strong22);
    			append_dev(p28, t122);
    			insert_dev(target, t123, anchor);
    			insert_dev(target, p29, anchor);
    			insert_dev(target, t125, anchor);
    			insert_dev(target, h26, anchor);
    			insert_dev(target, t127, anchor);
    			insert_dev(target, p30, anchor);
    			append_dev(p30, strong23);
    			append_dev(p30, t129);
    			insert_dev(target, t130, anchor);
    			insert_dev(target, p31, anchor);
    			insert_dev(target, t132, anchor);
    			insert_dev(target, p32, anchor);
    			insert_dev(target, t134, anchor);
    			insert_dev(target, h27, anchor);
    			insert_dev(target, t136, anchor);
    			insert_dev(target, p33, anchor);
    			append_dev(p33, strong24);
    			append_dev(p33, t138);
    			insert_dev(target, t139, anchor);
    			insert_dev(target, p34, anchor);
    			insert_dev(target, t141, anchor);
    			insert_dev(target, h28, anchor);
    			insert_dev(target, t143, anchor);
    			insert_dev(target, p35, anchor);
    			append_dev(p35, strong25);
    			append_dev(p35, t145);
    			insert_dev(target, t146, anchor);
    			insert_dev(target, p36, anchor);
    			insert_dev(target, t148, anchor);
    			insert_dev(target, h29, anchor);
    			insert_dev(target, t150, anchor);
    			insert_dev(target, p37, anchor);
    			append_dev(p37, strong26);
    			append_dev(p37, t152);
    			insert_dev(target, t153, anchor);
    			insert_dev(target, p38, anchor);
    			insert_dev(target, t155, anchor);
    			insert_dev(target, p39, anchor);
    			insert_dev(target, t157, anchor);
    			insert_dev(target, p40, anchor);
    			insert_dev(target, t159, anchor);
    			insert_dev(target, p41, anchor);
    			insert_dev(target, t161, anchor);
    			insert_dev(target, p42, anchor);
    			append_dev(p42, strong27);
    			append_dev(p42, t163);
    			insert_dev(target, t164, anchor);
    			insert_dev(target, p43, anchor);
    			insert_dev(target, t166, anchor);
    			insert_dev(target, p44, anchor);
    			append_dev(p44, strong28);
    			append_dev(p44, t168);
    			insert_dev(target, t169, anchor);
    			insert_dev(target, p45, anchor);
    			insert_dev(target, t171, anchor);
    			insert_dev(target, h210, anchor);
    			insert_dev(target, t173, anchor);
    			insert_dev(target, p46, anchor);
    			insert_dev(target, t175, anchor);
    			insert_dev(target, h211, anchor);
    			insert_dev(target, t177, anchor);
    			insert_dev(target, p47, anchor);
    			append_dev(p47, strong29);
    			append_dev(p47, t179);
    			insert_dev(target, t180, anchor);
    			insert_dev(target, p48, anchor);
    			insert_dev(target, t182, anchor);
    			insert_dev(target, h212, anchor);
    			insert_dev(target, t184, anchor);
    			insert_dev(target, p49, anchor);
    			insert_dev(target, t186, anchor);
    			insert_dev(target, p50, anchor);
    			append_dev(p50, t187);
    			append_dev(p50, br0);
    			append_dev(p50, t188);
    			append_dev(p50, br1);
    			append_dev(p50, t189);
    			append_dev(p50, br2);
    			append_dev(p50, t190);
    			insert_dev(target, t191, anchor);
    			insert_dev(target, h213, anchor);
    			insert_dev(target, t193, anchor);
    			insert_dev(target, p51, anchor);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(h20);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(p4);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(p5);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(p6);
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(p7);
    			if (detaching) detach_dev(t30);
    			if (detaching) detach_dev(p8);
    			if (detaching) detach_dev(t34);
    			if (detaching) detach_dev(p9);
    			if (detaching) detach_dev(t38);
    			if (detaching) detach_dev(p10);
    			if (detaching) detach_dev(t41);
    			if (detaching) detach_dev(p11);
    			if (detaching) detach_dev(t44);
    			if (detaching) detach_dev(h21);
    			if (detaching) detach_dev(t46);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t48);
    			if (detaching) detach_dev(p12);
    			if (detaching) detach_dev(t51);
    			if (detaching) detach_dev(p13);
    			if (detaching) detach_dev(t53);
    			if (detaching) detach_dev(p14);
    			if (detaching) detach_dev(t56);
    			if (detaching) detach_dev(ul1);
    			if (detaching) detach_dev(t64);
    			if (detaching) detach_dev(p15);
    			if (detaching) detach_dev(t67);
    			if (detaching) detach_dev(p16);
    			if (detaching) detach_dev(t69);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t71);
    			if (detaching) detach_dev(p17);
    			if (detaching) detach_dev(t74);
    			if (detaching) detach_dev(p18);
    			if (detaching) detach_dev(t76);
    			if (detaching) detach_dev(p19);
    			if (detaching) detach_dev(t78);
    			if (detaching) detach_dev(p20);
    			if (detaching) detach_dev(t80);
    			if (detaching) detach_dev(ul2);
    			if (detaching) detach_dev(t83);
    			if (detaching) detach_dev(h22);
    			if (detaching) detach_dev(t85);
    			if (detaching) detach_dev(p21);
    			if (detaching) detach_dev(t88);
    			if (detaching) detach_dev(p22);
    			if (detaching) detach_dev(t90);
    			if (detaching) detach_dev(p23);
    			if (detaching) detach_dev(t92);
    			if (detaching) detach_dev(h23);
    			if (detaching) detach_dev(t94);
    			if (detaching) detach_dev(p24);
    			if (detaching) detach_dev(t97);
    			if (detaching) detach_dev(p25);
    			if (detaching) detach_dev(t99);
    			if (detaching) detach_dev(ul3);
    			if (detaching) detach_dev(t108);
    			if (detaching) detach_dev(h24);
    			if (detaching) detach_dev(t110);
    			if (detaching) detach_dev(p26);
    			if (detaching) detach_dev(t113);
    			if (detaching) detach_dev(p27);
    			if (detaching) detach_dev(t115);
    			if (detaching) detach_dev(ul4);
    			if (detaching) detach_dev(t118);
    			if (detaching) detach_dev(h25);
    			if (detaching) detach_dev(t120);
    			if (detaching) detach_dev(p28);
    			if (detaching) detach_dev(t123);
    			if (detaching) detach_dev(p29);
    			if (detaching) detach_dev(t125);
    			if (detaching) detach_dev(h26);
    			if (detaching) detach_dev(t127);
    			if (detaching) detach_dev(p30);
    			if (detaching) detach_dev(t130);
    			if (detaching) detach_dev(p31);
    			if (detaching) detach_dev(t132);
    			if (detaching) detach_dev(p32);
    			if (detaching) detach_dev(t134);
    			if (detaching) detach_dev(h27);
    			if (detaching) detach_dev(t136);
    			if (detaching) detach_dev(p33);
    			if (detaching) detach_dev(t139);
    			if (detaching) detach_dev(p34);
    			if (detaching) detach_dev(t141);
    			if (detaching) detach_dev(h28);
    			if (detaching) detach_dev(t143);
    			if (detaching) detach_dev(p35);
    			if (detaching) detach_dev(t146);
    			if (detaching) detach_dev(p36);
    			if (detaching) detach_dev(t148);
    			if (detaching) detach_dev(h29);
    			if (detaching) detach_dev(t150);
    			if (detaching) detach_dev(p37);
    			if (detaching) detach_dev(t153);
    			if (detaching) detach_dev(p38);
    			if (detaching) detach_dev(t155);
    			if (detaching) detach_dev(p39);
    			if (detaching) detach_dev(t157);
    			if (detaching) detach_dev(p40);
    			if (detaching) detach_dev(t159);
    			if (detaching) detach_dev(p41);
    			if (detaching) detach_dev(t161);
    			if (detaching) detach_dev(p42);
    			if (detaching) detach_dev(t164);
    			if (detaching) detach_dev(p43);
    			if (detaching) detach_dev(t166);
    			if (detaching) detach_dev(p44);
    			if (detaching) detach_dev(t169);
    			if (detaching) detach_dev(p45);
    			if (detaching) detach_dev(t171);
    			if (detaching) detach_dev(h210);
    			if (detaching) detach_dev(t173);
    			if (detaching) detach_dev(p46);
    			if (detaching) detach_dev(t175);
    			if (detaching) detach_dev(h211);
    			if (detaching) detach_dev(t177);
    			if (detaching) detach_dev(p47);
    			if (detaching) detach_dev(t180);
    			if (detaching) detach_dev(p48);
    			if (detaching) detach_dev(t182);
    			if (detaching) detach_dev(h212);
    			if (detaching) detach_dev(t184);
    			if (detaching) detach_dev(p49);
    			if (detaching) detach_dev(t186);
    			if (detaching) detach_dev(p50);
    			if (detaching) detach_dev(t191);
    			if (detaching) detach_dev(h213);
    			if (detaching) detach_dev(t193);
    			if (detaching) detach_dev(p51);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block$1.name,
    		type: "else",
    		source: "(87:6) {:else}",
    		ctx
    	});

    	return block;
    }

    // (17:6) {#if $currentLang === 'hu'}
    function create_if_block$3(ctx) {
    	let p0;
    	let t1;
    	let ul0;
    	let li0;
    	let t3;
    	let li1;
    	let t5;
    	let p1;
    	let strong0;
    	let t7;
    	let t8;
    	let h20;
    	let t10;
    	let p2;
    	let t12;
    	let p3;
    	let strong1;
    	let t14;
    	let a0;
    	let t16;
    	let p4;
    	let strong2;
    	let t18;
    	let t19;
    	let p5;
    	let strong3;
    	let t21;
    	let t22;
    	let p6;
    	let strong4;
    	let t24;
    	let a1;
    	let t26;
    	let p7;
    	let strong5;
    	let t28;
    	let a2;
    	let t30;
    	let p8;
    	let strong6;
    	let t32;
    	let a3;
    	let t34;
    	let p9;
    	let strong7;
    	let t36;
    	let a4;
    	let t38;
    	let p10;
    	let strong8;
    	let t40;
    	let t41;
    	let p11;
    	let strong9;
    	let t43;
    	let t44;
    	let h21;
    	let t46;
    	let h30;
    	let t48;
    	let p12;
    	let strong10;
    	let t50;
    	let t51;
    	let p13;
    	let t53;
    	let p14;
    	let strong11;
    	let t55;
    	let t56;
    	let ul1;
    	let li2;
    	let t58;
    	let li3;
    	let t60;
    	let li4;
    	let t62;
    	let li5;
    	let t64;
    	let p15;
    	let strong12;
    	let t66;
    	let t67;
    	let p16;
    	let t69;
    	let h31;
    	let t71;
    	let p17;
    	let strong13;
    	let t73;
    	let t74;
    	let p18;
    	let t76;
    	let p19;
    	let t78;
    	let p20;
    	let t80;
    	let ul2;
    	let li6;
    	let strong14;
    	let t82;

    	const block = {
    		c: function create() {
    			p0 = element("p");
    			p0.textContent = "Ez az adatvédelmi nyilatkozat a Zima Auto Kft. („mi\", „minket\" vagy „miénk\") részéről leírja, hogy miként és miért gyűjthetjük, tárolhatjuk, használhatjuk és/vagy oszthatjuk meg („kezeljük\") az Ön adatait, amikor Ön a szolgáltatásainkat használja („Szolgáltatások\"), például amikor:";
    			t1 = space();
    			ul0 = element("ul");
    			li0 = element("li");
    			li0.textContent = "Meglátogatja weboldalunkat a http://www.zima-auto.com címen, vagy bármely más weboldalunkat, amely erre az adatvédelmi nyilatkozatra hivatkozik";
    			t3 = space();
    			li1 = element("li");
    			li1.textContent = "Más módon lép kapcsolatba velünk, beleértve bármilyen értékesítést, marketinget vagy eseményeket";
    			t5 = space();
    			p1 = element("p");
    			strong0 = element("strong");
    			strong0.textContent = "Kérdései vagy aggályai vannak?";
    			t7 = text(" Az adatvédelmi nyilatkozat elolvasása segít Önnek megérteni az adatvédelmi jogait és választásait. Ha nem ért egyet szabályzatainkkal és gyakorlatainkkal, kérjük, ne használja Szolgáltatásainkat. Ha továbbra is kérdései vagy aggályai vannak, kérjük, vegye fel velünk a kapcsolatot az info@zima-auto.com címen.");
    			t8 = space();
    			h20 = element("h2");
    			h20.textContent = "FŐBB PONTOK ÖSSZEFOGLALÁSA";
    			t10 = space();
    			p2 = element("p");
    			p2.textContent = "Ez az összefoglaló adatvédelmi nyilatkozatunk főbb pontjait tartalmazza, de további részleteket talál bármelyik témáról, ha az egyes főbb pontokat követő linkre kattint, vagy ha az alábbi tartalomjegyzéket használja a keresett szakasz megtalálásához.";
    			t12 = space();
    			p3 = element("p");
    			strong1 = element("strong");
    			strong1.textContent = "Milyen személyes adatokat kezelünk?";
    			t14 = text(" Amikor meglátogatja, használja vagy böngészi Szolgáltatásainkat, személyes adatokat kezelhetünk attól függően, hogyan lép kapcsolatba velünk és a Szolgáltatásokkal, milyen választásokat hoz, és milyen termékeket és funkciókat használ. ");
    			a0 = element("a");
    			a0.textContent = "Tudjon meg többet a részünkre átadott személyes adatokról.";
    			t16 = space();
    			p4 = element("p");
    			strong2 = element("strong");
    			strong2.textContent = "Kezelünk-e érzékeny személyes adatokat?";
    			t18 = text(" Nem kezelünk érzékeny személyes adatokat.");
    			t19 = space();
    			p5 = element("p");
    			strong3 = element("strong");
    			strong3.textContent = "Kapunk-e információkat harmadik felektől?";
    			t21 = text(" Nem kapunk információkat harmadik felektől.");
    			t22 = space();
    			p6 = element("p");
    			strong4 = element("strong");
    			strong4.textContent = "Hogyan kezeljük az Ön adatait?";
    			t24 = text(" Az Ön adatait Szolgáltatásaink nyújtása, javítása és adminisztrálása, Önnel való kommunikáció, biztonsági és csalásmegelőzési célokból, valamint a törvényi előírásoknak való megfelelés érdekében kezeljük. Az Ön hozzájárulásával más célokra is kezelhetjük adatait. Csak akkor kezeljük az Ön adatait, ha erre érvényes jogi alapunk van. ");
    			a1 = element("a");
    			a1.textContent = "Tudjon meg többet arról, hogyan kezeljük az Ön adatait.";
    			t26 = space();
    			p7 = element("p");
    			strong5 = element("strong");
    			strong5.textContent = "Milyen helyzetekben és mely felekkel osztjuk meg a személyes adatokat?";
    			t28 = text(" Bizonyos helyzetekben és bizonyos harmadik felekkel megoszthatjuk az adatokat. ");
    			a2 = element("a");
    			a2.textContent = "Tudjon meg többet arról, mikor és kivel osztjuk meg az Ön személyes adatait.";
    			t30 = space();
    			p8 = element("p");
    			strong6 = element("strong");
    			strong6.textContent = "Hogyan tartjuk biztonságban az Ön adatait?";
    			t32 = text(" Szervezeti és technikai folyamatokkal és eljárásokkal rendelkezünk az Ön személyes adatainak védelme érdekében. Azonban egyetlen elektronikus átvitel az interneten vagy információtároló technológia sem garantálhat 100%-os biztonságot, így nem ígérhetjük vagy garantálhatjuk, hogy hackerek, kiberbűnözők vagy más illetéktelen harmadik felek nem tudják legyőzni a biztonságunkat, és nem tudják helytelenül gyűjteni, hozzáférni, ellopni vagy módosítani az Ön adatait. ");
    			a3 = element("a");
    			a3.textContent = "Tudjon meg többet arról, hogyan tartjuk biztonságban az Ön adatait.";
    			t34 = space();
    			p9 = element("p");
    			strong7 = element("strong");
    			strong7.textContent = "Mik az Ön jogai?";
    			t36 = text(" A földrajzi elhelyezkedésétől függően az alkalmazandó adatvédelmi törvények bizonyos jogokat biztosíthatnak Önnek a személyes adataival kapcsolatban. ");
    			a4 = element("a");
    			a4.textContent = "Tudjon meg többet az adatvédelmi jogairól.";
    			t38 = space();
    			p10 = element("p");
    			strong8 = element("strong");
    			strong8.textContent = "Hogyan gyakorolhatja jogait?";
    			t40 = text(" A jogai gyakorlásának legegyszerűbb módja, ha kapcsolatba lép velünk. Minden kérést figyelembe veszünk és az alkalmazandó adatvédelmi törvényeknek megfelelően járunk el.");
    			t41 = space();
    			p11 = element("p");
    			strong9 = element("strong");
    			strong9.textContent = "Szeretne többet megtudni arról, hogy mit teszünk a gyűjtött adatokkal?";
    			t43 = text(" Tekintse át a teljes adatvédelmi nyilatkozatot.");
    			t44 = space();
    			h21 = element("h2");
    			h21.textContent = "1. MILYEN INFORMÁCIÓKAT GYŰJTÜNK?";
    			t46 = space();
    			h30 = element("h3");
    			h30.textContent = "Az Ön által megosztott személyes adatok";
    			t48 = space();
    			p12 = element("p");
    			strong10 = element("strong");
    			strong10.textContent = "Röviden:";
    			t50 = text(" Olyan személyes adatokat gyűjtünk, amelyeket Ön önként ad meg nekünk.");
    			t51 = space();
    			p13 = element("p");
    			p13.textContent = "Olyan személyes adatokat gyűjtünk, amelyeket Ön önként ad meg nekünk, amikor érdeklődést mutat a velünk vagy termékeinkkel és Szolgáltatásainkkal kapcsolatos információk iránt, amikor részt vesz a Szolgáltatásokon belüli tevékenységekben, vagy amikor egyéb módon kapcsolatba lép velünk.";
    			t53 = space();
    			p14 = element("p");
    			strong11 = element("strong");
    			strong11.textContent = "Az Ön által megadott személyes adatok.";
    			t55 = text(" Az általunk gyűjtött személyes adatok függenek a velünk és a Szolgáltatásokkal való interakcióitól, az Ön választásaitól, valamint a használt termékektől és funkcióktól. Az általunk gyűjtött személyes adatok a következőket tartalmazhatják:");
    			t56 = space();
    			ul1 = element("ul");
    			li2 = element("li");
    			li2.textContent = "nevek";
    			t58 = space();
    			li3 = element("li");
    			li3.textContent = "telefonszámok";
    			t60 = space();
    			li4 = element("li");
    			li4.textContent = "e-mail címek";
    			t62 = space();
    			li5 = element("li");
    			li5.textContent = "kapcsolattartási preferenciák";
    			t64 = space();
    			p15 = element("p");
    			strong12 = element("strong");
    			strong12.textContent = "Érzékeny adatok.";
    			t66 = text(" Nem kezelünk érzékeny adatokat.");
    			t67 = space();
    			p16 = element("p");
    			p16.textContent = "Minden személyes adatnak, amelyet Ön részünkre megad, igaznak, teljesnek és pontonak kell lennie, és értesítenie kell minket az ilyen személyes adatok bármilyen változásáról.";
    			t69 = space();
    			h31 = element("h3");
    			h31.textContent = "Automatikusan gyűjtött információk";
    			t71 = space();
    			p17 = element("p");
    			strong13 = element("strong");
    			strong13.textContent = "Röviden:";
    			t73 = text(" Bizonyos információkat — például az Ön Internet Protocol (IP) címét és/vagy böngésző és eszköz jellemzőit — automatikusan gyűjtünk, amikor meglátogatja Szolgáltatásainkat.");
    			t74 = space();
    			p18 = element("p");
    			p18.textContent = "Automatikusan gyűjtünk bizonyos információkat, amikor meglátogatja, használja vagy böngészi a Szolgáltatásokat. Ezek az információk nem fedik fel az Ön konkrét személyazonosságát (mint a nevét vagy kapcsolattartási adatait), de tartalmazhatnak eszköz- és használati információkat, például IP-címét, böngésző és eszköz jellemzőit, operációs rendszert, nyelvi preferenciákat, hivatkozó URL-eket, eszköznevet, országot, helyet, a Szolgáltatásaink használatának módjáról és idejéről szóló információkat, valamint egyéb technikai információkat. Ezekre az információkra elsősorban a Szolgáltatásaink biztonságának és működésének fenntartásához, valamint belső elemzési és jelentési céljainkra van szükség.";
    			t76 = space();
    			p19 = element("p");
    			p19.textContent = "Sok más vállalkozáshoz hasonlóan mi is cookie-k és hasonló technológiák segítségével gyűjtünk információkat.";
    			t78 = space();
    			p20 = element("p");
    			p20.textContent = "Az általunk gyűjtött információk közé tartoznak:";
    			t80 = space();
    			ul2 = element("ul");
    			li6 = element("li");
    			strong14 = element("strong");
    			strong14.textContent = "Napló- és használati adatok.";
    			t82 = text(" A napló- és használati adatok szolgáltatással kapcsolatos, diagnosztikai, használati és teljesítményadatok, amelyeket szervereink automatikusan gyűjtenek, amikor Ön hozzáfér vagy használja Szolgáltatásainkat, és amelyeket naplófájlokban rögzítünk. Attól függően, hogy hogyan lép kapcsolatba velünk, ezek a naplóadatok tartalmazhatják IP-címét, eszközadatait, böngészőtípusát és beállításait, valamint a Szolgáltatásokban végzett tevékenységével kapcsolatos információkat (például a használatával kapcsolatos dátum-/időbélyegeket, megtekintett oldalakat és fájlokat, kereséseket és más műveleteket, például a használt funkciókat), eszközeseményadatokat (például rendszertevékenység, hibajelentések (néha „összeomlási naplók\"), és hardverbeállítások).");
    			attr_dev(p0, "class", "svelte-9h9724");
    			add_location(p0, file$4, 18, 8, 524);
    			attr_dev(li0, "class", "svelte-9h9724");
    			add_location(li0, file$4, 21, 10, 838);
    			attr_dev(li1, "class", "svelte-9h9724");
    			add_location(li1, file$4, 22, 10, 1001);
    			attr_dev(ul0, "class", "svelte-9h9724");
    			add_location(ul0, file$4, 20, 8, 823);
    			add_location(strong0, file$4, 25, 11, 1133);
    			attr_dev(p1, "class", "svelte-9h9724");
    			add_location(p1, file$4, 25, 8, 1130);
    			attr_dev(h20, "class", "svelte-9h9724");
    			add_location(h20, file$4, 27, 8, 1504);
    			attr_dev(p2, "class", "svelte-9h9724");
    			add_location(p2, file$4, 29, 8, 1549);
    			add_location(strong1, file$4, 31, 11, 1819);
    			attr_dev(a0, "href", "#section-1");
    			attr_dev(a0, "class", "svelte-9h9724");
    			add_location(a0, file$4, 31, 299, 2107);
    			attr_dev(p3, "class", "svelte-9h9724");
    			add_location(p3, file$4, 31, 8, 1816);
    			add_location(strong2, file$4, 33, 11, 2207);
    			attr_dev(p4, "class", "svelte-9h9724");
    			add_location(p4, file$4, 33, 8, 2204);
    			add_location(strong3, file$4, 35, 11, 2322);
    			attr_dev(p5, "class", "svelte-9h9724");
    			add_location(p5, file$4, 35, 8, 2319);
    			add_location(strong4, file$4, 37, 11, 2441);
    			attr_dev(a1, "href", "#section-2");
    			attr_dev(a1, "class", "svelte-9h9724");
    			add_location(a1, file$4, 37, 393, 2823);
    			attr_dev(p6, "class", "svelte-9h9724");
    			add_location(p6, file$4, 37, 8, 2438);
    			add_location(strong5, file$4, 39, 11, 2920);
    			attr_dev(a2, "href", "#section-4");
    			attr_dev(a2, "class", "svelte-9h9724");
    			add_location(a2, file$4, 39, 178, 3087);
    			attr_dev(p7, "class", "svelte-9h9724");
    			add_location(p7, file$4, 39, 8, 2917);
    			add_location(strong6, file$4, 41, 11, 3205);
    			attr_dev(a3, "href", "#section-7");
    			attr_dev(a3, "class", "svelte-9h9724");
    			add_location(a3, file$4, 41, 536, 3730);
    			attr_dev(p8, "class", "svelte-9h9724");
    			add_location(p8, file$4, 41, 8, 3202);
    			add_location(strong7, file$4, 43, 11, 3839);
    			attr_dev(a4, "href", "#section-9");
    			attr_dev(a4, "class", "svelte-9h9724");
    			add_location(a4, file$4, 43, 195, 4023);
    			attr_dev(p9, "class", "svelte-9h9724");
    			add_location(p9, file$4, 43, 8, 3836);
    			add_location(strong8, file$4, 45, 11, 4107);
    			attr_dev(p10, "class", "svelte-9h9724");
    			add_location(p10, file$4, 45, 8, 4104);
    			add_location(strong9, file$4, 47, 11, 4339);
    			attr_dev(p11, "class", "svelte-9h9724");
    			add_location(p11, file$4, 47, 8, 4336);
    			attr_dev(h21, "id", "section-1");
    			attr_dev(h21, "class", "svelte-9h9724");
    			add_location(h21, file$4, 49, 8, 4488);
    			attr_dev(h30, "class", "svelte-9h9724");
    			add_location(h30, file$4, 51, 8, 4555);
    			add_location(strong10, file$4, 53, 11, 4616);
    			attr_dev(p12, "class", "svelte-9h9724");
    			add_location(p12, file$4, 53, 8, 4613);
    			attr_dev(p13, "class", "svelte-9h9724");
    			add_location(p13, file$4, 55, 8, 4725);
    			add_location(strong11, file$4, 57, 11, 5031);
    			attr_dev(p14, "class", "svelte-9h9724");
    			add_location(p14, file$4, 57, 8, 5028);
    			attr_dev(li2, "class", "svelte-9h9724");
    			add_location(li2, file$4, 60, 10, 5355);
    			attr_dev(li3, "class", "svelte-9h9724");
    			add_location(li3, file$4, 61, 10, 5380);
    			attr_dev(li4, "class", "svelte-9h9724");
    			add_location(li4, file$4, 62, 10, 5413);
    			attr_dev(li5, "class", "svelte-9h9724");
    			add_location(li5, file$4, 63, 10, 5445);
    			attr_dev(ul1, "class", "svelte-9h9724");
    			add_location(ul1, file$4, 59, 8, 5340);
    			add_location(strong12, file$4, 66, 11, 5510);
    			attr_dev(p15, "class", "svelte-9h9724");
    			add_location(p15, file$4, 66, 8, 5507);
    			attr_dev(p16, "class", "svelte-9h9724");
    			add_location(p16, file$4, 68, 8, 5589);
    			attr_dev(h31, "class", "svelte-9h9724");
    			add_location(h31, file$4, 70, 8, 5780);
    			add_location(strong13, file$4, 72, 11, 5836);
    			attr_dev(p17, "class", "svelte-9h9724");
    			add_location(p17, file$4, 72, 8, 5833);
    			attr_dev(p18, "class", "svelte-9h9724");
    			add_location(p18, file$4, 74, 8, 6047);
    			attr_dev(p19, "class", "svelte-9h9724");
    			add_location(p19, file$4, 76, 8, 6763);
    			attr_dev(p20, "class", "svelte-9h9724");
    			add_location(p20, file$4, 78, 8, 6888);
    			add_location(strong14, file$4, 81, 14, 6972);
    			attr_dev(li6, "class", "svelte-9h9724");
    			add_location(li6, file$4, 81, 10, 6968);
    			attr_dev(ul2, "class", "svelte-9h9724");
    			add_location(ul2, file$4, 80, 8, 6953);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, p0, anchor);
    			insert_dev(target, t1, anchor);
    			insert_dev(target, ul0, anchor);
    			append_dev(ul0, li0);
    			append_dev(ul0, t3);
    			append_dev(ul0, li1);
    			insert_dev(target, t5, anchor);
    			insert_dev(target, p1, anchor);
    			append_dev(p1, strong0);
    			append_dev(p1, t7);
    			insert_dev(target, t8, anchor);
    			insert_dev(target, h20, anchor);
    			insert_dev(target, t10, anchor);
    			insert_dev(target, p2, anchor);
    			insert_dev(target, t12, anchor);
    			insert_dev(target, p3, anchor);
    			append_dev(p3, strong1);
    			append_dev(p3, t14);
    			append_dev(p3, a0);
    			insert_dev(target, t16, anchor);
    			insert_dev(target, p4, anchor);
    			append_dev(p4, strong2);
    			append_dev(p4, t18);
    			insert_dev(target, t19, anchor);
    			insert_dev(target, p5, anchor);
    			append_dev(p5, strong3);
    			append_dev(p5, t21);
    			insert_dev(target, t22, anchor);
    			insert_dev(target, p6, anchor);
    			append_dev(p6, strong4);
    			append_dev(p6, t24);
    			append_dev(p6, a1);
    			insert_dev(target, t26, anchor);
    			insert_dev(target, p7, anchor);
    			append_dev(p7, strong5);
    			append_dev(p7, t28);
    			append_dev(p7, a2);
    			insert_dev(target, t30, anchor);
    			insert_dev(target, p8, anchor);
    			append_dev(p8, strong6);
    			append_dev(p8, t32);
    			append_dev(p8, a3);
    			insert_dev(target, t34, anchor);
    			insert_dev(target, p9, anchor);
    			append_dev(p9, strong7);
    			append_dev(p9, t36);
    			append_dev(p9, a4);
    			insert_dev(target, t38, anchor);
    			insert_dev(target, p10, anchor);
    			append_dev(p10, strong8);
    			append_dev(p10, t40);
    			insert_dev(target, t41, anchor);
    			insert_dev(target, p11, anchor);
    			append_dev(p11, strong9);
    			append_dev(p11, t43);
    			insert_dev(target, t44, anchor);
    			insert_dev(target, h21, anchor);
    			insert_dev(target, t46, anchor);
    			insert_dev(target, h30, anchor);
    			insert_dev(target, t48, anchor);
    			insert_dev(target, p12, anchor);
    			append_dev(p12, strong10);
    			append_dev(p12, t50);
    			insert_dev(target, t51, anchor);
    			insert_dev(target, p13, anchor);
    			insert_dev(target, t53, anchor);
    			insert_dev(target, p14, anchor);
    			append_dev(p14, strong11);
    			append_dev(p14, t55);
    			insert_dev(target, t56, anchor);
    			insert_dev(target, ul1, anchor);
    			append_dev(ul1, li2);
    			append_dev(ul1, t58);
    			append_dev(ul1, li3);
    			append_dev(ul1, t60);
    			append_dev(ul1, li4);
    			append_dev(ul1, t62);
    			append_dev(ul1, li5);
    			insert_dev(target, t64, anchor);
    			insert_dev(target, p15, anchor);
    			append_dev(p15, strong12);
    			append_dev(p15, t66);
    			insert_dev(target, t67, anchor);
    			insert_dev(target, p16, anchor);
    			insert_dev(target, t69, anchor);
    			insert_dev(target, h31, anchor);
    			insert_dev(target, t71, anchor);
    			insert_dev(target, p17, anchor);
    			append_dev(p17, strong13);
    			append_dev(p17, t73);
    			insert_dev(target, t74, anchor);
    			insert_dev(target, p18, anchor);
    			insert_dev(target, t76, anchor);
    			insert_dev(target, p19, anchor);
    			insert_dev(target, t78, anchor);
    			insert_dev(target, p20, anchor);
    			insert_dev(target, t80, anchor);
    			insert_dev(target, ul2, anchor);
    			append_dev(ul2, li6);
    			append_dev(li6, strong14);
    			append_dev(li6, t82);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(p0);
    			if (detaching) detach_dev(t1);
    			if (detaching) detach_dev(ul0);
    			if (detaching) detach_dev(t5);
    			if (detaching) detach_dev(p1);
    			if (detaching) detach_dev(t8);
    			if (detaching) detach_dev(h20);
    			if (detaching) detach_dev(t10);
    			if (detaching) detach_dev(p2);
    			if (detaching) detach_dev(t12);
    			if (detaching) detach_dev(p3);
    			if (detaching) detach_dev(t16);
    			if (detaching) detach_dev(p4);
    			if (detaching) detach_dev(t19);
    			if (detaching) detach_dev(p5);
    			if (detaching) detach_dev(t22);
    			if (detaching) detach_dev(p6);
    			if (detaching) detach_dev(t26);
    			if (detaching) detach_dev(p7);
    			if (detaching) detach_dev(t30);
    			if (detaching) detach_dev(p8);
    			if (detaching) detach_dev(t34);
    			if (detaching) detach_dev(p9);
    			if (detaching) detach_dev(t38);
    			if (detaching) detach_dev(p10);
    			if (detaching) detach_dev(t41);
    			if (detaching) detach_dev(p11);
    			if (detaching) detach_dev(t44);
    			if (detaching) detach_dev(h21);
    			if (detaching) detach_dev(t46);
    			if (detaching) detach_dev(h30);
    			if (detaching) detach_dev(t48);
    			if (detaching) detach_dev(p12);
    			if (detaching) detach_dev(t51);
    			if (detaching) detach_dev(p13);
    			if (detaching) detach_dev(t53);
    			if (detaching) detach_dev(p14);
    			if (detaching) detach_dev(t56);
    			if (detaching) detach_dev(ul1);
    			if (detaching) detach_dev(t64);
    			if (detaching) detach_dev(p15);
    			if (detaching) detach_dev(t67);
    			if (detaching) detach_dev(p16);
    			if (detaching) detach_dev(t69);
    			if (detaching) detach_dev(h31);
    			if (detaching) detach_dev(t71);
    			if (detaching) detach_dev(p17);
    			if (detaching) detach_dev(t74);
    			if (detaching) detach_dev(p18);
    			if (detaching) detach_dev(t76);
    			if (detaching) detach_dev(p19);
    			if (detaching) detach_dev(t78);
    			if (detaching) detach_dev(p20);
    			if (detaching) detach_dev(t80);
    			if (detaching) detach_dev(ul2);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$3.name,
    		type: "if",
    		source: "(17:6) {#if $currentLang === 'hu'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$4(ctx) {
    	let section;
    	let div0;
    	let h1;

    	let t0_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Adatvédelmi Szabályzat'
    	: 'Privacy Policy') + "";

    	let t0;
    	let t1;
    	let p;

    	let t2_value = (/*$currentLang*/ ctx[0] === 'hu'
    	? 'Utolsó frissítés: 2024. április 24.'
    	: 'Last updated: April 24, 2024') + "";

    	let t2;
    	let t3;
    	let div3;
    	let div2;
    	let div1;

    	function select_block_type(ctx, dirty) {
    		if (/*$currentLang*/ ctx[0] === 'hu') return create_if_block$3;
    		return create_else_block$1;
    	}

    	let current_block_type = select_block_type(ctx);
    	let if_block = current_block_type(ctx);

    	const block = {
    		c: function create() {
    			section = element("section");
    			div0 = element("div");
    			h1 = element("h1");
    			t0 = text(t0_value);
    			t1 = space();
    			p = element("p");
    			t2 = text(t2_value);
    			t3 = space();
    			div3 = element("div");
    			div2 = element("div");
    			div1 = element("div");
    			if_block.c();
    			attr_dev(h1, "class", "svelte-9h9724");
    			add_location(h1, file$4, 6, 4, 126);
    			attr_dev(p, "class", "svelte-9h9724");
    			add_location(p, file$4, 7, 4, 209);
    			attr_dev(div0, "class", "container");
    			add_location(div0, file$4, 5, 2, 98);
    			attr_dev(section, "class", "privacy-hero svelte-9h9724");
    			add_location(section, file$4, 4, 0, 65);
    			attr_dev(div1, "class", "privacy-content svelte-9h9724");
    			add_location(div1, file$4, 15, 4, 410);
    			attr_dev(div2, "class", "container");
    			add_location(div2, file$4, 14, 2, 382);
    			attr_dev(div3, "class", "privacy-container svelte-9h9724");
    			add_location(div3, file$4, 13, 0, 348);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div0);
    			append_dev(div0, h1);
    			append_dev(h1, t0);
    			append_dev(div0, t1);
    			append_dev(div0, p);
    			append_dev(p, t2);
    			insert_dev(target, t3, anchor);
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div1);
    			if_block.m(div1, null);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*$currentLang*/ 1 && t0_value !== (t0_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Adatvédelmi Szabályzat'
    			: 'Privacy Policy') + "")) set_data_dev(t0, t0_value);

    			if (dirty & /*$currentLang*/ 1 && t2_value !== (t2_value = (/*$currentLang*/ ctx[0] === 'hu'
    			? 'Utolsó frissítés: 2024. április 24.'
    			: 'Last updated: April 24, 2024') + "")) set_data_dev(t2, t2_value);

    			if (current_block_type !== (current_block_type = select_block_type(ctx))) {
    				if_block.d(1);
    				if_block = current_block_type(ctx);

    				if (if_block) {
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    			if (detaching) detach_dev(t3);
    			if (detaching) detach_dev(div3);
    			if_block.d();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$4.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$4($$self, $$props, $$invalidate) {
    	let $currentLang;
    	validate_store(currentLang, 'currentLang');
    	component_subscribe($$self, currentLang, $$value => $$invalidate(0, $currentLang = $$value));
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('Privacy', slots, []);
    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<Privacy> was created with unknown prop '${key}'`);
    	});

    	$$self.$capture_state = () => ({ currentLang, $currentLang });
    	return [$currentLang];
    }

    class Privacy extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$4, create_fragment$4, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "Privacy",
    			options,
    			id: create_fragment$4.name
    		});
    	}
    }

    /* src/pages/ThankYou.svelte generated by Svelte v3.59.2 */
    const file$3 = "src/pages/ThankYou.svelte";

    function create_fragment$3(ctx) {
    	let section;
    	let div3;
    	let div2;
    	let div0;
    	let svg0;
    	let path0;
    	let path1;
    	let t0;
    	let h1;
    	let t1_value = /*content*/ ctx[1][/*lang*/ ctx[0]].title + "";
    	let t1;
    	let t2;
    	let p0;
    	let t3_value = /*content*/ ctx[1][/*lang*/ ctx[0]].subtitle + "";
    	let t3;
    	let t4;
    	let div1;
    	let p1;
    	let t5_value = /*content*/ ctx[1][/*lang*/ ctx[0]].message + "";
    	let t5;
    	let t6;
    	let a;
    	let svg1;
    	let path2;
    	let t7;
    	let t8_value = /*content*/ ctx[1][/*lang*/ ctx[0]].backButton + "";
    	let t8;
    	let section_intro;

    	const block = {
    		c: function create() {
    			section = element("section");
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			svg0 = svg_element("svg");
    			path0 = svg_element("path");
    			path1 = svg_element("path");
    			t0 = space();
    			h1 = element("h1");
    			t1 = text(t1_value);
    			t2 = space();
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			div1 = element("div");
    			p1 = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			a = element("a");
    			svg1 = svg_element("svg");
    			path2 = svg_element("path");
    			t7 = space();
    			t8 = text(t8_value);
    			attr_dev(path0, "d", "M22 11.08V12a10 10 0 1 1-5.93-9.14");
    			attr_dev(path0, "stroke", "currentColor");
    			attr_dev(path0, "stroke-width", "2");
    			attr_dev(path0, "stroke-linecap", "round");
    			attr_dev(path0, "stroke-linejoin", "round");
    			add_location(path0, file$3, 34, 10, 1174);
    			attr_dev(path1, "d", "M22 4 12 14.01l-3-3");
    			attr_dev(path1, "stroke", "currentColor");
    			attr_dev(path1, "stroke-width", "2");
    			attr_dev(path1, "stroke-linecap", "round");
    			attr_dev(path1, "stroke-linejoin", "round");
    			add_location(path1, file$3, 35, 10, 1317);
    			attr_dev(svg0, "width", "80");
    			attr_dev(svg0, "height", "80");
    			attr_dev(svg0, "viewBox", "0 0 24 24");
    			attr_dev(svg0, "fill", "none");
    			attr_dev(svg0, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg0, file$3, 33, 8, 1068);
    			attr_dev(div0, "class", "success-icon svelte-1e7cmrg");
    			add_location(div0, file$3, 32, 6, 1033);
    			attr_dev(h1, "class", "svelte-1e7cmrg");
    			add_location(h1, file$3, 39, 6, 1476);
    			attr_dev(p0, "class", "subtitle svelte-1e7cmrg");
    			add_location(p0, file$3, 40, 6, 1513);
    			attr_dev(p1, "class", "svelte-1e7cmrg");
    			add_location(p1, file$3, 43, 8, 1609);
    			attr_dev(div1, "class", "message-box svelte-1e7cmrg");
    			add_location(div1, file$3, 42, 6, 1575);
    			attr_dev(path2, "d", "M19 12H5M5 12L12 19M5 12L12 5");
    			attr_dev(path2, "stroke", "currentColor");
    			attr_dev(path2, "stroke-width", "2");
    			attr_dev(path2, "stroke-linecap", "round");
    			attr_dev(path2, "stroke-linejoin", "round");
    			add_location(path2, file$3, 48, 10, 1820);
    			attr_dev(svg1, "width", "16");
    			attr_dev(svg1, "height", "16");
    			attr_dev(svg1, "viewBox", "0 0 24 24");
    			attr_dev(svg1, "fill", "none");
    			attr_dev(svg1, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg1, file$3, 47, 8, 1714);
    			attr_dev(a, "href", "/contact");
    			attr_dev(a, "class", "back-button svelte-1e7cmrg");
    			add_location(a, file$3, 46, 6, 1666);
    			attr_dev(div2, "class", "thankyou-content svelte-1e7cmrg");
    			add_location(div2, file$3, 31, 4, 996);
    			attr_dev(div3, "class", "container");
    			add_location(div3, file$3, 30, 2, 968);
    			attr_dev(section, "class", "thankyou-section svelte-1e7cmrg");
    			add_location(section, file$3, 29, 0, 891);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, section, anchor);
    			append_dev(section, div3);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, svg0);
    			append_dev(svg0, path0);
    			append_dev(svg0, path1);
    			append_dev(div2, t0);
    			append_dev(div2, h1);
    			append_dev(h1, t1);
    			append_dev(div2, t2);
    			append_dev(div2, p0);
    			append_dev(p0, t3);
    			append_dev(div2, t4);
    			append_dev(div2, div1);
    			append_dev(div1, p1);
    			append_dev(p1, t5);
    			append_dev(div2, t6);
    			append_dev(div2, a);
    			append_dev(a, svg1);
    			append_dev(svg1, path2);
    			append_dev(a, t7);
    			append_dev(a, t8);
    		},
    		p: function update(ctx, [dirty]) {
    			if (dirty & /*lang*/ 1 && t1_value !== (t1_value = /*content*/ ctx[1][/*lang*/ ctx[0]].title + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*lang*/ 1 && t3_value !== (t3_value = /*content*/ ctx[1][/*lang*/ ctx[0]].subtitle + "")) set_data_dev(t3, t3_value);
    			if (dirty & /*lang*/ 1 && t5_value !== (t5_value = /*content*/ ctx[1][/*lang*/ ctx[0]].message + "")) set_data_dev(t5, t5_value);
    			if (dirty & /*lang*/ 1 && t8_value !== (t8_value = /*content*/ ctx[1][/*lang*/ ctx[0]].backButton + "")) set_data_dev(t8, t8_value);
    		},
    		i: function intro(local) {
    			if (!section_intro) {
    				add_render_callback(() => {
    					section_intro = create_in_transition(section, fade, { duration: 600, delay: 200 });
    					section_intro.start();
    				});
    			}
    		},
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(section);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$3.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$3($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('ThankYou', slots, []);
    	let { lang } = $$props;

    	// Content for both languages
    	const content = {
    		hu: {
    			title: "Köszönjük üzenetét!",
    			subtitle: "Hamarosan felvesszük Önnel a kapcsolatot.",
    			message: "Üzenetét sikeresen elküldtük csapatunknak. Munkatársaink a lehető leghamarabb válaszolnak.",
    			backButton: "Vissza a kapcsolat oldalra"
    		},
    		en: {
    			title: "Thank you for your message!",
    			subtitle: "We'll get back to you shortly.",
    			message: "Your message has been successfully sent to our team. Our staff will respond as soon as possible.",
    			backButton: "Back to contact page"
    		}
    	};

    	onMount(() => {
    		// Scroll to top when thank you page is shown
    		window.scrollTo({ top: 0, behavior: 'smooth' });
    	});

    	$$self.$$.on_mount.push(function () {
    		if (lang === undefined && !('lang' in $$props || $$self.$$.bound[$$self.$$.props['lang']])) {
    			console.warn("<ThankYou> was created without expected prop 'lang'");
    		}
    	});

    	const writable_props = ['lang'];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<ThankYou> was created with unknown prop '${key}'`);
    	});

    	$$self.$$set = $$props => {
    		if ('lang' in $$props) $$invalidate(0, lang = $$props.lang);
    	};

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		fade,
    		lang,
    		content
    	});

    	$$self.$inject_state = $$props => {
    		if ('lang' in $$props) $$invalidate(0, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [lang, content];
    }

    class ThankYou extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$3, create_fragment$3, safe_not_equal, { lang: 0 });

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "ThankYou",
    			options,
    			id: create_fragment$3.name
    		});
    	}

    	get lang() {
    		throw new Error("<ThankYou>: Props cannot be read directly from the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}

    	set lang(value) {
    		throw new Error("<ThankYou>: Props cannot be set directly on the component instance unless compiling with 'accessors: true' or '<svelte:options accessors/>'");
    	}
    }

    /* src/components/DiscountPopup.svelte generated by Svelte v3.59.2 */
    const file$2 = "src/components/DiscountPopup.svelte";

    // (73:0) {#if showPopup && !hasShown}
    function create_if_block$2(ctx) {
    	let div4;
    	let div3;
    	let button0;
    	let svg;
    	let line0;
    	let line1;
    	let button0_aria_label_value;
    	let t0;
    	let div2;
    	let div0;
    	let t2;
    	let h2;

    	let t3_value = (/*lang*/ ctx[2] === 'hu'
    	? 'Kedvezmény Autómosásra!'
    	: 'Off Your Car Wash!') + "";

    	let t3;
    	let t4;
    	let p;

    	let t5_value = (/*lang*/ ctx[2] === 'hu'
    	? 'Parkolj autóddal repülőtéri parkolónkban, és élvezd a 20% kedvezményt az autómosás árából.'
    	: 'Park your car at our airport parking and enjoy a 20% discount on your car wash.') + "";

    	let t5;
    	let t6;
    	let div1;

    	let t7_value = (/*lang*/ ctx[2] === 'hu'
    	? 'Az ajánlat minden repülőtéri parkoló ügyfél számára érvényes.'
    	: 'Offer valid for all airport parking customers.') + "";

    	let t7;
    	let t8;
    	let button1;
    	let t9_value = (/*lang*/ ctx[2] === 'hu' ? 'MEGÉRTETTEM' : 'GOT IT') + "";
    	let t9;
    	let div4_aria_label_value;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			button0 = element("button");
    			svg = svg_element("svg");
    			line0 = svg_element("line");
    			line1 = svg_element("line");
    			t0 = space();
    			div2 = element("div");
    			div0 = element("div");
    			div0.textContent = "20%";
    			t2 = space();
    			h2 = element("h2");
    			t3 = text(t3_value);
    			t4 = space();
    			p = element("p");
    			t5 = text(t5_value);
    			t6 = space();
    			div1 = element("div");
    			t7 = text(t7_value);
    			t8 = space();
    			button1 = element("button");
    			t9 = text(t9_value);
    			attr_dev(line0, "x1", "18");
    			attr_dev(line0, "y1", "6");
    			attr_dev(line0, "x2", "6");
    			attr_dev(line0, "y2", "18");
    			add_location(line0, file$2, 94, 10, 2757);
    			attr_dev(line1, "x1", "6");
    			attr_dev(line1, "y1", "6");
    			attr_dev(line1, "x2", "18");
    			attr_dev(line1, "y2", "18");
    			add_location(line1, file$2, 95, 10, 2811);
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			attr_dev(svg, "width", "20");
    			attr_dev(svg, "height", "20");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "stroke", "currentColor");
    			attr_dev(svg, "stroke-width", "2");
    			attr_dev(svg, "stroke-linecap", "round");
    			attr_dev(svg, "stroke-linejoin", "round");
    			add_location(svg, file$2, 93, 8, 2565);
    			attr_dev(button0, "class", "close-button svelte-12p62nj");
    			attr_dev(button0, "aria-label", button0_aria_label_value = /*lang*/ ctx[2] === 'hu' ? 'Bezárás' : 'Close');
    			add_location(button0, file$2, 88, 6, 2425);
    			attr_dev(div0, "class", "discount-badge svelte-12p62nj");
    			add_location(div0, file$2, 100, 8, 2926);
    			attr_dev(h2, "class", "svelte-12p62nj");
    			add_location(h2, file$2, 101, 8, 2972);
    			attr_dev(p, "class", "svelte-12p62nj");
    			add_location(p, file$2, 104, 8, 3076);
    			attr_dev(div1, "class", "offer-note svelte-12p62nj");
    			add_location(div1, file$2, 110, 8, 3331);
    			attr_dev(button1, "class", "discount-btn svelte-12p62nj");
    			add_location(button1, file$2, 116, 8, 3547);
    			attr_dev(div2, "class", "popup-text svelte-12p62nj");
    			add_location(div2, file$2, 99, 6, 2893);
    			attr_dev(div3, "class", "popup-content svelte-12p62nj");
    			attr_dev(div3, "role", "document");
    			add_location(div3, file$2, 82, 4, 2294);
    			attr_dev(div4, "class", "popup-overlay svelte-12p62nj");
    			attr_dev(div4, "role", "dialog");
    			attr_dev(div4, "aria-modal", "true");

    			attr_dev(div4, "aria-label", div4_aria_label_value = /*lang*/ ctx[2] === 'hu'
    			? 'Kedvezmény Popup'
    			: 'Discount Popup');

    			attr_dev(div4, "tabindex", "-1");
    			add_location(div4, file$2, 73, 2, 2069);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, button0);
    			append_dev(button0, svg);
    			append_dev(svg, line0);
    			append_dev(svg, line1);
    			append_dev(div3, t0);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div2, t2);
    			append_dev(div2, h2);
    			append_dev(h2, t3);
    			append_dev(div2, t4);
    			append_dev(div2, p);
    			append_dev(p, t5);
    			append_dev(div2, t6);
    			append_dev(div2, div1);
    			append_dev(div1, t7);
    			append_dev(div2, t8);
    			append_dev(div2, button1);
    			append_dev(button1, t9);

    			if (!mounted) {
    				dispose = [
    					listen_dev(button0, "click", /*closePopup*/ ctx[3], false, false, false, false),
    					listen_dev(button1, "click", /*closePopup*/ ctx[3], false, false, false, false),
    					listen_dev(div3, "click", stop_propagation(/*click_handler*/ ctx[5]), false, false, true, false),
    					listen_dev(div3, "keydown", /*handleKeydown*/ ctx[4], false, false, false, false),
    					listen_dev(div4, "click", /*closePopup*/ ctx[3], false, false, false, false),
    					listen_dev(div4, "keydown", /*handleKeydown*/ ctx[4], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*lang*/ 4 && button0_aria_label_value !== (button0_aria_label_value = /*lang*/ ctx[2] === 'hu' ? 'Bezárás' : 'Close')) {
    				attr_dev(button0, "aria-label", button0_aria_label_value);
    			}

    			if (dirty & /*lang*/ 4 && t3_value !== (t3_value = (/*lang*/ ctx[2] === 'hu'
    			? 'Kedvezmény Autómosásra!'
    			: 'Off Your Car Wash!') + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*lang*/ 4 && t5_value !== (t5_value = (/*lang*/ ctx[2] === 'hu'
    			? 'Parkolj autóddal repülőtéri parkolónkban, és élvezd a 20% kedvezményt az autómosás árából.'
    			: 'Park your car at our airport parking and enjoy a 20% discount on your car wash.') + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*lang*/ 4 && t7_value !== (t7_value = (/*lang*/ ctx[2] === 'hu'
    			? 'Az ajánlat minden repülőtéri parkoló ügyfél számára érvényes.'
    			: 'Offer valid for all airport parking customers.') + "")) set_data_dev(t7, t7_value);

    			if (dirty & /*lang*/ 4 && t9_value !== (t9_value = (/*lang*/ ctx[2] === 'hu' ? 'MEGÉRTETTEM' : 'GOT IT') + "")) set_data_dev(t9, t9_value);

    			if (dirty & /*lang*/ 4 && div4_aria_label_value !== (div4_aria_label_value = /*lang*/ ctx[2] === 'hu'
    			? 'Kedvezmény Popup'
    			: 'Discount Popup')) {
    				attr_dev(div4, "aria-label", div4_aria_label_value);
    			}
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$2.name,
    		type: "if",
    		source: "(73:0) {#if showPopup && !hasShown}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$2(ctx) {
    	let if_block_anchor;
    	let if_block = /*showPopup*/ ctx[0] && !/*hasShown*/ ctx[1] && create_if_block$2(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*showPopup*/ ctx[0] && !/*hasShown*/ ctx[1]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$2(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$2.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance$2($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('DiscountPopup', slots, []);
    	let showPopup = false;
    	let hasShown = false;
    	let cookieConsentClosed = false;

    	// Subscribe to language changes (already present, good)
    	let lang;

    	currentLang.subscribe(value => {
    		$$invalidate(2, lang = value);
    	});

    	onMount(() => {
    		// Check if popup has been shown before
    		$$invalidate(1, hasShown = localStorage.getItem('discountPopupShown') === 'true');

    		// Check cookie consent status
    		const cookieConsent = localStorage.getItem('cookieConsent');

    		cookieConsentClosed = !!cookieConsent;

    		// Function to show popup with delay
    		const showPopupWithDelay = () => {
    			if (!hasShown) {
    				// Delay showing the popup for 5 seconds
    				setTimeout(
    					() => {
    						$$invalidate(0, showPopup = true);
    					},
    					5000
    				);
    			}
    		};

    		// If cookie consent already closed, show popup after delay
    		if (cookieConsentClosed) {
    			showPopupWithDelay();
    		} else {
    			// Otherwise, wait for cookie consent to be closed
    			const checkCookieConsent = setInterval(
    				() => {
    					const consent = localStorage.getItem('cookieConsent');

    					if (consent) {
    						cookieConsentClosed = true;
    						clearInterval(checkCookieConsent);
    						showPopupWithDelay();
    					}
    				},
    				1000
    			); // Check every second

    			// Fallback: Show after 15 seconds regardless of cookie consent
    			// This ensures popup shows even if user doesn't interact with cookie banner
    			setTimeout(
    				() => {
    					if (!showPopup && !hasShown) {
    						$$invalidate(0, showPopup = true);
    						clearInterval(checkCookieConsent);
    					}
    				},
    				15000
    			); // Fallback after 15 seconds
    		}
    	});

    	// Function to close the popup
    	function closePopup() {
    		$$invalidate(0, showPopup = false);
    		$$invalidate(1, hasShown = true); // Mark as shown
    		localStorage.setItem('discountPopupShown', 'true'); // Save state to localStorage
    	}

    	// Handle Escape key to close popup
    	function handleKeydown(event) {
    		if (event.key === 'Escape') {
    			closePopup();
    		}
    	}

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<DiscountPopup> was created with unknown prop '${key}'`);
    	});

    	function click_handler(event) {
    		bubble.call(this, $$self, event);
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		showPopup,
    		hasShown,
    		cookieConsentClosed,
    		lang,
    		closePopup,
    		handleKeydown
    	});

    	$$self.$inject_state = $$props => {
    		if ('showPopup' in $$props) $$invalidate(0, showPopup = $$props.showPopup);
    		if ('hasShown' in $$props) $$invalidate(1, hasShown = $$props.hasShown);
    		if ('cookieConsentClosed' in $$props) cookieConsentClosed = $$props.cookieConsentClosed;
    		if ('lang' in $$props) $$invalidate(2, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [showPopup, hasShown, lang, closePopup, handleKeydown, click_handler];
    }

    class DiscountPopup extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$2, create_fragment$2, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "DiscountPopup",
    			options,
    			id: create_fragment$2.name
    		});
    	}
    }

    /* src/components/CookieConsent.svelte generated by Svelte v3.59.2 */
    const file$1 = "src/components/CookieConsent.svelte";

    // (83:2) {#if consentShown}
    function create_if_block$1(ctx) {
    	let div4;
    	let div3;
    	let div0;
    	let svg;
    	let path;
    	let circle0;
    	let circle1;
    	let circle2;
    	let circle3;
    	let circle4;
    	let t0;
    	let div1;
    	let h2;

    	let t1_value = (/*lang*/ ctx[0] === 'hu'
    	? 'Cookie Beállítások'
    	: 'Cookie Settings') + "";

    	let t1;
    	let t2;
    	let p;

    	let t3_value = (/*lang*/ ctx[0] === 'hu'
    	? 'Ez a weboldal cookie-kat használ a jobb felhasználói élmény érdekében. Az "Elfogadom" gombra kattintva hozzájárul a cookie-k használatához. További információt az '
    	: 'We use cookies to enhance your browsing experience. By clicking "Accept", you consent to our use of cookies. See our ') + "";

    	let t3;
    	let t4;
    	let a;

    	let t5_value = (/*lang*/ ctx[0] === 'hu'
    	? 'Adatvédelmi Szabályzatban'
    	: 'Privacy Policy') + "";

    	let t5;
    	let t6;

    	let t7_value = (/*lang*/ ctx[0] === 'hu'
    	? ' talál.'
    	: ' for more information.') + "";

    	let t7;
    	let t8;
    	let t9;
    	let div2;
    	let button0;

    	let t10_value = (/*showPreferences*/ ctx[3]
    	? /*lang*/ ctx[0] === 'hu' ? 'Elrejt' : 'Hide'
    	: /*lang*/ ctx[0] === 'hu' ? 'Beállítások' : 'Preferences') + "";

    	let t10;
    	let t11;
    	let button1;

    	let t12_value = (/*lang*/ ctx[0] === 'hu'
    	? 'Csak szükséges'
    	: 'Necessary Only') + "";

    	let t12;
    	let t13;
    	let button2;
    	let t14_value = (/*lang*/ ctx[0] === 'hu' ? 'Elfogadom' : 'Accept All') + "";
    	let t14;
    	let mounted;
    	let dispose;
    	let if_block = /*showPreferences*/ ctx[3] && create_if_block_1$1(ctx);

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div3 = element("div");
    			div0 = element("div");
    			svg = svg_element("svg");
    			path = svg_element("path");
    			circle0 = svg_element("circle");
    			circle1 = svg_element("circle");
    			circle2 = svg_element("circle");
    			circle3 = svg_element("circle");
    			circle4 = svg_element("circle");
    			t0 = space();
    			div1 = element("div");
    			h2 = element("h2");
    			t1 = text(t1_value);
    			t2 = space();
    			p = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			a = element("a");
    			t5 = text(t5_value);
    			t6 = space();
    			t7 = text(t7_value);
    			t8 = space();
    			if (if_block) if_block.c();
    			t9 = space();
    			div2 = element("div");
    			button0 = element("button");
    			t10 = text(t10_value);
    			t11 = space();
    			button1 = element("button");
    			t12 = text(t12_value);
    			t13 = space();
    			button2 = element("button");
    			t14 = text(t14_value);
    			attr_dev(path, "d", "M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z");
    			attr_dev(path, "fill", "currentColor");
    			add_location(path, file$1, 87, 12, 2520);
    			attr_dev(circle0, "cx", "7.5");
    			attr_dev(circle0, "cy", "9.5");
    			attr_dev(circle0, "r", "1.5");
    			attr_dev(circle0, "fill", "currentColor");
    			add_location(circle0, file$1, 88, 12, 2689);
    			attr_dev(circle1, "cx", "12");
    			attr_dev(circle1, "cy", "7");
    			attr_dev(circle1, "r", "1.5");
    			attr_dev(circle1, "fill", "currentColor");
    			add_location(circle1, file$1, 89, 12, 2757);
    			attr_dev(circle2, "cx", "16.5");
    			attr_dev(circle2, "cy", "9.5");
    			attr_dev(circle2, "r", "1.5");
    			attr_dev(circle2, "fill", "currentColor");
    			add_location(circle2, file$1, 90, 12, 2822);
    			attr_dev(circle3, "cx", "15");
    			attr_dev(circle3, "cy", "15");
    			attr_dev(circle3, "r", "1.5");
    			attr_dev(circle3, "fill", "currentColor");
    			add_location(circle3, file$1, 91, 12, 2891);
    			attr_dev(circle4, "cx", "9");
    			attr_dev(circle4, "cy", "15");
    			attr_dev(circle4, "r", "1.5");
    			attr_dev(circle4, "fill", "currentColor");
    			add_location(circle4, file$1, 92, 12, 2957);
    			attr_dev(svg, "width", "36");
    			attr_dev(svg, "height", "36");
    			attr_dev(svg, "viewBox", "0 0 24 24");
    			attr_dev(svg, "fill", "none");
    			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
    			add_location(svg, file$1, 86, 10, 2412);
    			attr_dev(div0, "class", "cookie-icon svelte-jnh8nj");
    			add_location(div0, file$1, 85, 8, 2376);
    			attr_dev(h2, "class", "svelte-jnh8nj");
    			add_location(h2, file$1, 97, 10, 3098);
    			attr_dev(a, "href", "#privacy");
    			attr_dev(a, "class", "svelte-jnh8nj");
    			add_location(a, file$1, 102, 12, 3534);
    			attr_dev(p, "class", "svelte-jnh8nj");
    			add_location(p, file$1, 99, 10, 3187);
    			attr_dev(div1, "class", "cookie-content svelte-jnh8nj");
    			add_location(div1, file$1, 96, 8, 3059);
    			attr_dev(button0, "class", "consent-btn preferences-btn svelte-jnh8nj");
    			add_location(button0, file$1, 134, 10, 4919);
    			attr_dev(button1, "class", "consent-btn accept-necessary svelte-jnh8nj");
    			add_location(button1, file$1, 141, 10, 5195);
    			attr_dev(button2, "class", "consent-btn accept-all svelte-jnh8nj");
    			add_location(button2, file$1, 145, 10, 5375);
    			attr_dev(div2, "class", "cookie-consent-actions svelte-jnh8nj");
    			add_location(div2, file$1, 133, 8, 4872);
    			attr_dev(div3, "class", "cookie-consent-banner svelte-jnh8nj");
    			add_location(div3, file$1, 84, 6, 2332);
    			attr_dev(div4, "class", "cookie-consent-container svelte-jnh8nj");
    			add_location(div4, file$1, 83, 4, 2287);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div3);
    			append_dev(div3, div0);
    			append_dev(div0, svg);
    			append_dev(svg, path);
    			append_dev(svg, circle0);
    			append_dev(svg, circle1);
    			append_dev(svg, circle2);
    			append_dev(svg, circle3);
    			append_dev(svg, circle4);
    			append_dev(div3, t0);
    			append_dev(div3, div1);
    			append_dev(div1, h2);
    			append_dev(h2, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p);
    			append_dev(p, t3);
    			append_dev(p, t4);
    			append_dev(p, a);
    			append_dev(a, t5);
    			append_dev(p, t6);
    			append_dev(p, t7);
    			append_dev(div1, t8);
    			if (if_block) if_block.m(div1, null);
    			append_dev(div3, t9);
    			append_dev(div3, div2);
    			append_dev(div2, button0);
    			append_dev(button0, t10);
    			append_dev(div2, t11);
    			append_dev(div2, button1);
    			append_dev(button1, t12);
    			append_dev(div2, t13);
    			append_dev(div2, button2);
    			append_dev(button2, t14);

    			if (!mounted) {
    				dispose = [
    					listen_dev(a, "click", prevent_default(/*click_handler*/ ctx[8]), false, true, false, false),
    					listen_dev(button0, "click", /*togglePreferences*/ ctx[7], false, false, false, false),
    					listen_dev(button1, "click", /*acceptNecessary*/ ctx[6], false, false, false, false),
    					listen_dev(button2, "click", /*acceptAll*/ ctx[5], false, false, false, false)
    				];

    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*lang*/ 1 && t1_value !== (t1_value = (/*lang*/ ctx[0] === 'hu'
    			? 'Cookie Beállítások'
    			: 'Cookie Settings') + "")) set_data_dev(t1, t1_value);

    			if (dirty & /*lang*/ 1 && t3_value !== (t3_value = (/*lang*/ ctx[0] === 'hu'
    			? 'Ez a weboldal cookie-kat használ a jobb felhasználói élmény érdekében. Az "Elfogadom" gombra kattintva hozzájárul a cookie-k használatához. További információt az '
    			: 'We use cookies to enhance your browsing experience. By clicking "Accept", you consent to our use of cookies. See our ') + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*lang*/ 1 && t5_value !== (t5_value = (/*lang*/ ctx[0] === 'hu'
    			? 'Adatvédelmi Szabályzatban'
    			: 'Privacy Policy') + "")) set_data_dev(t5, t5_value);

    			if (dirty & /*lang*/ 1 && t7_value !== (t7_value = (/*lang*/ ctx[0] === 'hu'
    			? ' talál.'
    			: ' for more information.') + "")) set_data_dev(t7, t7_value);

    			if (/*showPreferences*/ ctx[3]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block_1$1(ctx);
    					if_block.c();
    					if_block.m(div1, null);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}

    			if (dirty & /*showPreferences, lang*/ 9 && t10_value !== (t10_value = (/*showPreferences*/ ctx[3]
    			? /*lang*/ ctx[0] === 'hu' ? 'Elrejt' : 'Hide'
    			: /*lang*/ ctx[0] === 'hu' ? 'Beállítások' : 'Preferences') + "")) set_data_dev(t10, t10_value);

    			if (dirty & /*lang*/ 1 && t12_value !== (t12_value = (/*lang*/ ctx[0] === 'hu'
    			? 'Csak szükséges'
    			: 'Necessary Only') + "")) set_data_dev(t12, t12_value);

    			if (dirty & /*lang*/ 1 && t14_value !== (t14_value = (/*lang*/ ctx[0] === 'hu' ? 'Elfogadom' : 'Accept All') + "")) set_data_dev(t14, t14_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			if (if_block) if_block.d();
    			mounted = false;
    			run_all(dispose);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block$1.name,
    		type: "if",
    		source: "(83:2) {#if consentShown}",
    		ctx
    	});

    	return block;
    }

    // (109:10) {#if showPreferences}
    function create_if_block_1$1(ctx) {
    	let div4;
    	let div1;
    	let div0;
    	let label0;
    	let input0;
    	let t0;
    	let span0;
    	let t1_value = /*config*/ ctx[4].necessary.title[/*lang*/ ctx[0]] + "";
    	let t1;
    	let t2;
    	let p0;
    	let t3_value = /*config*/ ctx[4].necessary.description[/*lang*/ ctx[0]] + "";
    	let t3;
    	let t4;
    	let div3;
    	let div2;
    	let label1;
    	let input1;
    	let t5;
    	let span1;
    	let t6_value = /*config*/ ctx[4].analytics.title[/*lang*/ ctx[0]] + "";
    	let t6;
    	let t7;
    	let p1;
    	let t8_value = /*config*/ ctx[4].analytics.description[/*lang*/ ctx[0]] + "";
    	let t8;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div4 = element("div");
    			div1 = element("div");
    			div0 = element("div");
    			label0 = element("label");
    			input0 = element("input");
    			t0 = space();
    			span0 = element("span");
    			t1 = text(t1_value);
    			t2 = space();
    			p0 = element("p");
    			t3 = text(t3_value);
    			t4 = space();
    			div3 = element("div");
    			div2 = element("div");
    			label1 = element("label");
    			input1 = element("input");
    			t5 = space();
    			span1 = element("span");
    			t6 = text(t6_value);
    			t7 = space();
    			p1 = element("p");
    			t8 = text(t8_value);
    			attr_dev(input0, "type", "checkbox");
    			input0.checked = true;
    			input0.disabled = true;
    			attr_dev(input0, "class", "svelte-jnh8nj");
    			add_location(input0, file$1, 113, 20, 4058);
    			add_location(span0, file$1, 114, 20, 4119);
    			attr_dev(label0, "class", "cookie-checkbox-label svelte-jnh8nj");
    			add_location(label0, file$1, 112, 18, 4000);
    			attr_dev(div0, "class", "cookie-category-header svelte-jnh8nj");
    			add_location(div0, file$1, 111, 16, 3945);
    			attr_dev(p0, "class", "cookie-category-description svelte-jnh8nj");
    			add_location(p0, file$1, 117, 16, 4229);
    			attr_dev(div1, "class", "cookie-category svelte-jnh8nj");
    			add_location(div1, file$1, 110, 14, 3899);
    			attr_dev(input1, "type", "checkbox");
    			attr_dev(input1, "class", "svelte-jnh8nj");
    			add_location(input1, file$1, 123, 20, 4518);
    			add_location(span1, file$1, 124, 20, 4594);
    			attr_dev(label1, "class", "cookie-checkbox-label svelte-jnh8nj");
    			add_location(label1, file$1, 122, 18, 4460);
    			attr_dev(div2, "class", "cookie-category-header svelte-jnh8nj");
    			add_location(div2, file$1, 121, 16, 4405);
    			attr_dev(p1, "class", "cookie-category-description svelte-jnh8nj");
    			add_location(p1, file$1, 127, 16, 4704);
    			attr_dev(div3, "class", "cookie-category svelte-jnh8nj");
    			add_location(div3, file$1, 120, 14, 4359);
    			attr_dev(div4, "class", "cookie-preferences svelte-jnh8nj");
    			add_location(div4, file$1, 109, 12, 3852);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div4, anchor);
    			append_dev(div4, div1);
    			append_dev(div1, div0);
    			append_dev(div0, label0);
    			append_dev(label0, input0);
    			append_dev(label0, t0);
    			append_dev(label0, span0);
    			append_dev(span0, t1);
    			append_dev(div1, t2);
    			append_dev(div1, p0);
    			append_dev(p0, t3);
    			append_dev(div4, t4);
    			append_dev(div4, div3);
    			append_dev(div3, div2);
    			append_dev(div2, label1);
    			append_dev(label1, input1);
    			input1.checked = /*analyticsEnabled*/ ctx[1];
    			append_dev(label1, t5);
    			append_dev(label1, span1);
    			append_dev(span1, t6);
    			append_dev(div3, t7);
    			append_dev(div3, p1);
    			append_dev(p1, t8);

    			if (!mounted) {
    				dispose = listen_dev(input1, "change", /*input1_change_handler*/ ctx[9]);
    				mounted = true;
    			}
    		},
    		p: function update(ctx, dirty) {
    			if (dirty & /*lang*/ 1 && t1_value !== (t1_value = /*config*/ ctx[4].necessary.title[/*lang*/ ctx[0]] + "")) set_data_dev(t1, t1_value);
    			if (dirty & /*lang*/ 1 && t3_value !== (t3_value = /*config*/ ctx[4].necessary.description[/*lang*/ ctx[0]] + "")) set_data_dev(t3, t3_value);

    			if (dirty & /*analyticsEnabled*/ 2) {
    				input1.checked = /*analyticsEnabled*/ ctx[1];
    			}

    			if (dirty & /*lang*/ 1 && t6_value !== (t6_value = /*config*/ ctx[4].analytics.title[/*lang*/ ctx[0]] + "")) set_data_dev(t6, t6_value);
    			if (dirty & /*lang*/ 1 && t8_value !== (t8_value = /*config*/ ctx[4].analytics.description[/*lang*/ ctx[0]] + "")) set_data_dev(t8, t8_value);
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div4);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1$1.name,
    		type: "if",
    		source: "(109:10) {#if showPreferences}",
    		ctx
    	});

    	return block;
    }

    function create_fragment$1(ctx) {
    	let if_block_anchor;
    	let if_block = /*consentShown*/ ctx[2] && create_if_block$1(ctx);

    	const block = {
    		c: function create() {
    			if (if_block) if_block.c();
    			if_block_anchor = empty();
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			if (if_block) if_block.m(target, anchor);
    			insert_dev(target, if_block_anchor, anchor);
    		},
    		p: function update(ctx, [dirty]) {
    			if (/*consentShown*/ ctx[2]) {
    				if (if_block) {
    					if_block.p(ctx, dirty);
    				} else {
    					if_block = create_if_block$1(ctx);
    					if_block.c();
    					if_block.m(if_block_anchor.parentNode, if_block_anchor);
    				}
    			} else if (if_block) {
    				if_block.d(1);
    				if_block = null;
    			}
    		},
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (if_block) if_block.d(detaching);
    			if (detaching) detach_dev(if_block_anchor);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment$1.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function checkCookieConsent() {
    	const consent = localStorage.getItem('cookieConsent');
    	return consent ? JSON.parse(consent) : null;
    }

    function instance$1($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('CookieConsent', slots, []);

    	const config = {
    		necessary: {
    			title: {
    				hu: 'Szükséges Cookie-k',
    				en: 'Necessary Cookies'
    			},
    			description: {
    				hu: 'Ezek a cookie-k a weboldal működéséhez szükségesek, és nem kapcsolhatók ki.',
    				en: 'These cookies are required for the website to function and cannot be switched off.'
    			}
    		},
    		analytics: {
    			title: {
    				hu: 'Analitikai Cookie-k',
    				en: 'Analytics Cookies'
    			},
    			description: {
    				hu: 'Ezek a cookie-k segítenek megérteni, hogyan használják a látogatók a weboldalt.',
    				en: 'These cookies help us understand how visitors interact with our website.'
    			}
    		}
    	};

    	let lang;
    	let analyticsEnabled = false;

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		$$invalidate(0, lang = value);
    	});

    	let consentShown = false;
    	let showPreferences = false;

    	function saveConsent(categories) {
    		localStorage.setItem('cookieConsent', JSON.stringify({
    			necessary: true, // Always necessary
    			analytics: categories.includes('analytics'),
    			date: new Date().toISOString()
    		}));

    		$$invalidate(2, consentShown = false);
    	}

    	function acceptAll() {
    		saveConsent(['necessary', 'analytics']);
    	}

    	function acceptNecessary() {
    		saveConsent(['necessary']);
    	}

    	function togglePreferences() {
    		$$invalidate(3, showPreferences = !showPreferences);
    	}

    	onMount(() => {
    		// Check if consent was already given
    		const existingConsent = checkCookieConsent();

    		if (!existingConsent) {
    			// Show consent banner if no consent found
    			setTimeout(
    				() => {
    					$$invalidate(2, consentShown = true);
    				},
    				1000
    			);
    		} else {
    			// Set analytics checkbox based on saved preferences
    			$$invalidate(1, analyticsEnabled = existingConsent.analytics || false);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<CookieConsent> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => window.location.hash = 'privacy';

    	function input1_change_handler() {
    		analyticsEnabled = this.checked;
    		$$invalidate(1, analyticsEnabled);
    	}

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		config,
    		lang,
    		analyticsEnabled,
    		consentShown,
    		showPreferences,
    		checkCookieConsent,
    		saveConsent,
    		acceptAll,
    		acceptNecessary,
    		togglePreferences
    	});

    	$$self.$inject_state = $$props => {
    		if ('lang' in $$props) $$invalidate(0, lang = $$props.lang);
    		if ('analyticsEnabled' in $$props) $$invalidate(1, analyticsEnabled = $$props.analyticsEnabled);
    		if ('consentShown' in $$props) $$invalidate(2, consentShown = $$props.consentShown);
    		if ('showPreferences' in $$props) $$invalidate(3, showPreferences = $$props.showPreferences);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [
    		lang,
    		analyticsEnabled,
    		consentShown,
    		showPreferences,
    		config,
    		acceptAll,
    		acceptNecessary,
    		togglePreferences,
    		click_handler,
    		input1_change_handler
    	];
    }

    class CookieConsent extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance$1, create_fragment$1, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "CookieConsent",
    			options,
    			id: create_fragment$1.name
    		});
    	}
    }

    /* src/App.svelte generated by Svelte v3.59.2 */

    const { console: console_1 } = globals;
    const file = "src/App.svelte";

    // (154:4) {:else}
    function create_else_block(ctx) {
    	let div;
    	let h1;
    	let t1;
    	let button;
    	let mounted;
    	let dispose;

    	const block = {
    		c: function create() {
    			div = element("div");
    			h1 = element("h1");
    			h1.textContent = "Page not found";
    			t1 = space();
    			button = element("button");
    			button.textContent = "Go to Home";
    			attr_dev(h1, "class", "svelte-1stkayg");
    			add_location(h1, file, 156, 8, 4675);
    			attr_dev(button, "class", "svelte-1stkayg");
    			add_location(button, file, 157, 8, 4707);
    			attr_dev(div, "class", "error-container svelte-1stkayg");
    			add_location(div, file, 155, 6, 4637);
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div, anchor);
    			append_dev(div, h1);
    			append_dev(div, t1);
    			append_dev(div, button);

    			if (!mounted) {
    				dispose = listen_dev(button, "click", /*click_handler*/ ctx[5], false, false, false, false);
    				mounted = true;
    			}
    		},
    		p: noop,
    		i: noop,
    		o: noop,
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div);
    			mounted = false;
    			dispose();
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_else_block.name,
    		type: "else",
    		source: "(154:4) {:else}",
    		ctx
    	});

    	return block;
    }

    // (152:41) 
    function create_if_block_6(ctx) {
    	let thankyou;
    	let current;

    	thankyou = new ThankYou({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(thankyou.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(thankyou, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const thankyou_changes = {};
    			if (dirty & /*lang*/ 8) thankyou_changes.lang = /*lang*/ ctx[3];
    			thankyou.$set(thankyou_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(thankyou.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(thankyou.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(thankyou, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_6.name,
    		type: "if",
    		source: "(152:41) ",
    		ctx
    	});

    	return block;
    }

    // (150:40) 
    function create_if_block_5(ctx) {
    	let privacy;
    	let current;

    	privacy = new Privacy({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(privacy.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(privacy, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const privacy_changes = {};
    			if (dirty & /*lang*/ 8) privacy_changes.lang = /*lang*/ ctx[3];
    			privacy.$set(privacy_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(privacy.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(privacy.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(privacy, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_5.name,
    		type: "if",
    		source: "(150:40) ",
    		ctx
    	});

    	return block;
    }

    // (148:40) 
    function create_if_block_4(ctx) {
    	let booking;
    	let current;

    	booking = new Booking({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(booking.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(booking, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const booking_changes = {};
    			if (dirty & /*lang*/ 8) booking_changes.lang = /*lang*/ ctx[3];
    			booking.$set(booking_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(booking.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(booking.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(booking, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_4.name,
    		type: "if",
    		source: "(148:40) ",
    		ctx
    	});

    	return block;
    }

    // (146:40) 
    function create_if_block_3(ctx) {
    	let contact;
    	let current;

    	contact = new Contact({
    			props: {
    				navigate: /*navigate*/ ctx[4],
    				lang: /*lang*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(contact.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(contact, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const contact_changes = {};
    			if (dirty & /*lang*/ 8) contact_changes.lang = /*lang*/ ctx[3];
    			contact.$set(contact_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(contact.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(contact.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(contact, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_3.name,
    		type: "if",
    		source: "(146:40) ",
    		ctx
    	});

    	return block;
    }

    // (144:41) 
    function create_if_block_2(ctx) {
    	let services;
    	let current;

    	services = new Services({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(services.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(services, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const services_changes = {};
    			if (dirty & /*lang*/ 8) services_changes.lang = /*lang*/ ctx[3];
    			services.$set(services_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(services.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(services.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(services, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_2.name,
    		type: "if",
    		source: "(144:41) ",
    		ctx
    	});

    	return block;
    }

    // (142:38) 
    function create_if_block_1(ctx) {
    	let about;
    	let current;

    	about = new About({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(about.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(about, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const about_changes = {};
    			if (dirty & /*lang*/ 8) about_changes.lang = /*lang*/ ctx[3];
    			about.$set(about_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(about.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(about.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(about, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block_1.name,
    		type: "if",
    		source: "(142:38) ",
    		ctx
    	});

    	return block;
    }

    // (140:4) {#if currentPage === 'home'}
    function create_if_block(ctx) {
    	let home;
    	let current;

    	home = new Home({
    			props: {
    				navigate: /*navigate*/ ctx[4],
    				lang: /*lang*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			create_component(home.$$.fragment);
    		},
    		m: function mount(target, anchor) {
    			mount_component(home, target, anchor);
    			current = true;
    		},
    		p: function update(ctx, dirty) {
    			const home_changes = {};
    			if (dirty & /*lang*/ 8) home_changes.lang = /*lang*/ ctx[3];
    			home.$set(home_changes);
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(home.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(home.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			destroy_component(home, detaching);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_if_block.name,
    		type: "if",
    		source: "(140:4) {#if currentPage === 'home'}",
    		ctx
    	});

    	return block;
    }

    function create_fragment(ctx) {
    	let div3;
    	let div2;
    	let div0;
    	let img;
    	let img_src_value;
    	let t0;
    	let div1;
    	let t1;
    	let header;
    	let t2;
    	let main;
    	let current_block_type_index;
    	let if_block;
    	let t3;
    	let footer;
    	let t4;
    	let cookieconsent;
    	let t5;
    	let discountpopup;
    	let div3_class_value;
    	let current;

    	header = new Header({
    			props: {
    				navigate: /*navigate*/ ctx[4],
    				currentPage: /*currentPage*/ ctx[0],
    				lang: /*lang*/ ctx[3]
    			},
    			$$inline: true
    		});

    	const if_block_creators = [
    		create_if_block,
    		create_if_block_1,
    		create_if_block_2,
    		create_if_block_3,
    		create_if_block_4,
    		create_if_block_5,
    		create_if_block_6,
    		create_else_block
    	];

    	const if_blocks = [];

    	function select_block_type(ctx, dirty) {
    		if (/*currentPage*/ ctx[0] === 'home') return 0;
    		if (/*currentPage*/ ctx[0] === 'about') return 1;
    		if (/*currentPage*/ ctx[0] === 'services') return 2;
    		if (/*currentPage*/ ctx[0] === 'contact') return 3;
    		if (/*currentPage*/ ctx[0] === 'booking') return 4;
    		if (/*currentPage*/ ctx[0] === 'privacy') return 5;
    		if (/*currentPage*/ ctx[0] === 'thankyou') return 6;
    		return 7;
    	}

    	current_block_type_index = select_block_type(ctx);
    	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

    	footer = new Footer({
    			props: {
    				navigate: /*navigate*/ ctx[4],
    				lang: /*lang*/ ctx[3]
    			},
    			$$inline: true
    		});

    	cookieconsent = new CookieConsent({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	discountpopup = new DiscountPopup({
    			props: { lang: /*lang*/ ctx[3] },
    			$$inline: true
    		});

    	const block = {
    		c: function create() {
    			div3 = element("div");
    			div2 = element("div");
    			div0 = element("div");
    			img = element("img");
    			t0 = space();
    			div1 = element("div");
    			t1 = space();
    			create_component(header.$$.fragment);
    			t2 = space();
    			main = element("main");
    			if_block.c();
    			t3 = space();
    			create_component(footer.$$.fragment);
    			t4 = space();
    			create_component(cookieconsent.$$.fragment);
    			t5 = space();
    			create_component(discountpopup.$$.fragment);
    			if (!src_url_equal(img.src, img_src_value = "images/logo.svg")) attr_dev(img, "src", img_src_value);
    			attr_dev(img, "alt", "Zima Auto");
    			attr_dev(img, "class", "svelte-1stkayg");
    			add_location(img, file, 131, 6, 3949);
    			attr_dev(div0, "class", "logo-container svelte-1stkayg");
    			add_location(div0, file, 130, 4, 3914);
    			attr_dev(div1, "class", "spinner svelte-1stkayg");
    			add_location(div1, file, 133, 4, 4010);
    			attr_dev(div2, "class", "loader svelte-1stkayg");
    			toggle_class(div2, "hidden", !/*pageLoading*/ ctx[1]);
    			add_location(div2, file, 129, 2, 3861);
    			attr_dev(main, "class", "svelte-1stkayg");
    			add_location(main, file, 138, 2, 4096);
    			attr_dev(div3, "class", div3_class_value = "app-container " + (/*pageLoading*/ ctx[1] ? 'loading' : '') + " " + (/*pageTransition*/ ctx[2] ? 'page-transition' : '') + " svelte-1stkayg");
    			add_location(div3, file, 128, 0, 3758);
    		},
    		l: function claim(nodes) {
    			throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
    		},
    		m: function mount(target, anchor) {
    			insert_dev(target, div3, anchor);
    			append_dev(div3, div2);
    			append_dev(div2, div0);
    			append_dev(div0, img);
    			append_dev(div2, t0);
    			append_dev(div2, div1);
    			append_dev(div3, t1);
    			mount_component(header, div3, null);
    			append_dev(div3, t2);
    			append_dev(div3, main);
    			if_blocks[current_block_type_index].m(main, null);
    			append_dev(div3, t3);
    			mount_component(footer, div3, null);
    			append_dev(div3, t4);
    			mount_component(cookieconsent, div3, null);
    			append_dev(div3, t5);
    			mount_component(discountpopup, div3, null);
    			current = true;
    		},
    		p: function update(ctx, [dirty]) {
    			if (!current || dirty & /*pageLoading*/ 2) {
    				toggle_class(div2, "hidden", !/*pageLoading*/ ctx[1]);
    			}

    			const header_changes = {};
    			if (dirty & /*currentPage*/ 1) header_changes.currentPage = /*currentPage*/ ctx[0];
    			if (dirty & /*lang*/ 8) header_changes.lang = /*lang*/ ctx[3];
    			header.$set(header_changes);
    			let previous_block_index = current_block_type_index;
    			current_block_type_index = select_block_type(ctx);

    			if (current_block_type_index === previous_block_index) {
    				if_blocks[current_block_type_index].p(ctx, dirty);
    			} else {
    				group_outros();

    				transition_out(if_blocks[previous_block_index], 1, 1, () => {
    					if_blocks[previous_block_index] = null;
    				});

    				check_outros();
    				if_block = if_blocks[current_block_type_index];

    				if (!if_block) {
    					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
    					if_block.c();
    				} else {
    					if_block.p(ctx, dirty);
    				}

    				transition_in(if_block, 1);
    				if_block.m(main, null);
    			}

    			const footer_changes = {};
    			if (dirty & /*lang*/ 8) footer_changes.lang = /*lang*/ ctx[3];
    			footer.$set(footer_changes);
    			const cookieconsent_changes = {};
    			if (dirty & /*lang*/ 8) cookieconsent_changes.lang = /*lang*/ ctx[3];
    			cookieconsent.$set(cookieconsent_changes);
    			const discountpopup_changes = {};
    			if (dirty & /*lang*/ 8) discountpopup_changes.lang = /*lang*/ ctx[3];
    			discountpopup.$set(discountpopup_changes);

    			if (!current || dirty & /*pageLoading, pageTransition*/ 6 && div3_class_value !== (div3_class_value = "app-container " + (/*pageLoading*/ ctx[1] ? 'loading' : '') + " " + (/*pageTransition*/ ctx[2] ? 'page-transition' : '') + " svelte-1stkayg")) {
    				attr_dev(div3, "class", div3_class_value);
    			}
    		},
    		i: function intro(local) {
    			if (current) return;
    			transition_in(header.$$.fragment, local);
    			transition_in(if_block);
    			transition_in(footer.$$.fragment, local);
    			transition_in(cookieconsent.$$.fragment, local);
    			transition_in(discountpopup.$$.fragment, local);
    			current = true;
    		},
    		o: function outro(local) {
    			transition_out(header.$$.fragment, local);
    			transition_out(if_block);
    			transition_out(footer.$$.fragment, local);
    			transition_out(cookieconsent.$$.fragment, local);
    			transition_out(discountpopup.$$.fragment, local);
    			current = false;
    		},
    		d: function destroy(detaching) {
    			if (detaching) detach_dev(div3);
    			destroy_component(header);
    			if_blocks[current_block_type_index].d();
    			destroy_component(footer);
    			destroy_component(cookieconsent);
    			destroy_component(discountpopup);
    		}
    	};

    	dispatch_dev("SvelteRegisterBlock", {
    		block,
    		id: create_fragment.name,
    		type: "component",
    		source: "",
    		ctx
    	});

    	return block;
    }

    function instance($$self, $$props, $$invalidate) {
    	let { $$slots: slots = {}, $$scope } = $$props;
    	validate_slots('App', slots, []);
    	let currentPage = 'home';
    	let pageLoading = true;
    	let pageTransition = false;
    	let lang = 'hu'; // Local state for current language

    	// Subscribe to language changes
    	currentLang.subscribe(value => {
    		$$invalidate(3, lang = value);
    	});

    	function navigate(page) {
    		if (page === currentPage) return;
    		$$invalidate(2, pageTransition = true);

    		// After a brief transition delay, update the page
    		setTimeout(
    			() => {
    				$$invalidate(0, currentPage = page);
    				window.scrollTo(0, 0);

    				// Update URL using HTML5 history API instead of hash
    				if (page === 'home') {
    					window.history.pushState(null, null, '/');
    				} else {
    					window.history.pushState(null, null, `/${page}`);
    				}

    				// After page loads, remove transition class
    				setTimeout(
    					() => {
    						$$invalidate(2, pageTransition = false);
    					},
    					100
    				);
    			},
    			300
    		);
    	}

    	// Handle initial page load and redirects
    	onMount(() => {
    		// Remove the debug comment that appears during redirects
    		if (document.body && document.body.childNodes) {
    			// Check for text nodes that contain the debug comment
    			for (let i = 0; i < document.body.childNodes.length; i++) {
    				const node = document.body.childNodes[i];

    				if (node.nodeType === Node.TEXT_NODE && (node.textContent.includes('// src/App.svelte') || node.textContent.includes('import App from'))) {
    					node.textContent = '';
    					console.log('Debug comment removed');
    					break;
    				}
    			}
    		}

    		// Show initial page immediately
    		$$invalidate(1, pageLoading = false);

    		// Set language
    		currentLang.set('hu');

    		localStorage.setItem('zimaAutoLang', 'hu');

    		// Handle routes - updated for HTML5 history mode
    		// Handle routes - updated for HTML5 history mode
    		const handleRouting = () => {
    			// Get the path from the URL
    			const path = window.location.pathname;

    			// Handle thank you page route
    			if (path === '/thankyou') {
    				$$invalidate(0, currentPage = 'thankyou');
    				return;
    			}

    			// Home page - root path
    			if (path === '/' || path === '') {
    				$$invalidate(0, currentPage = 'home');
    				return;
    			}

    			// Extract the page name from the path (remove leading slash)
    			const pageName = path.substring(1).split('/')[0];

    			// Check if this is a valid page
    			if (['about', 'services', 'contact', 'booking', 'privacy', 'thankyou'].includes(pageName)) {
    				$$invalidate(0, currentPage = pageName);
    			} else {
    				// Not a valid page - go to home or show 404
    				$$invalidate(0, currentPage = 'home');

    				// Optionally redirect to home page
    				window.history.replaceState(null, null, '/');
    			}

    			console.log('Current page:', currentPage);
    		};

    		// Run the routing logic
    		handleRouting();

    		// Listen for popstate (back/forward browser navigation)
    		window.addEventListener('popstate', handleRouting);

    		// Clean up event listeners
    		return () => {
    			window.removeEventListener('popstate', handleRouting);
    		};
    	});

    	// Save language preference when it changes
    	currentLang.subscribe(value => {
    		if (typeof localStorage !== 'undefined' && value) {
    			localStorage.setItem('zimaAutoLang', value);
    		}
    	});

    	const writable_props = [];

    	Object.keys($$props).forEach(key => {
    		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console_1.warn(`<App> was created with unknown prop '${key}'`);
    	});

    	const click_handler = () => navigate('home');

    	$$self.$capture_state = () => ({
    		onMount,
    		currentLang,
    		Header,
    		Footer,
    		Home,
    		About,
    		Services,
    		Contact,
    		Booking,
    		Privacy,
    		ThankYou,
    		DiscountPopup,
    		CookieConsent,
    		currentPage,
    		pageLoading,
    		pageTransition,
    		lang,
    		navigate
    	});

    	$$self.$inject_state = $$props => {
    		if ('currentPage' in $$props) $$invalidate(0, currentPage = $$props.currentPage);
    		if ('pageLoading' in $$props) $$invalidate(1, pageLoading = $$props.pageLoading);
    		if ('pageTransition' in $$props) $$invalidate(2, pageTransition = $$props.pageTransition);
    		if ('lang' in $$props) $$invalidate(3, lang = $$props.lang);
    	};

    	if ($$props && "$$inject" in $$props) {
    		$$self.$inject_state($$props.$$inject);
    	}

    	return [currentPage, pageLoading, pageTransition, lang, navigate, click_handler];
    }

    class App extends SvelteComponentDev {
    	constructor(options) {
    		super(options);
    		init(this, options, instance, create_fragment, safe_not_equal, {});

    		dispatch_dev("SvelteRegisterComponent", {
    			component: this,
    			tagName: "App",
    			options,
    			id: create_fragment.name
    		});
    	}
    }

    // Ensure clean mounting and error handling
    let app;

    try {
      // Remove any existing content that might cause rendering issues
      document.body.innerHTML = '';

      // Create the app instance with error handling
      app = new App({
        target: document.body,
        props: {}
      });

      // Console logging to verify app loads
      console.log('Zima Auto website loaded successfully');
    } catch (error) {
      console.error('Failed to mount Svelte app:', error);
      
      // Fallback error display
      document.body.innerHTML = `
    <div style='font-family: sans-serif; text-align: center; padding: 20px;'>
      <h1>Application Load Error</h1>
      <p>Sorry, there was a problem loading the website. Please try refreshing the page.</p>
      <small>${error.message}</small>
    </div>
  `;
    }

    var app$1 = app;

    return app$1;

})();
//# sourceMappingURL=bundle.js.map
